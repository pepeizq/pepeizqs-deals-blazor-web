@using Microsoft.AspNetCore.Components.Web
@using Microsoft.Data.SqlClient

<style>
    .caja-admin-dlcs {
        background-color: var(--fondoSubsubcabecera);
        border: 2px solid var(--fondoSubcabecera);
        padding: 30px;
        box-shadow: 0px 4px 8px 0px rgba(0, 0, 0, 0.28),0px 0px 2px 0px rgba(0, 0, 0, 0.24);
    }
</style>

<div style="display: flex; flex-direction: column; gap: 30px;">
    <div class="caja-admin-dlcs" style="display: flex; align-items: center; gap: 30px;">
        <button @onclick="(async () => await BuscarDlcMaestro())" class="boton-pequeño" style="padding: 10px 30px; width: fit-content;">
            Buscar Maestro
        </button>

        <button @onclick="DescartarDlcMaestro" class="boton-pequeño" style="padding: 10px 30px; width: fit-content;">
            Descartar
        </button>
    </div>

    @if (dlcsPendientes?.Count > 0)
    {
        <div class="caja-admin-dlcs" style="display: flex; align-items: center; gap: 20px;">
            <a href="/game/@dlcMostrar.Id.ToString()" target="_blank">
                <img src="@dlcMostrar.Imagenes.Header_460x215" style="width: 230px; height: 107px;" />
            </a>

            <div>
                <div>@dlcMostrar.Nombre</div>

                <a href="https://store.steampowered.com/app/@dlcMostrar.IdSteam" target="_blank" class="boton-pequeño" style="text-align: center; width: fit-content; padding: 10px 40px; margin-top: 15px;">Abrir Steam</a>
            </div>

            @if (noEncontrado == true)
            {
                <div style="background-color: var(--fondoPeligro); padding: 10px 30px;">
                    No Encontrado
                </div>
            }
        </div>
    }
</div>

@code {

    #nullable disable

    private SqlConnection conexion = new SqlConnection();

    private List<global::Juegos.Juego> dlcsPendientes = new List<global::Juegos.Juego>();
    private global::Juegos.Juego dlcMostrar = new global::Juegos.Juego();

    protected override void OnInitialized()
    {
        if (conexion.State != System.Data.ConnectionState.Open)
        {
            conexion = Herramientas.BaseDatos.Conectar();
        }

        dlcsPendientes = BaseDatos.Juegos.Buscar.DLCs(null, global::Juegos.JuegoTipo.DLC, conexion);
		dlcMostrar = dlcsPendientes.FirstOrDefault();
    }

    private bool noEncontrado = false;

    private async Task BuscarDlcMaestro()
    {
        if (conexion.State != System.Data.ConnectionState.Open)
        {
            conexion = Herramientas.BaseDatos.Conectar();
        }

        noEncontrado = false;

        foreach (var dlcPendiente in dlcsPendientes)
        {
            await Task.Yield();
			dlcMostrar = dlcPendiente;

            global::Juegos.Juego nuevoJuego = await APIs.Steam.Juego.CargarDatosJuego(dlcPendiente.IdSteam.ToString());

            if (nuevoJuego != null)
            {
                if (string.IsNullOrEmpty(nuevoJuego.Maestro) == false)
                {
                    using (conexion)
                    {
                        dlcPendiente.Maestro = nuevoJuego.Maestro;
                        BaseDatos.Juegos.Actualizar.DlcMaestro(dlcPendiente);
                    }
                }
                else
                {
                    noEncontrado = true;
                    break;
                }
            }

            await InvokeAsync(StateHasChanged);
		}
    }

    private void DescartarDlcMaestro()
    {
        if (conexion.State != System.Data.ConnectionState.Open)
        {
            conexion = Herramientas.BaseDatos.Conectar();
        }

        noEncontrado = false;

        using (conexion)
        {
            dlcMostrar.Maestro = "descartado";
            BaseDatos.Juegos.Actualizar.DlcMaestro(dlcMostrar, conexion);

			dlcsPendientes.Remove(dlcMostrar);
            dlcMostrar = dlcsPendientes.FirstOrDefault();
        }
	}
}
