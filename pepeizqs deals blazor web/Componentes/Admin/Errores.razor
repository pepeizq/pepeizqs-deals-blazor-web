@using BaseDatos.Errores
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.Data.SqlClient

@inject IJSRuntime JavaScript

<script>
    function moverScroll(id) {
        const yOffset = 0;
        const element = document.getElementById(id);
        const y = element.getBoundingClientRect().top + window.pageYOffset + yOffset;

        window.scrollTo({ top: y, behavior: 'smooth' });
    }
</script>

<div class="caja-diseño" style="padding: 30px;">
    <button @onclick="@(e => LimpiarErrores(e))" class="boton-pequeño" style="text-align: center; width: fit-content; padding: 10px 40px;">Limpiar Todo</button>

    @if (listaErrores?.Count > 0)
    {
        <hr />

        foreach (var error in listaErrores)
        {
            <div style="display: flex; flex-direction: column; margin-top: 10px; margin-bottom: 10px;">
                <button @onclick="@(e => AmpliarError(e, error))" class="boton-pequeño" style="padding: 10px 15px;">
                    <div style="display: flex; align-items: center; gap: 20px;">
                        <div>
                            @error.Fecha
                        </div>
                        <div>
                            @error.Seccion
                        </div>
                    </div>
                </button>
            </div>
        }
    }
</div>

<div id="errorSeleccionado">
    @if (errorSeleccionado != null)
    {
        <div class="caja-diseño" style="padding: 30px; margin-top: 40px;">
            <div style="width: 100%;">
                @if (string.IsNullOrEmpty(errorSeleccionado.Mensaje) == false)
                {
                    if (errorSeleccionado.Mensaje != "nada")
                    {
                        <div>
                            @errorSeleccionado.Mensaje
                        </div>
                        <hr />
                    }
                }

                <div>
                    @errorSeleccionado.Stacktrace
                </div>

                @if (string.IsNullOrEmpty(errorSeleccionado.Enlace) == false)
                {
                    <hr />
                    <div>
                        <a href="@errorSeleccionado.Enlace" target="_blank">@errorSeleccionado.Enlace</a>
                    </div>
                }

                @if (string.IsNullOrEmpty(errorSeleccionado.SentenciaSQL) == false)
                {
                    <hr />
                    <div>
                        @errorSeleccionado.SentenciaSQL
                    </div>
                }
            </div>
        </div>
    }
</div>

@code {

    #nullable disable

    private SqlConnection conexion = new SqlConnection();

    List<BaseDatos.Errores.Error> listaErrores = new List<BaseDatos.Errores.Error>();
    BaseDatos.Errores.Error errorSeleccionado = null;

    protected override void OnInitialized()
    {
        if (conexion.State != System.Data.ConnectionState.Open)
        {
            conexion = Herramientas.BaseDatos.Conectar();
        }

        listaErrores = BaseDatos.Errores.Buscar.Todos(conexion);
    }

    private void LimpiarErrores(MouseEventArgs e)
    {
        if (conexion.State != System.Data.ConnectionState.Open)
        {
            conexion = Herramientas.BaseDatos.Conectar();
        }

        using (conexion)
        {
            BaseDatos.Errores.Limpiar.Ejecutar(conexion);

            listaErrores = new List<BaseDatos.Errores.Error>();
			errorSeleccionado = null;
        }
    }

    private async void AmpliarError(MouseEventArgs e, BaseDatos.Errores.Error error)
    {
        errorSeleccionado = error;

        await JavaScript.InvokeVoidAsync("moverScroll", "errorSeleccionado");
    }
}
