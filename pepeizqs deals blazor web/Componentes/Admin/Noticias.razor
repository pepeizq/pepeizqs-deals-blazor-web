@using BlazorNotification
@using Bundles2
@using Gratis2
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.Data.SqlClient
@using Microsoft.JSInterop
@using Microsoft.VisualBasic
@using Suscripciones2
@using global::Noticias
@using pepeizqs_deals_web.Data

@inject IBlazorNotificationService ServicioNotificaciones

<style>
    .caja-admin-noticias {
        background-color: var(--fondoSubsubcabecera);
        border: 2px solid var(--fondoSubcabecera);
        padding: 30px;
        box-shadow: 0px 4px 8px 0px rgba(0, 0, 0, 0.28),0px 0px 2px 0px rgba(0, 0, 0, 0.24);
    }
</style>

<div class="caja-admin-noticias">
    <div class="opciones-combobox" style="width: 33%;">
        <select @onchange="@(e => CambiarNoticiaTipo(e))">
            @foreach (NoticiaMostrar mostrar in NoticiasCargar.CargarNoticiasMostrar())
            {
                if (mostrar.Mostrar == true)
                {
                    <option value="@mostrar.Tipo">@mostrar.Tipo</option>
                } 
            }
        </select>
    </div>
</div>

@if (noticiaTipoSeleccionada == NoticiaTipo.Bundles)
{
    <div class="caja-admin-noticias" style="margin-top: 20px;">
        <div class="opciones-combobox" style="width: 33%;">
            <select>
                @foreach (Bundles2.Bundle bundle in BundlesCargar.GenerarListado())
                {
                    <option @onclick="@(e => CambiarBundleNoticias(e, bundle.Tipo))">
                        @bundle.NombreTienda
                    </option>
                }
            </select>
        </div>

        @if (bundleTipoSeleccionado != BundleTipo.Desconocido)
        {
            <div>
                @foreach (var bundle in BaseDatos.Bundles.Buscar.UnTipo(bundleTipoSeleccionado))
                {
                    <button @onclick="@(e => ClickearBundleNoticias(e, bundle.Id))" class="boton-pequeño" style="margin: 20px 0px 0px 0px;">
                        <div style="display: flex; align-items: center;">
                            <img src="@BundlesCargar.DevolverBundle(bundle.Tipo).ImagenTienda" style="width: 12%; margin: 10px;" />
                            <div style="margin-left: 20px;">@bundle.NombreBundle</div>
                        </div>
                    </button>
                }
            </div>
        }
    </div>

    @if (plantillaCargada == true)
    {
        <div class="caja-admin-noticias" style="margin-top: 20px;">
            <div>
                <label style="margin-bottom: 10px;">Bundle Id:</label>
                <input type="text" class="entrada-texto" @bind-value="@noticia.BundleId" />
            </div>

            <div style="margin-top: 20px;">
                <label style="margin-bottom: 10px;">Juegos:</label>
                <input type="text" class="entrada-texto" @bind-value="@noticia.Juegos" />
            </div>
        </div>
    }
}
else if (noticiaTipoSeleccionada == NoticiaTipo.Gratis)
{
    <div class="caja-admin-noticias" style="margin-top: 20px;">
        <div class="opciones-combobox" style="width: 33%;">
            <select @onchange="@(e => CambiarGratisNoticias(e))">
                @foreach (Gratis2.Gratis gratis in GratisCargar.GenerarListado())
                {
                    <option value="@gratis.Tipo">@gratis.Nombre</option>
                }
            </select>
        </div>

        @if (gratisSeleccionadoNoticias != null)
        {
            <div>
                @foreach (var gratis in BaseDatos.Gratis.Buscar.UnTipo(gratisSeleccionadoNoticias, Herramientas.Tiempo.Actual).OrderBy(x => x.FechaEmpieza).Reverse().ToList())
                {
                    <button @onclick="@(e => ClickearGratisJuegoNoticias(e, gratis.JuegoId, gratis.Id))" class="boton-pequeño" style="margin: 20px 0px 0px 0px;">
                        <div style="display: flex; align-items: center;">
                            @if (noticia.Juegos != null)
                            {
                                @if (noticia.Juegos.Contains(gratis.JuegoId.ToString()) == true)
                                {
                                    <div style="margin-left: 10px; margin-right: 20px;">
                                        <div style="max-width: 20px; max-height: 20px;">
                                            <svg class="svg-boton" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512">
                                                <path d="M438.6 105.4c12.5 12.5 12.5 32.8 0 45.3l-256 256c-12.5 12.5-32.8 12.5-45.3 0l-128-128c-12.5-12.5-12.5-32.8 0-45.3s32.8-12.5 45.3 0L160 338.7 393.4 105.4c12.5-12.5 32.8-12.5 45.3 0z" />
                                            </svg>
                                        </div>
                                    </div>
                                }
                            }

                            <img src="@GratisCargar.DevolverGratis(gratis.Tipo).ImagenLogo" style="width: 12%; margin: 10px;" />
                            <div>@gratis.Nombre</div>
                        </div>
                    </button>
                }
            </div>
        }
    </div>

    @if (plantillaCargada == true)
    {
        <div class="caja-admin-noticias" style="margin-top: 20px;">
            <div>
                <label style="margin-bottom: 10px;">Gratis Ids:</label>
                <input type="text" class="entrada-texto" @bind-value="@noticia.GratisIds" />
            </div>

            <div style="margin-top: 20px;">
                <label style="margin-bottom: 10px;">Juegos:</label>
                <input type="text" class="entrada-texto" @bind-value="@noticia.Juegos" />
            </div>
        </div>
    }
}
else if (noticiaTipoSeleccionada == NoticiaTipo.Suscripciones)
{
    <div class="caja-admin-noticias" style="margin-top: 20px;">
        <div class="opciones-combobox" style="width: 33%;">
            <select @onchange="@(e => CambiarSuscripcion(e))">
                @foreach (Suscripcion suscripcion in SuscripcionesCargar.GenerarListado())
                {
                    if (suscripcion.AdminInteractuar == true)
                    {
                        <option value="@suscripcion.Id">@suscripcion.Nombre</option>
                    }
                }
            </select>
        </div>

        @if (suscripcionSeleccionadaNoticias != null)
        {
            <div>
                @foreach (var suscripcion in BaseDatos.Suscripciones.Buscar.UnTipo(suscripcionSeleccionadaNoticias, Herramientas.Tiempo.Actual).OrderBy(x => x.FechaEmpieza).Reverse().ToList())
                {
                    <button @onclick="@(e => ClickearSuscripcionJuego(e, suscripcion.JuegoId, suscripcion.Id))" class="boton-pequeño" style="margin: 20px 0px 0px 0px;">
                        <div style="display: flex; align-items: center;">
                            @if (noticia.Juegos != null)
                            {
                                @if (noticia.Juegos.Contains(suscripcion.JuegoId.ToString()) == true)
                                {
                                    <div style="margin-left: 10px; margin-right: 20px;">
                                        <div style="max-width: 20px; max-height: 20px;">
                                            <svg class="svg-boton" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512">
                                                <path d="M438.6 105.4c12.5 12.5 12.5 32.8 0 45.3l-256 256c-12.5 12.5-32.8 12.5-45.3 0l-128-128c-12.5-12.5-12.5-32.8 0-45.3s32.8-12.5 45.3 0L160 338.7 393.4 105.4c12.5-12.5 32.8-12.5 45.3 0z" />
                                            </svg>
                                        </div>
                                    </div>
                                }
                            }

                            <img src="@SuscripcionesCargar.DevolverSuscripcion(suscripcion.Tipo).ImagenLogo" style="width: 12%; margin: 10px;" />
                            <div style="margin-left: 20px;">@suscripcion.Nombre</div>
                        </div>
                    </button>
                }
            </div>
        }
    </div>

    @if (plantillaCargada == true)
    {
        <div class="caja-admin-noticias" style="margin-top: 20px;">
            <div>
                <label style="margin-left: 10px; margin-bottom: 10px;">Suscripciones Ids:</label>
                <input type="text" class="entrada-texto" value="@noticia.SuscripcionesIds" />
            </div>

            <div style="margin-top: 20px;">
                <label style="margin-left: 10px; margin-bottom: 10px;">Juegos:</label>
                <input type="text" class="entrada-texto" value="@noticia.Juegos" />
            </div>
        </div>
    }
}
else if (noticiaTipoSeleccionada == NoticiaTipo.Despedidas)
{
    <div class="caja-admin-noticias" style="margin-top: 20px; display: flex; flex-direction: column; gap: 20px;">
        <div>
            <div style="margin-bottom: 10px; display: flex; align-items: center; gap: 10px;">
                @if (fechaDespedidas.Day == DateTime.Now.Day && fechaDespedidas.Month == DateTime.Now.Month && fechaDespedidas.Year == DateTime.Now.Year)
                {
                    <div style="background-color: var(--fondoPeligro); padding: 6px 12px;">
                        Misma fecha que hoy
                    </div>
                }

                <div>Fecha Termina:</div>
            </div>

            <input type="datetime-local" @onchange="@(e => CambiarFechaDespedidas(e))" class="entrada-texto" style="width: 33%; min-width: 100px;" value="@noticia.Fecha.ToString("yyyy-MM-dd HH:mm:ss")">
        </div>

        <div>
            <div style="margin-bottom: 10px; display: flex; align-items: center; gap: 10px;">
                @if (string.IsNullOrEmpty(enlaceDespedidas) == true)
                {
                    <div style="background-color: var(--fondoPeligro); padding: 6px 12px;">
                        No hay enlace
                    </div>
                }

                <div>Enlace Información:</div>
            </div>

            <input type="text" class="entrada-texto" @bind-value="enlaceDespedidas" />
        </div>

        @if (fechaDespedidas > DateTime.Now && string.IsNullOrEmpty(enlaceDespedidas) == false)
        {
            <div>
                <label style="margin-bottom: 10px;">Buscador Juegos:</label>
                <input type="text" @bind-value="cadenaBusqueda" @bind-value:event="oninput" @bind-value:after="TextoCambiaBuscador" class="entrada-texto" />
            </div>
        }
        
        @if (resultadosMostrar.Count > 0)
        {
            <div>
                <Virtualize Context="juego" Items="@resultadosMostrar" ItemSize="107" OverscanCount="5">
                    <ItemContent>
                        <div class="perfil-flexible-centrado" style="padding-top: 10px;">
                            <button @onclick="@(e => SeleccionarJuegoBuscador(e, juego.Id, juego.Imagenes.Capsule_231x87, juego.Nombre))" class="boton-pequeño">
                                <div class="perfil-flexible-centrado">
                                    <div style="width: 12%;">
                                        <img src="@juego.Imagenes.Capsule_231x87" style="max-height:100%; max-width:100%;" />
                                    </div>

                                    <div style="width: 88%; padding-left: 15px; padding-right: 15px;">
                                        @juego.Nombre<br />
                                        <span style="font-size: 13px;">@juego.Id.ToString()</span>
                                    </div>
                                </div>
                            </button>
                        </div>
                    </ItemContent>
                </Virtualize>
            </div> 
        }
    </div>
}

@if (plantillaCargada == true || noticiaTipoSeleccionada == NoticiaTipo.Web || noticiaTipoSeleccionada == NoticiaTipo.Patreon)
{
    <div class="caja-admin-noticias" style="margin-top: 20px;">
        <div>
            <label style="margin-bottom: 10px;">Imagen Noticia:</label>
            <input class="entrada-texto" @bind-value="@noticia.Imagen">

            @if (string.IsNullOrEmpty(noticia.Imagen) == false)
            {
                <div style="margin-top: 10px;">
                    <img src="@noticia.Imagen" style="max-width: 300px; max-height: 300px;" />
                </div>
            }
        </div>

        @if (noticiaTipoSeleccionada != NoticiaTipo.Despedidas)
        {
            <div style="margin-top: 20px;">
                <label style="margin-bottom: 10px;">Fecha Termina:</label>
                <input type="datetime-local" @onchange="@(e => CambiarFechaNoticias(e))" class="entrada-texto" style="width: 33%; min-width: 100px;" value="@noticia.Fecha.ToString("yyyy-MM-dd HH:mm:ss")">
            </div>

            bool mostrarEnlace = true;

            if (noticiaTipoSeleccionada == NoticiaTipo.Web)
            {
                mostrarEnlace = false;           
            }
            else if (noticiaTipoSeleccionada == NoticiaTipo.Patreon)
            {
                mostrarEnlace = false;
            }

            if (mostrarEnlace == true)
            {
                <div style="margin-top: 20px;">
                    <label style="margin-bottom: 10px;">Enlace:</label>
                    <input type="text" class="entrada-texto" @bind-value="@noticia.Enlace" />
                </div>
            }
        }
    </div>

    <div class="caja-admin-noticias" style="margin-top: 20px;">
        <div>
            <div style="display: flex; align-items: center; gap: 15px; margin-bottom: 10px;">
                <img src="/imagenes/banderas/english.svg" style="max-width: 24px; max-height: 24px;" />

                <div>
                    Título
                </div>
            </div>

            <input type="text" class="entrada-texto" @bind-value="@noticia.TituloEn" />
        </div>

        <div style="margin-top: 20px;">
            <div style="display: flex; align-items: center; gap: 15px; margin-bottom: 10px;">
                <img src="/imagenes/banderas/spanish.svg" style="max-width: 24px; max-height: 24px;" />

                <div>
                    Título
                </div>
            </div>

            <input type="text" class="entrada-texto" @bind-value="@noticia.TituloEs" />
        </div>
    </div>

    <div class="caja-admin-noticias" style=" margin-top: 20px; display: flex; flex-direction: column; gap: 20px;">
        <div style="display: flex; flex-direction: column; gap: 10px;">
            <div style="display: flex; align-items: center; gap: 15px; margin-bottom: 10px;">
                <img src="/imagenes/banderas/english.svg" style="max-width: 24px; max-height: 24px;" />

                <div>
                    Contenido
                </div>
            </div>

            <div style="display: flex; align-items: center; gap: 10px;">
                <button @onclick="@(e => EditorDiv(e, noticia, "en"))" class="boton-expandir" style="background-color: var(--fondoBotonPequeño); color: var(--colorTexto); text-decoration: none; border: 0px;">
                    <div style="display: flex; align-items: center; gap: 10px; padding: 5px 10px;">
                        <div style="font-size: 14px;">div</div>
                    </div>
                </button>

                <button @onclick="@(e => EditorUl(e, noticia, "en"))" class="boton-expandir" style="background-color: var(--fondoBotonPequeño); color: var(--colorTexto); text-decoration: none; border: 0px;">
                    <div style="display: flex; align-items: center; gap: 10px; padding: 5px 10px;">
                        <div style="font-size: 14px;">ul</div>
                    </div>
                </button>

                <button @onclick="@(e => EditorEnlace(e, noticia, "en"))" class="boton-expandir" style="background-color: var(--fondoBotonPequeño); color: var(--colorTexto); text-decoration: none; border: 0px;">
                    <div style="display: flex; align-items: center; gap: 10px; padding: 5px 10px;">
                        <div style="font-size: 14px;">a href</div>
                    </div>
                </button>
            </div>

            <textarea class="entrada-texto" rows="8" @bind="noticia.ContenidoEn" oninput="this.style.height = 'auto'; this.style.height = (this.scrollHeight) + 'px';" />
        </div>

        @if (string.IsNullOrEmpty(noticia.ContenidoEn) == false)
        {
            <div>
                @((MarkupString)noticia.ContenidoEn)
            </div>
        }
    </div>

    <div class="caja-admin-noticias" style="margin-top: 20px; display: flex; flex-direction: column; gap: 20px;">
        <div style="display: flex; flex-direction: column; gap: 10px;">
            <div style="display: flex; align-items: center; gap: 15px; margin-bottom: 10px;">
                <img src="/imagenes/banderas/spanish.svg" style="max-width: 24px; max-height: 24px;" />

                <div>
                    Contenido
                </div>
            </div>

            <div style="display: flex; align-items: center; gap: 10px;">
                <button @onclick="@(e => EditorDiv(e, noticia, "es"))" class="boton-expandir" style="background-color: var(--fondoBotonPequeño); color: var(--colorTexto); text-decoration: none; border: 0px;">
                    <div style="display: flex; align-items: center; gap: 10px; padding: 5px 10px;">
                        <div style="font-size: 14px;">div</div>
                    </div>
                </button>

                <button @onclick="@(e => EditorUl(e, noticia, "es"))" class="boton-expandir" style="background-color: var(--fondoBotonPequeño); color: var(--colorTexto); text-decoration: none; border: 0px;">
                    <div style="display: flex; align-items: center; gap: 10px; padding: 5px 10px;">
                        <div style="font-size: 14px;">ul</div>
                    </div>
                </button>

                <button @onclick="@(e => EditorEnlace(e, noticia, "es"))" class="boton-expandir" style="background-color: var(--fondoBotonPequeño); color: var(--colorTexto); text-decoration: none; border: 0px;">
                    <div style="display: flex; align-items: center; gap: 10px; padding: 5px 10px;">
                        <div style="font-size: 14px;">a href</div>
                    </div>
                </button>
            </div>

            <textarea class="entrada-texto" rows="8" @bind="noticia.ContenidoEs" oninput="this.style.height = 'auto'; this.style.height = (this.scrollHeight) + 'px';" />
        </div>

        @if (string.IsNullOrEmpty(noticia.ContenidoEs) == false)
        {
            <div>
                @((MarkupString)noticia.ContenidoEs)
            </div>
        }
    </div>

    <div class="caja-admin-noticias" style="margin-top: 20px; display: flex; flex-direction: column; gap: 30px;">
        @if (enviandoNoticia == false)
        {
            <button @onclick="@(e => AñadirNoticia(e))" class="boton-pequeño" style="text-align: center; width: fit-content; padding: 10px 40px; font-size: 20px;">
                Añadir Noticia
            </button>
        }
        else
        {
            <div>
                Enviando Noticia...
            </div>
        }

        @if (idNoticiaEnviada > 0)
        {
            <a href="/news/@idNoticiaEnviada/">/news/@idNoticiaEnviada/</a>

            <div>
                <div>
                    Redes Sociales
                </div>

                <hr/>

                <div style="display: flex; align-items: center; gap: 40px;">
                    <div style="display: flex; align-items: center; gap: 20px;">
                        <div style="max-width: 24px; max-height: 24px;">
                            <svg class="svg-icono" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path d="M389.2 48h70.6L305.6 224.2 487 464H345L233.7 318.6 106.5 464H35.8L200.7 275.5 26.8 48H172.4L272.9 180.9 389.2 48zM364.4 421.8h39.1L151.1 88h-42L364.4 421.8z" /></svg>
                        </div> 
            
                        @if (enviandoTwitter == true)
                        {
                            <div style="max-width: 24px; max-height: 24px;">
                                <svg class="svg-icono" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path d="M304 48a48 48 0 1 0 -96 0 48 48 0 1 0 96 0zm0 416a48 48 0 1 0 -96 0 48 48 0 1 0 96 0zM48 304a48 48 0 1 0 0-96 48 48 0 1 0 0 96zm464-48a48 48 0 1 0 -96 0 48 48 0 1 0 96 0zM142.9 437A48 48 0 1 0 75 369.1 48 48 0 1 0 142.9 437zm0-294.2A48 48 0 1 0 75 75a48 48 0 1 0 67.9 67.9zM369.1 437A48 48 0 1 0 437 369.1 48 48 0 1 0 369.1 437z"/></svg>
                            </div>
                        }
                        else
                        {
                            if (enviadoTwitter == true)
                            {
                                <div style="max-width: 24px; max-height: 24px;">
                                    <svg class="svg-icono" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><path d="M438.6 105.4c12.5 12.5 12.5 32.8 0 45.3l-256 256c-12.5 12.5-32.8 12.5-45.3 0l-128-128c-12.5-12.5-12.5-32.8 0-45.3s32.8-12.5 45.3 0L160 338.7 393.4 105.4c12.5-12.5 32.8-12.5 45.3 0z"/></svg>
                                </div>
                            }
                            else
                            {
                                <div style="max-width: 24px; max-height: 24px;">
                                    <svg class="svg-icono" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 384 512"><path d="M342.6 150.6c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L192 210.7 86.6 105.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3L146.7 256 41.4 361.4c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0L192 301.3 297.4 406.6c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3L237.3 256 342.6 150.6z"/></svg>
                                </div>
                            }
                        }
                    </div>

                    <div style="display: flex; align-items: center; gap: 20px;">
                        <div style="max-width: 24px; max-height: 24px;">
                            <svg class="svg-icono" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path d="M111.8 62.2C170.2 105.9 233 194.7 256 242.4c23-47.6 85.8-136.4 144.2-180.2c42.1-31.6 110.3-56 110.3 21.8c0 15.5-8.9 130.5-14.1 149.2C478.2 298 412 314.6 353.1 304.5c102.9 17.5 129.1 75.5 72.5 133.5c-107.4 110.2-154.3-27.6-166.3-62.9l0 0c-1.7-4.9-2.6-7.8-3.3-7.8s-1.6 3-3.3 7.8l0 0c-12 35.3-59 173.1-166.3 62.9c-56.5-58-30.4-116 72.5-133.5C100 314.6 33.8 298 15.7 233.1C10.4 214.4 1.5 99.4 1.5 83.9c0-77.8 68.2-53.4 110.3-21.8z" /></svg>
                        </div>
            
                        @if (enviandoBluesky == true)
                        {
                            <div style="max-width: 24px; max-height: 24px;">
                                <svg class="svg-icono" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path d="M304 48a48 48 0 1 0 -96 0 48 48 0 1 0 96 0zm0 416a48 48 0 1 0 -96 0 48 48 0 1 0 96 0zM48 304a48 48 0 1 0 0-96 48 48 0 1 0 0 96zm464-48a48 48 0 1 0 -96 0 48 48 0 1 0 96 0zM142.9 437A48 48 0 1 0 75 369.1 48 48 0 1 0 142.9 437zm0-294.2A48 48 0 1 0 75 75a48 48 0 1 0 67.9 67.9zM369.1 437A48 48 0 1 0 437 369.1 48 48 0 1 0 369.1 437z"/></svg>
                            </div>
                        }
                        else
                        {
                            if (enviadoBluesky == true)
                            {
                                <div style="max-width: 24px; max-height: 24px;">
                                    <svg class="svg-icono" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><path d="M438.6 105.4c12.5 12.5 12.5 32.8 0 45.3l-256 256c-12.5 12.5-32.8 12.5-45.3 0l-128-128c-12.5-12.5-12.5-32.8 0-45.3s32.8-12.5 45.3 0L160 338.7 393.4 105.4c12.5-12.5 32.8-12.5 45.3 0z"/></svg>
                                </div>
                            }
                            else
                            {
                                <div style="max-width: 24px; max-height: 24px;">
                                    <svg class="svg-icono" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 384 512"><path d="M342.6 150.6c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L192 210.7 86.6 105.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3L146.7 256 41.4 361.4c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0L192 301.3 297.4 406.6c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3L237.3 256 342.6 150.6z"/></svg>
                                </div>
                            }
                        }
                    </div>

                    <div style="display: flex; align-items: center; gap: 20px;">
                        <div style="max-width: 24px; max-height: 24px;">
                            <svg class="svg-icono" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 496 512"><path d="M248 8C111 8 0 119 0 256S111 504 248 504 496 393 496 256 385 8 248 8zM363 176.7c-3.7 39.2-19.9 134.4-28.1 178.3-3.5 18.6-10.3 24.8-16.9 25.4-14.4 1.3-25.3-9.5-39.3-18.7-21.8-14.3-34.2-23.2-55.3-37.2-24.5-16.1-8.6-25 5.3-39.5 3.7-3.8 67.1-61.5 68.3-66.7 .2-.7 .3-3.1-1.2-4.4s-3.6-.8-5.1-.5q-3.3 .7-104.6 69.1-14.8 10.2-26.9 9.9c-8.9-.2-25.9-5-38.6-9.1-15.5-5-27.9-7.7-26.8-16.3q.8-6.7 18.5-13.7 108.4-47.2 144.6-62.3c68.9-28.6 83.2-33.6 92.5-33.8 2.1 0 6.6 .5 9.6 2.9a10.5 10.5 0 0 1 3.5 6.7A43.8 43.8 0 0 1 363 176.7z" /></svg>
                        </div>
            
                        @if (enviandoTelegram == true)
                        {
                            <div style="max-width: 24px; max-height: 24px;">
                                <svg class="svg-icono" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path d="M304 48a48 48 0 1 0 -96 0 48 48 0 1 0 96 0zm0 416a48 48 0 1 0 -96 0 48 48 0 1 0 96 0zM48 304a48 48 0 1 0 0-96 48 48 0 1 0 0 96zm464-48a48 48 0 1 0 -96 0 48 48 0 1 0 96 0zM142.9 437A48 48 0 1 0 75 369.1 48 48 0 1 0 142.9 437zm0-294.2A48 48 0 1 0 75 75a48 48 0 1 0 67.9 67.9zM369.1 437A48 48 0 1 0 437 369.1 48 48 0 1 0 369.1 437z"/></svg>
                            </div>
                        }
                        else
                        {
                            if (enviadoTelegram == true)
                            {
                                <div style="max-width: 24px; max-height: 24px;">
                                    <svg class="svg-icono" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><path d="M438.6 105.4c12.5 12.5 12.5 32.8 0 45.3l-256 256c-12.5 12.5-32.8 12.5-45.3 0l-128-128c-12.5-12.5-12.5-32.8 0-45.3s32.8-12.5 45.3 0L160 338.7 393.4 105.4c12.5-12.5 32.8-12.5 45.3 0z"/></svg>
                                </div>
                            }
                            else
                            {
                                <div style="max-width: 24px; max-height: 24px;">
                                    <svg class="svg-icono" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 384 512"><path d="M342.6 150.6c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L192 210.7 86.6 105.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3L146.7 256 41.4 361.4c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0L192 301.3 297.4 406.6c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3L237.3 256 342.6 150.6z"/></svg>
                                </div>
                            }
                        }
                    </div>

                    <div style="display: flex; align-items: center; gap: 20px;">
                        <div style="max-width: 24px; max-height: 24px;">
                            <svg class="svg-icono" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 640 512"><path d="M524.5 69.8a1.5 1.5 0 0 0 -.8-.7A485.1 485.1 0 0 0 404.1 32a1.8 1.8 0 0 0 -1.9 .9 337.5 337.5 0 0 0 -14.9 30.6 447.8 447.8 0 0 0 -134.4 0 309.5 309.5 0 0 0 -15.1-30.6 1.9 1.9 0 0 0 -1.9-.9A483.7 483.7 0 0 0 116.1 69.1a1.7 1.7 0 0 0 -.8 .7C39.1 183.7 18.2 294.7 28.4 404.4a2 2 0 0 0 .8 1.4A487.7 487.7 0 0 0 176 479.9a1.9 1.9 0 0 0 2.1-.7A348.2 348.2 0 0 0 208.1 430.4a1.9 1.9 0 0 0 -1-2.6 321.2 321.2 0 0 1 -45.9-21.9 1.9 1.9 0 0 1 -.2-3.1c3.1-2.3 6.2-4.7 9.1-7.1a1.8 1.8 0 0 1 1.9-.3c96.2 43.9 200.4 43.9 295.5 0a1.8 1.8 0 0 1 1.9 .2c2.9 2.4 6 4.9 9.1 7.2a1.9 1.9 0 0 1 -.2 3.1 301.4 301.4 0 0 1 -45.9 21.8 1.9 1.9 0 0 0 -1 2.6 391.1 391.1 0 0 0 30 48.8 1.9 1.9 0 0 0 2.1 .7A486 486 0 0 0 610.7 405.7a1.9 1.9 0 0 0 .8-1.4C623.7 277.6 590.9 167.5 524.5 69.8zM222.5 337.6c-29 0-52.8-26.6-52.8-59.2S193.1 219.1 222.5 219.1c29.7 0 53.3 26.8 52.8 59.2C275.3 311 251.9 337.6 222.5 337.6zm195.4 0c-29 0-52.8-26.6-52.8-59.2S388.4 219.1 417.9 219.1c29.7 0 53.3 26.8 52.8 59.2C470.7 311 447.5 337.6 417.9 337.6z" /></svg>
                        </div>
            
                        @if (enviandoDiscord == true)
                        {
                            <div style="max-width: 24px; max-height: 24px;">
                                <svg class="svg-icono" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path d="M304 48a48 48 0 1 0 -96 0 48 48 0 1 0 96 0zm0 416a48 48 0 1 0 -96 0 48 48 0 1 0 96 0zM48 304a48 48 0 1 0 0-96 48 48 0 1 0 0 96zm464-48a48 48 0 1 0 -96 0 48 48 0 1 0 96 0zM142.9 437A48 48 0 1 0 75 369.1 48 48 0 1 0 142.9 437zm0-294.2A48 48 0 1 0 75 75a48 48 0 1 0 67.9 67.9zM369.1 437A48 48 0 1 0 437 369.1 48 48 0 1 0 369.1 437z"/></svg>
                            </div>
                        }
                        else
                        {
                            if (enviadoDiscord == true)
                            {
                                <div style="max-width: 24px; max-height: 24px;">
                                    <svg class="svg-icono" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><path d="M438.6 105.4c12.5 12.5 12.5 32.8 0 45.3l-256 256c-12.5 12.5-32.8 12.5-45.3 0l-128-128c-12.5-12.5-12.5-32.8 0-45.3s32.8-12.5 45.3 0L160 338.7 393.4 105.4c12.5-12.5 32.8-12.5 45.3 0z"/></svg>
                                </div>
                            }
                            else
                            {
                                <div style="max-width: 24px; max-height: 24px;">
                                    <svg class="svg-icono" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 384 512"><path d="M342.6 150.6c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L192 210.7 86.6 105.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3L146.7 256 41.4 361.4c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0L192 301.3 297.4 406.6c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3L237.3 256 342.6 150.6z"/></svg>
                                </div>
                            }
                        }
                    </div>

                    <div style="display: flex; align-items: center; gap: 20px;">
                        <div style="max-width: 24px; max-height: 24px;">
                            <svg class="svg-icono" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 640 640"><path d="M64 320C64 178.6 178.6 64 320 64C461.4 64 576 178.6 576 320C576 461.4 461.4 576 320 576L101.1 576C87.4 576 80.6 559.5 90.2 549.8L139 501C92.7 454.7 64 390.7 64 320zM413.6 217.6C437.2 217.6 456.3 198.5 456.3 174.9C456.3 151.3 437.2 132.2 413.6 132.2C393 132.2 375.8 146.8 371.8 166.2C337.3 169.9 310.4 199.2 310.4 234.6L310.4 234.8C272.9 236.4 238.6 247.1 211.4 263.9C201.3 256.1 188.6 251.4 174.9 251.4C141.9 251.4 115.1 278.2 115.1 311.2C115.1 335.2 129.2 355.8 149.5 365.3C151.5 434.7 227.1 490.5 320.1 490.5C413.1 490.5 488.8 434.6 490.7 365.2C510.9 355.6 524.8 335 524.8 311.2C524.8 278.2 498 251.4 465 251.4C451.3 251.4 438.7 256 428.6 263.8C401.2 246.8 366.5 236.1 328.6 234.7L328.6 234.5C328.6 209.1 347.5 188 372 184.6C376.4 203.4 393.3 217.4 413.5 217.4L413.6 217.6zM241.1 310.9C257.8 310.9 270.6 328.5 269.6 350.2C268.6 371.9 256.1 379.8 239.3 379.8C222.5 379.8 207.9 371 208.9 349.3C209.9 327.6 224.3 311 241 311L241.1 310.9zM431.2 349.2C432.2 370.9 417.5 379.7 400.8 379.7C384.1 379.7 371.5 371.8 370.5 350.1C369.5 328.4 382.3 310.8 399 310.8C415.7 310.8 430.2 327.4 431.1 349.1L431.2 349.2zM383.1 405.9C372.8 430.5 348.5 447.8 320.1 447.8C291.7 447.8 267.4 430.5 257.1 405.9C255.9 403 257.9 399.7 261 399.4C279.4 397.5 299.3 396.5 320.1 396.5C340.9 396.5 360.8 397.5 379.2 399.4C382.3 399.7 384.3 403 383.1 405.9z" /></svg>
                        </div>

                        @if (enviandoReddit == true)
                        {
                            <div style="max-width: 24px; max-height: 24px;">
                                <svg class="svg-icono" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path d="M304 48a48 48 0 1 0 -96 0 48 48 0 1 0 96 0zm0 416a48 48 0 1 0 -96 0 48 48 0 1 0 96 0zM48 304a48 48 0 1 0 0-96 48 48 0 1 0 0 96zm464-48a48 48 0 1 0 -96 0 48 48 0 1 0 96 0zM142.9 437A48 48 0 1 0 75 369.1 48 48 0 1 0 142.9 437zm0-294.2A48 48 0 1 0 75 75a48 48 0 1 0 67.9 67.9zM369.1 437A48 48 0 1 0 437 369.1 48 48 0 1 0 369.1 437z" /></svg>
                            </div>
                        }
                        else
                        {
                            if (enviadoReddit == true)
                            {
                                <div style="max-width: 24px; max-height: 24px;">
                                    <svg class="svg-icono" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><path d="M438.6 105.4c12.5 12.5 12.5 32.8 0 45.3l-256 256c-12.5 12.5-32.8 12.5-45.3 0l-128-128c-12.5-12.5-12.5-32.8 0-45.3s32.8-12.5 45.3 0L160 338.7 393.4 105.4c12.5-12.5 32.8-12.5 45.3 0z" /></svg>
                                </div>
                            }
                            else
                            {
                                <div style="max-width: 24px; max-height: 24px;">
                                    <svg class="svg-icono" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 384 512"><path d="M342.6 150.6c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L192 210.7 86.6 105.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3L146.7 256 41.4 361.4c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0L192 301.3 297.4 406.6c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3L237.3 256 342.6 150.6z" /></svg>
                                </div>
                            }
                        }
                    </div>
                </div>
            </div>
        }
    </div>
}

@if (abrirEnlace == true)
{
    <div class="opciones-panel">
        <div style="width: 900px; background-color: var(--fondoOscuro); border: 1px solid var(--fondoBotonPequeño); padding: 40px; overflow-y: scroll; display: flex; flex-direction: column; gap: 20px;">
            <div style="display: flex; align-items: start; gap: 40px;">
                <button @onclick="@(e => EnlaceCerrar(e))" class="boton-pequeño" style="padding: 10px 15px; width: fit-content;">
                    <div style="max-width: 24px; max-height: 24px;">
                        <svg class="svg-icono" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">
                            <path d="M9.4 233.4c-12.5 12.5-12.5 32.8 0 45.3l160 160c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3L109.2 288 416 288c17.7 0 32-14.3 32-32s-14.3-32-32-32l-306.7 0L214.6 118.6c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0l-160 160z" />
                        </svg>
                    </div>
                </button>

                <div style="width: 100%;">
                    <label style="margin: 10px;">Juegos Buscador:</label>
                    <input type="text" @oninput="TextoCambiaBuscadorJuegoEnlace" class="entrada-texto" style="margin-bottom: 20px;" />

                    @if (juegosBuscadorEnlace != null)
                    {
                        @if (juegosBuscadorEnlace.Count > 0)
                        {
                            <div>
                                @foreach (var juego in juegosBuscadorEnlace)
                                {
                                    <div class="perfil-flexible-centrado perfil-espacio-top">
                                        <button @onclick="@(e => SeleccionarJuegoAñadirEnlace(e, juego.Id.ToString(), juego.Nombre))" class="boton-pequeño">
                                            <div class="perfil-flexible-centrado">
                                                <div style="width: 12%;">
                                                    <img src="@juego.Imagenes.Capsule_231x87" style="max-height:100%; max-width:100%;" />
                                                </div>

                                                <div style="width: 88%; padding-left: 15px; padding-right: 15px;">
                                                    @juego.Id - @juego.Nombre
                                                </div>
                                            </div>
                                        </button>
                                    </div>
                                }
                            </div>
                        }
                    }

                    <label style="margin: 10px;">Enlace:</label>

                    <input class="entrada-texto" @bind="contenidoEnlace">

                    <hr />

                    <button @onclick="@(e => EnlaceAñadir(e))" class="boton-pequeño" style="width: 120px; text-align: center; padding: 10px 20px;">
                        Añadir
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {

    #nullable disable

    private SqlConnection conexion = new SqlConnection();

    private NoticiaTipo noticiaTipoSeleccionada = NoticiaTipo.Bundles;

    private BundleTipo bundleTipoSeleccionado = BundleTipo.Desconocido;
    private string gratisSeleccionadoNoticias = null;
    private string suscripcionSeleccionadaNoticias = null;

    private bool plantillaCargada = false;
    private Plantilla noticia = new Plantilla();

    private bool enviandoNoticia = false;
    private int idNoticiaEnviada = 0;

    private bool enviandoTwitter = false;
    private bool enviadoTwitter = false;
    private bool enviandoBluesky = false;
    private bool enviadoBluesky = false;
    private bool enviandoTelegram = false;
    private bool enviadoTelegram = false;
    private bool enviandoDiscord = false;
    private bool enviadoDiscord = false;
    private bool enviandoReddit = false;
    private bool enviadoReddit = false;

    private void CambiarNoticiaTipo(ChangeEventArgs texto)
    {
        plantillaCargada = false;

        if (conexion.State != System.Data.ConnectionState.Open)
        {
            conexion = Herramientas.BaseDatos.Conectar();
        }

        using (conexion)
        {
            noticia = new Plantilla();
            noticia.Fecha = DateTime.Now;

            noticiaTipoSeleccionada = Enum.Parse<NoticiaTipo>(texto.Value.ToString());

            //-------------------------------------------------------

            if (noticiaTipoSeleccionada == NoticiaTipo.Gratis)
            {
                gratisSeleccionadoNoticias = GratisCargar.GenerarListado()[0].Tipo.ToString();
            }
            else if (noticiaTipoSeleccionada == NoticiaTipo.Suscripciones)
            {
                suscripcionSeleccionadaNoticias = SuscripcionesCargar.GenerarListado()[0].Id.ToString();
            }
            else if (noticiaTipoSeleccionada == NoticiaTipo.Web)
            {
                noticia.Imagen = "https://pepeizqdeals.com/logo/logoentrada.webp";
                noticia.Fecha = DateTime.Now.AddDays(7);
            }
            else if (noticiaTipoSeleccionada == NoticiaTipo.Patreon)
            {
                noticia.Imagen = "https://pepeizqdeals.com/logo/logoentradapatreon.webp";
                noticia.Fecha = DateTime.Now.AddDays(7);
            }
            else if (noticiaTipoSeleccionada == NoticiaTipo.Despedidas)
            {
                noticia.Imagen = "https://pepeizqdeals.com/logo/logoentrada.webp";
                noticia.Fecha = DateTime.Now;
            }
        }
    }

    private void CambiarFechaNoticias(ChangeEventArgs texto)
    {
        noticia.Fecha = Convert.ToDateTime(texto.Value.ToString());
    }

    private async Task AñadirNoticia(MouseEventArgs e)
    {
        enviandoNoticia = true;

        if (conexion.State != System.Data.ConnectionState.Open)
        {
            conexion = Herramientas.BaseDatos.Conectar();
        }

        if (conexion.State == System.Data.ConnectionState.Open)
        {
            using (conexion)
            {
                global::Noticias.Noticia noticiaAñadir = new global::Noticias.Noticia();

                noticiaAñadir.TituloEn = noticia.TituloEn;
                noticiaAñadir.TituloEs = noticia.TituloEs;
                noticiaAñadir.Imagen = noticia.Imagen;
                noticiaAñadir.ContenidoEn = noticia.ContenidoEn;
                noticiaAñadir.ContenidoEs = noticia.ContenidoEs;
                noticiaAñadir.Juegos = noticia.Juegos;
                noticiaAñadir.FechaEmpieza = DateTime.Now;
                noticiaAñadir.FechaTermina = noticia.Fecha;
                noticiaAñadir.Enlace = noticia.Enlace;
                noticiaAñadir.Tipo = noticiaTipoSeleccionada;

                if (noticiaTipoSeleccionada == NoticiaTipo.Bundles)
                {
                    noticiaAñadir.BundleTipo = BundlesCargar.DevolverBundle(bundleTipoSeleccionado).Tipo;
                    noticiaAñadir.BundleId = int.Parse(noticia.BundleId);
                }
                else if (noticiaTipoSeleccionada == NoticiaTipo.Gratis)
                {
                    noticiaAñadir.GratisTipo = GratisCargar.DevolverGratis(gratisSeleccionadoNoticias).Tipo;
                    noticiaAñadir.GratisIds = noticia.GratisIds;

                }
                else if (noticiaTipoSeleccionada == NoticiaTipo.Suscripciones)
                {
                    noticiaAñadir.SuscripcionTipo = SuscripcionesCargar.DevolverSuscripcion(suscripcionSeleccionadaNoticias).Id;
                    noticiaAñadir.SuscripcionesIds = noticia.SuscripcionesIds;
                }

                int id = BaseDatos.Noticias.Insertar.Ejecutar(noticiaAñadir);
                noticiaAñadir.Id = id;

                idNoticiaEnviada = id;

                foreach (var usuario in BaseDatos.Usuarios.Buscar.UsuariosNotificacionesCorreo())
                {
                    try
                    {
                        if (usuario.NotificationBundles == true && noticiaAñadir.Tipo == NoticiaTipo.Bundles)
                        {
                            Herramientas.Correos.EnviarNuevaNoticia(noticiaAñadir, usuario.Email, conexion, usuario.Language);
                        }

                        if (usuario.NotificationFree == true && noticiaAñadir.Tipo == NoticiaTipo.Gratis)
                        {
                            Herramientas.Correos.EnviarNuevaNoticia(noticiaAñadir, usuario.Email, conexion, usuario.Language);
                        }

                        if (usuario.NotificationSubscriptions == true && noticiaAñadir.Tipo == NoticiaTipo.Suscripciones)
                        {
                            Herramientas.Correos.EnviarNuevaNoticia(noticiaAñadir, usuario.Email, conexion, usuario.Language);
                        }

                        if (usuario.NotificationWeb == true && noticiaAñadir.Tipo == NoticiaTipo.Web)
                        {
                            Herramientas.Correos.EnviarNuevaNoticia(noticiaAñadir, usuario.Email, conexion, usuario.Language);
                        }

                        if (usuario.NotificationDelisted == true && noticiaAñadir.Tipo == NoticiaTipo.Despedidas)
                        {
                            Herramientas.Correos.EnviarNuevaNoticia(noticiaAñadir, usuario.Email, conexion, usuario.Language);
                        }

                        if (usuario.NotificationOthers == true && 
                            noticiaAñadir.Tipo != NoticiaTipo.Bundles && noticiaAñadir.Tipo != NoticiaTipo.Gratis && 
                            noticiaAñadir.Tipo != NoticiaTipo.Suscripciones && noticiaAñadir.Tipo != NoticiaTipo.Web &&
                            noticiaAñadir.Tipo != NoticiaTipo.Despedidas)
                        {
                            Herramientas.Correos.EnviarNuevaNoticia(noticiaAñadir, usuario.Email, conexion, usuario.Language);
                        }
                    }
                    catch (Exception ex)
                    {
                        BaseDatos.Errores.Insertar.Mensaje("Enviar Correo Noticia", ex);
                    }
                }

                enviandoTwitter = true;

                try
                {
                    enviadoTwitter = await Herramientas.RedesSociales.Twitter.Twitear(noticiaAñadir);
                }
                catch (Exception ex)
                {
                    BaseDatos.Errores.Insertar.Mensaje("Enviar Twitter Noticia", ex);
                }

                enviandoTwitter = false;

                await InvokeAsync(StateHasChanged);

                enviandoBluesky = true;

                try
                {
                    enviadoBluesky = await Herramientas.RedesSociales.Bluesky.Postear(noticiaAñadir);
                }
                catch (Exception ex)
                {
                    BaseDatos.Errores.Insertar.Mensaje("Enviar BlueSky Noticia", ex);
                }

                enviandoBluesky = false;

                await InvokeAsync(StateHasChanged);

                enviandoTelegram = true;

                try
                {
                    enviadoTelegram = await Herramientas.RedesSociales.Telegram.Postear(noticiaAñadir);
                }
                catch (Exception ex)
                {
                    BaseDatos.Errores.Insertar.Mensaje("Enviar Telegram Noticia", ex);
                }

                enviandoTelegram = false;

                await InvokeAsync(StateHasChanged);

                enviandoDiscord = true;

                try
                {
                    enviadoDiscord = await Herramientas.RedesSociales.Discord.Postear(noticiaAñadir);
                }
                catch (Exception ex)
                {
                    BaseDatos.Errores.Insertar.Mensaje("Enviar Discord Noticia", ex);
                }

                enviandoDiscord = false;

                await InvokeAsync(StateHasChanged);

                await Herramientas.NotificacionesPush.EnviarNoticia(ServicioNotificaciones, noticiaAñadir);

                enviandoReddit = true;

                try
                {
                    enviadoReddit = await Herramientas.RedesSociales.Reddit.Postear(noticiaAñadir);
                }
                catch (Exception ex)
                {
                    BaseDatos.Errores.Insertar.Mensaje("Enviar Reddit Noticia", ex);
                }

                enviandoReddit = false;

                #region Limpieza

                noticia = new Plantilla();
                plantillaCargada = false;

                bundleTipoSeleccionado = BundleTipo.Desconocido;
                gratisSeleccionadoNoticias = null;
                suscripcionSeleccionadaNoticias = null;

                enlaceDespedidas = string.Empty;
                fechaDespedidas = DateTime.Now;

                #endregion
            }
        }

        enviandoNoticia = false;
    }

    private void CambiarBundleNoticias(MouseEventArgs e, BundleTipo nuevoTipo)
    {
        bundleTipoSeleccionado = nuevoTipo;
    }

    private void ClickearBundleNoticias(MouseEventArgs e, int bundleId)
    {
        noticia = Plantillas.Bundles(bundleId);
        plantillaCargada = true;

        noticia.Enlace = BaseDatos.Bundles.Buscar.UnBundle(bundleId).Enlace;
    }

    private void CambiarGratisNoticias(ChangeEventArgs texto)
    {
        gratisSeleccionadoNoticias = texto.Value.ToString();
    }

    private void ClickearGratisJuegoNoticias(MouseEventArgs e, int juegoId, int id)
    {
        noticia = Plantillas.Gratis(noticia, juegoId, id, gratisSeleccionadoNoticias);
        plantillaCargada = true;

        if (string.IsNullOrEmpty(noticia.GratisIds) == false)
        {
            List<string> cantidadIds = new List<string>();
            string[] datosPartidos = noticia.GratisIds.Split(',');
            cantidadIds.AddRange(datosPartidos);

            if (cantidadIds.Count == 1)
            {
                noticia.Enlace = BaseDatos.Gratis.Buscar.UnGratis(cantidadIds[0]).Enlace;
            }
            else if (cantidadIds.Count > 0)
            {
                noticia.Enlace = null;
            }
        }
    }

    private void CambiarSuscripcion(ChangeEventArgs texto)
    {
        suscripcionSeleccionadaNoticias = texto.Value.ToString();
    }

    private void ClickearSuscripcionJuego(MouseEventArgs e, int juegoId, int id)
    {
        noticia = Plantillas.Suscripciones(noticia, juegoId, id, suscripcionSeleccionadaNoticias);
        plantillaCargada = true;

        if (string.IsNullOrEmpty(noticia.SuscripcionesIds) == false)
        {
            List<string> cantidadIds = new List<string>();
            string[] datosPartidos = noticia.SuscripcionesIds.Split(',');
            cantidadIds.AddRange(datosPartidos);

            if (cantidadIds.Count > 0)
            {
                string enlace = BaseDatos.Suscripciones.Buscar.Id(int.Parse(cantidadIds[0])).Enlace;

                foreach (var id2 in cantidadIds)
                {
                    if (BaseDatos.Suscripciones.Buscar.Id(int.Parse(id2)).Enlace != enlace)
                    {
                        enlace = string.Empty;
                        break;
                    }
                }

                noticia.Enlace = enlace;
            }
        }
    }

    #region Editor

    private void EditorDiv(MouseEventArgs e, Plantilla textoDondeAñadir, string idioma)
    {
        if (idioma == "en")
        {
            bool yaExiste = false;

            if (string.IsNullOrEmpty(textoDondeAñadir.ContenidoEn) == false)
            {
                if (textoDondeAñadir.ContenidoEn.Contains("<div>") == true)
                {
                    yaExiste = true;
                }
            }

            if (yaExiste == false)
            {
                textoDondeAñadir.ContenidoEn = textoDondeAñadir.ContenidoEn + "<div>" + Environment.NewLine + Environment.NewLine + "</div>";
            }
            else
            {
                textoDondeAñadir.ContenidoEn = textoDondeAñadir.ContenidoEn + @"<div style=""margin-top: 10px;"">" + Environment.NewLine + Environment.NewLine + "</div>";
            }
        }

        if (idioma == "es")
        {
            bool yaExiste = false;

            if (string.IsNullOrEmpty(textoDondeAñadir.ContenidoEs) == false)
            {
                if (textoDondeAñadir.ContenidoEs.Contains("<div>") == true)
                {
                    yaExiste = true;
                }
            }

            if (yaExiste == false)
            {
                textoDondeAñadir.ContenidoEs = textoDondeAñadir.ContenidoEs + @"<div>" + Environment.NewLine + Environment.NewLine + "</div>";
            }
            else
            {
                textoDondeAñadir.ContenidoEs = textoDondeAñadir.ContenidoEs + @"<div style=""margin-top: 10px;"">" + Environment.NewLine + Environment.NewLine + "</div>";
            }
        }       
    }

    private void EditorUl(MouseEventArgs e, Plantilla textoDondeAñadir, string idioma)
    {
        if (idioma == "en")
        {
            textoDondeAñadir.ContenidoEn = textoDondeAñadir.ContenidoEn + "<ul>" + Environment.NewLine + "<li>" + Environment.NewLine + Environment.NewLine + "</li>" + Environment.NewLine + "</ul>";
        }

        if (idioma == "es")
        {
            textoDondeAñadir.ContenidoEs = textoDondeAñadir.ContenidoEs + "<ul>" + Environment.NewLine + "<li>" + Environment.NewLine + Environment.NewLine + "</li>" + Environment.NewLine + "</ul>";
        }
    }

    private bool abrirEnlace = false;
    private string contenidoEnlace = string.Empty;
    private string tituloEnlace = string.Empty;
    private Plantilla plantillaEnlace = null;
    private string idiomaEnlace = null;

    private void EditorEnlace(MouseEventArgs e, Plantilla textoDondeAñadir, string idioma)
    {
        abrirEnlace = true;

        plantillaEnlace = textoDondeAñadir;
        idiomaEnlace = idioma;
    }

    private void EnlaceCerrar(MouseEventArgs e)
    {
        abrirEnlace = false;
    }


    private List<global::Juegos.Juego> juegosBuscadorEnlace = new List<global::Juegos.Juego>();

    private void TextoCambiaBuscadorJuegoEnlace(ChangeEventArgs texto)
    {
        if (texto.Value.ToString().Trim().Length > 1)
        {
            juegosBuscadorEnlace = BaseDatos.Juegos.Buscar.Nombre(texto.Value.ToString().Trim());
        }
        else
        {
            juegosBuscadorEnlace = new List<global::Juegos.Juego>();
        }
    }

    private void SeleccionarJuegoAñadirEnlace(MouseEventArgs e, string id, string nombre)
    {
        contenidoEnlace = "https://pepeizqdeals.com/game/" + id + "/" + Herramientas.EnlaceAdaptador.Nombre(nombre) + "/";
        tituloEnlace = nombre;
        juegosBuscadorEnlace = new List<global::Juegos.Juego>();
    }

    private void EnlaceAñadir(MouseEventArgs e)
    {
        if (plantillaEnlace != null && string.IsNullOrEmpty(idiomaEnlace) == false)
        {
            if (idiomaEnlace == "en")
            {
                plantillaEnlace.ContenidoEn = plantillaEnlace.ContenidoEn + "<a href=" + Strings.ChrW(34) + contenidoEnlace + Strings.ChrW(34) + " target=" + Strings.ChrW(34) + "_blank" + Strings.ChrW(34) + ">" + tituloEnlace + "</a>";
            }

            if (idiomaEnlace == "es")
            {
                plantillaEnlace.ContenidoEs = plantillaEnlace.ContenidoEs + "<a href=" + Strings.ChrW(34) + contenidoEnlace + Strings.ChrW(34) + " target=" + Strings.ChrW(34) + "_blank" + Strings.ChrW(34) + ">" + tituloEnlace + "</a>";
            }
        }

        abrirEnlace = false;
    }

    #endregion

    #region Despedidas

    private string enlaceDespedidas = string.Empty;
    private DateTime fechaDespedidas = DateTime.Now;

    private void CambiarFechaDespedidas(ChangeEventArgs texto)
    {
        fechaDespedidas = Convert.ToDateTime(texto.Value.ToString());
    }

    #endregion

    #region Buscador

    private List<global::Juegos.Juego> resultadosMostrar = new List<global::Juegos.Juego>();
    private string cadenaBusqueda = string.Empty;

    private async void TextoCambiaBuscador()
    {
        cadenaBusqueda = cadenaBusqueda.Replace("'", null);

        if (cadenaBusqueda.Trim().Length > 3)
        {
            resultadosMostrar.Clear();

            if (conexion == null)
            {
                conexion = Herramientas.BaseDatos.Conectar();
            }
            else
            {
                if (conexion.State != System.Data.ConnectionState.Open)
                {
                    conexion = Herramientas.BaseDatos.Conectar();
                }
            }

            using (conexion)
            {
                resultadosMostrar = BaseDatos.Juegos.Buscar.Nombre(cadenaBusqueda, conexion, 250, true, -1, true);            

                if (resultadosMostrar.Count > 0)
                {
                    await InvokeAsync(StateHasChanged);
                }
            }
        }
    }

    private void SeleccionarJuegoBuscador(MouseEventArgs e, int id, string imagen, string nombre)
    {
        resultadosMostrar.Clear();
        cadenaBusqueda = string.Empty;

        if (noticiaTipoSeleccionada == NoticiaTipo.Despedidas)
        {
            noticia = Plantillas.Despedidas(enlaceDespedidas, fechaDespedidas, id);
            plantillaCargada = true;
        }
    }

    #endregion
}
