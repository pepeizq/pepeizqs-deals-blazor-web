@using Herramientas
@using global::Juegos

<style>
	.cargando {
		width: 48px;
		height: 48px;
		border: 5px solid var(--colorTexto);
		border-bottom-color: transparent;
		border-radius: 50%;
		display: inline-block;
		box-sizing: border-box;
		animation: rotation 1s linear infinite;
	}

	@@keyframes rotation {
		0% {
			transform: rotate(0deg);
		}

		100% {
			transform: rotate(360deg);
		}
	}
</style>



@if (cargado == false)
{
	<div style="min-height: 200px; display: flex; align-items: center; justify-content: space-around;">
		<div class="cargando" />
	</div>
}
else
{
	if (juegos != null)
	{
		<div class="subcabecera" style="@fondoCabecera">
			<div class="cuerpo-ancho" style="padding: 20px 0px;">
				<div style="display: flex; align-items: center; gap: 15px; flex-flow: wrap;">
					<button class="boton-pequeño" style="@CambiarEstilo(JuegoDRM.NoEspecificado) width: fit-content; padding: 8px 16px; border-radius: 5px; display: flex; align-items: center;" @onclick="@(e => ListadoAbrir(e, JuegoDRM.NoEspecificado))">
						@Herramientas.Idiomas.BuscarTexto(idioma, "String27", "AccountGames")
					</button>

					@if (juegos.Steam != null && juegos.Steam.Count > 0)
					{
						<button class="boton-pequeño" style="@CambiarEstilo(JuegoDRM.Steam) width: fit-content; padding: 8px 16px; border-radius: 5px; display: flex; align-items: center; gap: 10px;" @onclick="@(e => ListadoAbrir(e, JuegoDRM.Steam))">
							<img src="@JuegoDRM2.SacarImagen(JuegoDRM.Steam)" style="max-width: 20px; max-height: 20px; object-fit: cover;" />
							(@juegos.Steam.Count.ToString())
						</button>
					}

					@if (juegos.Gog != null && juegos.Gog.Count > 0)
					{
						<button class="boton-pequeño" style="@CambiarEstilo(JuegoDRM.GOG) width: fit-content; padding: 8px 16px; border-radius: 5px; display: flex; align-items: center; gap: 10px;" @onclick="@(e => ListadoAbrir(e, JuegoDRM.GOG))">
							<img src="@JuegoDRM2.SacarImagen(JuegoDRM.GOG)" style="max-width: 20px; max-height: 20px; object-fit: cover;" />
							(@juegos.Gog.Count.ToString())
						</button>
					}

					@if (juegos.Amazon != null && juegos.Amazon.Count > 0)
					{
						<button class="boton-pequeño" style="@CambiarEstilo(JuegoDRM.Amazon) width: fit-content; padding: 8px 16px; border-radius: 5px; display: flex; align-items: center; gap: 10px;" @onclick="@(e => ListadoAbrir(e, JuegoDRM.Amazon))">
							<img src="@JuegoDRM2.SacarImagen(JuegoDRM.Amazon)" style="max-width: 20px; max-height: 20px; object-fit: cover;" />
							(@juegos.Amazon.Count.ToString())
						</button>
					}

					@if (juegos.Epic != null && juegos.Epic.Count > 0)
					{
						<button class="boton-pequeño" style="@CambiarEstilo(JuegoDRM.Epic) width: fit-content; padding: 8px 16px; border-radius: 5px; display: flex; align-items: center; gap: 10px;" @onclick="@(e => ListadoAbrir(e, JuegoDRM.Epic))">
							<img src="@JuegoDRM2.SacarImagen(JuegoDRM.Epic)" style="max-width: 20px; max-height: 20px; object-fit: cover;" />
							(@juegos.Epic.Count.ToString())
						</button>
					}

					@if (juegos.Ubisoft != null && juegos.Ubisoft.Count > 0)
					{
						<button class="boton-pequeño" style="@CambiarEstilo(JuegoDRM.Ubisoft) width: fit-content; padding: 8px 16px; border-radius: 5px; display: flex; align-items: center; gap: 10px;" @onclick="@(e => ListadoAbrir(e, JuegoDRM.Ubisoft))">
							<img src="@JuegoDRM2.SacarImagen(JuegoDRM.Ubisoft)" style="max-width: 20px; max-height: 20px; object-fit: cover;" />
							(@juegos.Ubisoft.Count.ToString())
						</button>
					}

					@if (juegos.Ea != null && juegos.Ea.Count > 0)
					{
						<button class="boton-pequeño" style="@CambiarEstilo(JuegoDRM.EA) width: fit-content; padding: 8px 16px; border-radius: 5px; display: flex; align-items: center; gap: 10px;" @onclick="@(e => ListadoAbrir(e, JuegoDRM.EA))">
							<img src="@JuegoDRM2.SacarImagen(JuegoDRM.EA)" style="max-width: 20px; max-height: 20px; object-fit: cover;" />
							(@juegos.Ea.Count.ToString())
						</button>
					}

					<div style="margin-left: auto; display: flex; justify-content: right; align-items: center; gap: 10px;">
						<div style="background-color: var(--buscadorSubcabecera); padding-right: 10px; display: flex; align-items: center; gap: 10px;">
							<input type="text" @bind-value="textoBuscador" @bind-value:event="oninput" @bind-value:after="TextoCambiaBuscador" class="entrada-texto" style="background-color: transparent; min-width: 50%; font-size: 14px; padding: 8px 10px;" placeholder="@Herramientas.Idiomas.BuscarTexto(idioma, "String7", "Wishlist")" />

							<div style="max-width: 16px;">
								<svg class="svg-icono" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">
									<path d="M416 208c0 45.9-14.9 88.3-40 122.7L502.6 457.4c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L330.7 376c-34.4 25.2-76.8 40-122.7 40C93.1 416 0 322.9 0 208S93.1 0 208 0S416 93.1 416 208zM208 352a144 144 0 1 0 0-288 144 144 0 1 0 0 288z" />
								</svg>
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>

		<div style="max-width: 1000px; margin: 20px auto;">
			@{
				List<JuegoUsuario> listaMostrar = new List<JuegoUsuario>();

				foreach (var juego in listaGestor)
				{
					bool mostrarDRM = false;
					bool mostrarBuscador = false;

					if (drmSeleccionado == JuegoDRM.NoEspecificado)
					{
						mostrarDRM = true;
					}
					else
					{
						if (juego.DRMs != null && juego.DRMs.Count > 0)
						{
							foreach (var drm in juego.DRMs)
							{
								if (drm.DRM == drmSeleccionado)
								{
									mostrarDRM = true;
									break;
								}
							}
						}
					}

					if (string.IsNullOrEmpty(textoBuscador) == false)
					{
						if (Herramientas.Buscador.LimpiarNombre(juego.Nombre).IndexOf(Herramientas.Buscador.LimpiarNombre(textoBuscador)) >= 0)
						{
							mostrarBuscador = true;
						}
					}
					else
					{
						mostrarBuscador = true;
                    }

					if (mostrarDRM == true && mostrarBuscador == true)
					{
						listaMostrar.Add(juego);
					}
				}
			}

			<Virtualize Context="juego" Items="listaMostrar">
				<ItemContent>
					<div style="margin: 20px 0px; display: flex; align-items: center; position: relative;">
						<a class="boton-pequeño" style="background: radial-gradient(ellipse at top left, var(--fondoBotonPequeño), var(--fondoOscuro)); padding: 2px;" href="/game/@juego.Id.ToString()/@Herramientas.EnlaceAdaptador.Nombre(juego.Nombre)/" target="_blank">
							<div style="display: flex; align-items: center; justify-content: center; flex-direction: row;">
								<div>
									<img src="@juego.Imagen" style="height: 100%; width: 100%; min-width: 186px; max-height: 70px; object-fit: cover;" />
								</div>

								<div style="width: 100%; padding: 5px 20px;">
									<div>@juego.Nombre</div>

									<div style="display: flex; align-items: center; gap: 10px; margin-top: 5px;">
										@foreach (var drm in juego.DRMs)
										{
                                            bool mostrarDRM = true;

											if (drm.DRM == JuegoDRM.NoEspecificado)
											{
												mostrarDRM = false;
                                            }
                                            else if (drmSeleccionado != JuegoDRM.NoEspecificado && drm.DRM != drmSeleccionado)
											{
												mostrarDRM = false;
                                            }

											if (mostrarDRM == true)
											{
												<div style="max-width: 20px; max-height: 20px; display: flex;">
													<img src="@JuegoDRM2.SacarImagen(drm.DRM)" style="width: 100%; height: 100%;" />
												</div>

												@if (drm.JugadoTiempo > 0)
												{
													TimeSpan tiempoJugado = TimeSpan.FromMinutes((long)drm.JugadoTiempo);

													string horasJugadas = tiempoJugado.TotalHours.ToString("N1");

													<label style="font-size: 14px;">@string.Format(Herramientas.Idiomas.BuscarTexto(idioma, "String28", "AccountGames"), horasJugadas)</label>
												}
											}
										}
									</div>
								</div>
							</div>
						</a>
					</div>
				</ItemContent>
			</Virtualize>
		</div>
	}
}

@code {

	#nullable disable

	[Parameter]
	public string idioma { get; set; }

	[Parameter]
	public string usuarioId { get; set; }

	[Parameter]
	public string fondoCabecera { get; set; }

	private UsuarioListadosJuegos juegos = null;
	private JuegoDRM drmSeleccionado = JuegoDRM.NoEspecificado;

	private List<JuegoUsuario> listaGestor = new List<JuegoUsuario>();

	private bool cargado = false;

	protected override void OnInitialized()
	{

	}

	protected override async Task OnParametersSetAsync()
	{
		await Task.Yield();

		if (string.IsNullOrEmpty(usuarioId) == false)
		{
			juegos = Herramientas.UsuarioJuegos.Cargar(usuarioId);

			if (juegos != null)
			{
				if (juegos.Steam != null && juegos.Steam.Count > 0)
				{
					List<string> idsSteam = juegos.Steam.Select(juego => juego.Id.ToString()).ToList();

					listaGestor = global::BaseDatos.Juegos.Buscar.MultiplesJuegosUsuario(listaGestor, JuegoDRM.Steam, idsSteam);

					foreach (var juegoSteam in juegos.Steam)
					{
						foreach (var juegoMostrar in listaGestor)
						{
							if (juegoMostrar.DRMs.Count > 0)
							{
								foreach (var drm in juegoMostrar.DRMs)
								{
									if (drm.DRM == JuegoDRM.Steam && juegoSteam.Id.ToString() == drm.Id)
									{
										drm.JugadoTiempo = juegoSteam.TiempoJugadoEnMinutos;
										drm.JugadoUltimaVez = juegoSteam.TiempoJugadoUltimaVez;
									}
								}
							}
						}
					}
				}

				if (juegos.Gog != null && juegos.Gog.Count > 0)
				{
					List<string> idsGog = juegos.Gog.Select(juego => juego.Id.ToString()).ToList();

					listaGestor = global::BaseDatos.Juegos.Buscar.MultiplesJuegosUsuario(listaGestor, JuegoDRM.GOG, idsGog);

					foreach (var juegoGog in juegos.Gog)
					{
						foreach (var juegoMostrar in listaGestor)
						{
							if (juegoMostrar.DRMs.Count > 0)
							{
								foreach (var drm in juegoMostrar.DRMs)
								{
									if (drm.DRM == JuegoDRM.GOG && juegoGog.Id.ToString() == drm.Id)
									{
										drm.JugadoTiempo = juegoGog.TiempoJugadoEnMinutos;
										drm.JugadoUltimaVez = juegoGog.TiempoJugadoUltimaVez;
									}
								}
							}
						}
					}
				}

				if (juegos.Amazon != null && juegos.Amazon.Count > 0)
				{
					listaGestor = global::BaseDatos.Juegos.Buscar.MultiplesJuegosUsuario(listaGestor, JuegoDRM.Amazon, juegos.Amazon);
				}

				if (juegos.Epic != null && juegos.Epic.Count > 0)
				{
					listaGestor = global::BaseDatos.Juegos.Buscar.MultiplesJuegosUsuario(listaGestor, JuegoDRM.Epic, juegos.Epic);
				}

				if (juegos.Ubisoft != null && juegos.Ubisoft.Count > 0)
				{
					listaGestor = global::BaseDatos.Juegos.Buscar.MultiplesJuegosUsuario(listaGestor, JuegoDRM.Ubisoft, juegos.Ubisoft);
				}

				if (juegos.Ea != null && juegos.Ea.Count > 0)
				{
					listaGestor = global::BaseDatos.Juegos.Buscar.MultiplesJuegosUsuario(listaGestor, JuegoDRM.EA, juegos.Ea);
				}

				if (listaGestor.Count > 0)
				{
					if (drmSeleccionado == JuegoDRM.NoEspecificado)
					{
						listaGestor = listaGestor.OrderByDescending(juego => juego.DRMs.Count > 0 ? juego.DRMs.Sum(x => Convert.ToInt32(x.JugadoTiempo)) : 0).ThenBy(juego => juego.Nombre).ToList();
					}
					else
					{
						listaGestor = listaGestor.OrderByDescending(juego => juego.DRMs.Count > 0 ? juego.DRMs.Find(p => p.DRM == drmSeleccionado).JugadoTiempo : 0).ThenBy(juego => juego.Nombre).ToList();
					}
				}

				cargado = true;
			}
		}
	}

	private string CambiarEstilo(JuegoDRM nuevoDrm)
	{
		if (nuevoDrm != drmSeleccionado)
		{
			return "background-color: transparent;";
		}
		else
		{
			return "background-color: var(--botonSubcabecera); box-shadow: 0px 2px 4px 0px rgba(0, 0, 0, 0.25),0px 0px 1px 0px rgba(0, 0, 0, 0.25);";
		}
	}

	private void ListadoAbrir(MouseEventArgs e, JuegoDRM nuevoDrm)
	{
		drmSeleccionado = nuevoDrm;

		if (drmSeleccionado == JuegoDRM.NoEspecificado)
		{
			listaGestor = listaGestor.OrderByDescending(juego => juego.DRMs.Count > 0 ? juego.DRMs.Sum(x => x.JugadoTiempo) : 0).ThenBy(juego => juego.Nombre).ToList();
		}
		else
		{
			listaGestor = listaGestor.OrderByDescending(juego => juego.DRMs.Count > 0 ? juego.DRMs.Find(p => p.DRM == drmSeleccionado)?.JugadoTiempo : 0).ThenBy(juego => juego.Nombre).ToList();
		}
	}

    private string textoBuscador = string.Empty;

	private void TextoCambiaBuscador()
	{
		
	}

	public class JuegoUsuario
	{
		public int Id { get; set; }
		public string Nombre { get; set; }
		public List<JuegoUsuarioDRM> DRMs { get; set; }
		public string Imagen { get; set; }
	}

	public class JuegoUsuarioDRM
	{
        public JuegoDRM DRM { get; set; }
        public string Id { get; set; }
        public int JugadoTiempo { get; set; }
        public int JugadoUltimaVez { get; set; }
	}
}
