@using Microsoft.AspNetCore.Identity
@using pepeizqs_deals_web.Data

@inject UserManager<Usuario> UserManager
@inject IHttpContextAccessor Contexto

<style>
	.caja-perfil-contenido {
		background-color: var(--fondoSubsubcabecera);
		border: 2px solid var(--fondoSubcabecera);
		padding: 30px;
		box-shadow: 0px 4px 8px 0px rgba(0, 0, 0, 0.28),0px 0px 2px 0px rgba(0, 0, 0, 0.24);
	}
</style>

@if (usuario != null)
{
	<div class="caja-perfil-contenido" style="display: flex; flex-direction: column;">
		<div style="display: flex; align-items: start; gap: 20px;">
			<div class="checkbox-caja">
				<input type="checkbox" class="checkbox-interior" checked="@estadoEnseñar" @onchange="ClickearPerfilEnseñar">
			</div>

			<div style="display: flex; flex-direction: column; gap: 10px;">
				<div>
					@Herramientas.Idiomas.BuscarTexto(idioma, "String1", "AccountUser")
				</div>
			</div>
		</div>

		<hr />

		<label style="margin-bottom: 10px;">@Herramientas.Idiomas.BuscarTexto(idioma, "String2", "AccountUser")</label>
		<input type="text" @bind-value="textoNombre" @bind-value:event="oninput" @bind-value:after="TextoCambiaNombre" class="entrada-texto" placeholder="@Herramientas.Idiomas.BuscarTexto(idioma, "String3", "AccountUser")" />

		@if (nombreYaUsado == true)
		{
			<div style="background-color: var(--fondoPeligro); padding: 6px 12px; margin-top: 20px;">
				@Herramientas.Idiomas.BuscarTexto(idioma, "String4", "AccountUser")
			</div>
		}
		else
		{
			if (string.IsNullOrEmpty(textoNombre) == false)
			{
				if (textoNombre.Length > 3)
				{
					<hr />

					<label style="margin-bottom: 10px;">@Herramientas.Idiomas.BuscarTexto(idioma, "String5", "AccountUser")</label>
					<a href="https://pepeizqdeals.com/user/@textoNombre" target="_blank">
						https://pepeizqdeals.com/user/@textoNombre
					</a>
				}
			}
		}
	</div>

	@if (estadoEnseñar == "checked" && textoNombre.Length > 3 && nombreYaUsado == false)
	{
		<div class="caja-perfil-contenido" style="display: flex; flex-direction: column; margin-top: 30px;">
			<label>@Herramientas.Idiomas.BuscarTexto(idioma, "String6", "AccountUser")</label>
			<hr />

			<div style="display: flex; flex-direction: column; gap: 20px;">
				@if (string.IsNullOrEmpty(BaseDatos.Usuarios.Buscar.PerfilSteamCuenta(usuario.Id)) == false)
				{
					<div style="display: flex; align-items: start; gap: 20px;">
						<div class="checkbox-caja">
							<input type="checkbox" class="checkbox-interior" checked="@estadoSteamCuenta" @onchange="ClickearPerfilSteamCuenta">
						</div>

						<div style="display: flex; flex-direction: column; gap: 10px;">
							<div>
								@Herramientas.Idiomas.BuscarTexto(idioma, "String8", "AccountUser") (@Herramientas.Idiomas.BuscarTexto(idioma, "String12", "AccountUser"))
							</div>
						</div>
					</div>
				}

				@if (string.IsNullOrEmpty(BaseDatos.Usuarios.Buscar.PerfilGogCuenta(usuario.Id)) == false)
				{
					<div style="display: flex; align-items: start; gap: 20px;">
						<div class="checkbox-caja">
							<input type="checkbox" class="checkbox-interior" checked="@estadoGogCuenta" @onchange="ClickearPerfilGogCuenta">
						</div>

						<div style="display: flex; flex-direction: column; gap: 10px;">
							<div>
								@Herramientas.Idiomas.BuscarTexto(idioma, "String9", "AccountUser") (@Herramientas.Idiomas.BuscarTexto(idioma, "String12", "AccountUser"))
							</div>
						</div>
					</div>
				}

				<div style="display: flex; align-items: start; gap: 20px;">
					<div class="checkbox-caja">
						<input type="checkbox" class="checkbox-interior" checked="@estadoUltimoJugado" @onchange="ClickearPerfilUltimoJugado">
					</div>

					<div style="display: flex; flex-direction: column; gap: 10px;">
						<div>
							@Herramientas.Idiomas.BuscarTexto(idioma, "String11", "AccountUser")
						</div>
					</div>
				</div>

				<div style="display: flex; align-items: start; gap: 20px;">
					<div class="checkbox-caja">
						<input type="checkbox" class="checkbox-interior" checked="@estadoJuegos" @onchange="ClickearPerfilJuegos">
					</div>

					<div style="display: flex; flex-direction: column; gap: 10px;">
						<div>
							@Herramientas.Idiomas.BuscarTexto(idioma, "String10", "AccountUser")
						</div>
					</div>
				</div>

				<div style="display: flex; align-items: start; gap: 20px;">
					<div class="checkbox-caja">
						<input type="checkbox" class="checkbox-interior" checked="@estadoDeseados" @onchange="ClickearPerfilDeseados">
					</div>

					<div style="display: flex; flex-direction: column; gap: 10px;">
						<div>
							@Herramientas.Idiomas.BuscarTexto(idioma, "String7", "AccountUser")
						</div>
					</div>
				</div>
			</div>
		</div>

		<div class="caja-perfil-contenido" style="display: flex; flex-direction: column; margin-top: 30px;">
			<label>@Herramientas.Idiomas.BuscarTexto(idioma, "String13", "AccountUser")</label>
			<hr />

			<div style="display: flex; flex-direction: column; gap: 20px;">
				<div style="display: flex; align-items: center; gap: 20px;">
					<img src="@textoAvatar" style="width: 80px; height: 80px;" />

					<div style="width: 100%;">
						<label style="margin-bottom: 10px;">@Herramientas.Idiomas.BuscarTexto(idioma, "String14", "AccountUser")</label>
						<input type="text" @bind-value="textoAvatar" @bind-value:event="oninput" @bind-value:after="TextoCambiaAvatar" class="entrada-texto" placeholder="@Herramientas.Idiomas.BuscarTexto(idioma, "String15", "AccountUser")" />
					</div>
				</div>


			</div>
		</div>
	}
}

@code {

	#nullable disable

	[Parameter]
	public string idioma { get; set; }

	private Usuario usuario = new Usuario();

	protected override async Task OnInitializedAsync()
	{
		usuario = await UserManager.GetUserAsync(Contexto.HttpContext.User);

		if (usuario != null)
		{
			if (usuario.ProfileShow == null)
			{
				estadoEnseñar = null;
			}
			else
			{
				if (usuario.ProfileShow == true)
				{
					estadoEnseñar = "checked";
				}
				else
				{
					estadoEnseñar = null;
				}
			}

			if (string.IsNullOrEmpty(usuario.ProfileNickname) == false)
			{
				textoNombre = usuario.ProfileNickname;
			}

			if (usuario.ProfileSteamAccount == null)
			{
				estadoSteamCuenta = null;
			}
			else
			{
				if (usuario.ProfileSteamAccount == true)
				{
					estadoSteamCuenta = "checked";
				}
				else
				{
					estadoSteamCuenta = null;
				}
			}

			if (usuario.ProfileGogAccount == null)
			{
				estadoGogCuenta = null;
			}
			else
			{
				if (usuario.ProfileGogAccount == true)
				{
					estadoGogCuenta = "checked";
				}
				else
				{
					estadoGogCuenta = null;
				}
			}

			if (usuario.ProfileLastPlayed == null)
			{
				estadoUltimoJugado = null;
			}
			else
			{
				if (usuario.ProfileLastPlayed == true)
				{
					estadoUltimoJugado = "checked";
				}
				else
				{
					estadoUltimoJugado = null;
				}
			}

			if (usuario.ProfileGames == null)
			{
				estadoJuegos = null;
			}
			else
			{
				if (usuario.ProfileGames == true)
				{
					estadoJuegos = "checked";
				}
				else
				{
					estadoJuegos = null;
				}
			}

			if (usuario.ProfileWishlist == null)
			{
				estadoDeseados = null;
			}
			else
			{
				if (usuario.ProfileWishlist == true)
				{
					estadoDeseados = "checked";
				}
				else
				{
					estadoDeseados = null;
				}
			}

			if (string.IsNullOrEmpty(usuario.ProfileAvatar) == false)
			{
				textoAvatar = usuario.ProfileAvatar;
			}
			else
			{
				textoAvatar = usuario.Avatar;

				usuario.ProfileAvatar = textoAvatar;

				try
				{
					await UserManager.UpdateAsync(usuario);
				}
				catch
				{
				}
			}
		}
	}

	private string estadoEnseñar = null;

	private async void ClickearPerfilEnseñar()
	{
		if (usuario != null)
		{
			bool boolEnseñar = false;

			if (estadoEnseñar == null)
			{
				estadoEnseñar = "checked";
				boolEnseñar = true;
			}
			else
			{
				estadoEnseñar = null;
				boolEnseñar = false;
			}

			usuario.ProfileShow = boolEnseñar;

			await UserManager.UpdateAsync(usuario);
		}
	}

	private string textoNombre = string.Empty;
	private bool nombreYaUsado = false;

	private async void TextoCambiaNombre()
	{
		if (string.IsNullOrEmpty(textoNombre) == false)
		{
			nombreYaUsado = BaseDatos.Usuarios.Buscar.PerfilYaUsado(textoNombre);

			if (nombreYaUsado == false)
			{
				if (textoNombre.Length > 3 && textoNombre.Length < 21)
				{
					usuario.ProfileNickname = textoNombre;

					try
					{
						await UserManager.UpdateAsync(usuario);
					}
					catch
					{

					}
				}
			}
		}
	}

	private string estadoSteamCuenta = null;

	private async void ClickearPerfilSteamCuenta()
	{
		if (usuario != null)
		{
			bool boolSteamCuenta = false;

			if (estadoSteamCuenta == null)
			{
				estadoSteamCuenta = "checked";
				boolSteamCuenta = true;
			}
			else
			{
				estadoSteamCuenta = null;
				boolSteamCuenta = false;
			}

			usuario.ProfileSteamAccount = boolSteamCuenta;

			await UserManager.UpdateAsync(usuario);
		}
	}

	private string estadoGogCuenta = null;

	private async void ClickearPerfilGogCuenta()
	{
		if (usuario != null)
		{
			bool boolGogCuenta = false;

			if (estadoGogCuenta == null)
			{
				estadoGogCuenta = "checked";
				boolGogCuenta = true;
			}
			else
			{
				estadoGogCuenta = null;
				boolGogCuenta = false;
			}

			usuario.ProfileGogAccount = boolGogCuenta;

			await UserManager.UpdateAsync(usuario);
		}
	}

	private string estadoUltimoJugado = null;

	private async void ClickearPerfilUltimoJugado()
	{
		if (usuario != null)
		{
			bool boolUltimoJugado = false;

			if (estadoUltimoJugado == null)
			{
				estadoUltimoJugado = "checked";
				boolUltimoJugado = true;
			}
			else
			{
				estadoUltimoJugado = null;
				boolUltimoJugado = false;
			}

			usuario.ProfileLastPlayed = boolUltimoJugado;

			await UserManager.UpdateAsync(usuario);
		}
	}

	private string estadoJuegos = null;

	private async void ClickearPerfilJuegos()
	{
		if (usuario != null)
		{
			bool boolJuegos = false;

			if (estadoJuegos == null)
			{
				estadoJuegos = "checked";
				boolJuegos = true;
			}
			else
			{
				estadoJuegos = null;
				boolJuegos = false;
			}

			usuario.ProfileGames = boolJuegos;

			await UserManager.UpdateAsync(usuario);
		}
	}

	private string estadoDeseados = null;

	private async void ClickearPerfilDeseados()
	{
		if (usuario != null)
		{
			bool boolDeseados = false;

			if (estadoDeseados == null)
			{
				estadoDeseados = "checked";
				boolDeseados = true;
			}
			else
			{
				estadoDeseados = null;
				boolDeseados = false;
			}

			usuario.ProfileWishlist = boolDeseados;

			await UserManager.UpdateAsync(usuario);
		}
	}

	private string textoAvatar = string.Empty;

	private async void TextoCambiaAvatar()
	{
		if (string.IsNullOrEmpty(textoAvatar) == false)
		{
			if (textoAvatar.Contains("https://") == true)
			{
				usuario.ProfileAvatar = textoAvatar;

				try
				{
					await UserManager.UpdateAsync(usuario);
				}
				catch
				{
				}
            }
		}
	}
}
