@page "/account/login"

@attribute [ExcludeFromInteractiveRouting]

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using pepeizqs_deals_blazor_web.Componentes.Account
@using pepeizqs_deals_blazor_web.Componentes.Account.Shared
@using pepeizqs_deals_web.Data

@inject IHttpContextAccessor contexto
@inject SignInManager<Usuario> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

@{
	#nullable disable

	string idioma = contexto?.HttpContext?.Request.Headers["Accept-Language"].ToString().Split(";").FirstOrDefault()?.Split(",").FirstOrDefault();
}

<PageTitle>@Herramientas.Idiomas.BuscarTexto(idioma, "Title", "Login")</PageTitle>

<div class="caja-diseño" style="max-width: 600px; padding: 40px; margin: auto;">
    @if (string.IsNullOrEmpty(errorMessage) == false)
    {
        <div style="margin-bottom: 20px; background-color: var(--fondoPeligro); padding: 15px 20px;">
            @errorMessage
        </div>
    }

    <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
        <DataAnnotationsValidator />
        <div class="texto-info">@Herramientas.Idiomas.BuscarTexto(idioma, "String1", "Login")</div>
        <hr />
        <ValidationSummary class="texto-peligro-entrada" role="alert" />

        <div style="margin-bottom: 20px;">
            <label for="Input.Email" class="texto-info-entrada">@Herramientas.Idiomas.BuscarTexto(idioma, "String2", "Login")</label>
            <InputText @bind-Value="Input.Email" id="Input.Email" class="entrada-texto" autocomplete="username" aria-required="true" placeholder="@Herramientas.Idiomas.BuscarTexto(idioma, "String4", "Login")" />

            <ValidationMessage For="() => Input.Email" class="texto-peligro-entrada" />
        </div>

        <div style="margin-bottom: 20px;">
            <label for="Input.Password" class="texto-info-entrada">@Herramientas.Idiomas.BuscarTexto(idioma, "String3", "Login")</label>
            <InputText type="password" @bind-Value="Input.Password" id="Input.Password" class="entrada-texto" autocomplete="current-password" aria-required="true" placeholder="@Herramientas.Idiomas.BuscarTexto(idioma, "String5", "Login")" />

            <ValidationMessage For="() => Input.Password" class="texto-peligro-entrada" />
        </div>

        <div style="margin: 30px 0px 20px 0px;">
            <div style="display: flex; align-items: center;">
                <div class="checkbox-caja">
                    <InputCheckbox @bind-Value="Input.RememberMe" class="checkbox-interior" />
                </div>

                <div style="margin-left: 15px; margin-bottom: 8px; cursor: pointer;">
                    @Herramientas.Idiomas.BuscarTexto(idioma, "String6", "Login")
                </div>
            </div>
        </div>

        <div>
            <button id="login-submit" type="submit" class="boton-pequeño" style="text-align: center; font-size: 20px; padding: 15px 20px;">
                @Herramientas.Idiomas.BuscarTexto(idioma, "String7", "Login")
            </button>
        </div>
    </EditForm>
</div>

<Accesos idioma="@idioma" mostrarLogin="false" />

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (contexto.HttpContext != null)
        {
            if (HttpMethods.IsGet(contexto.HttpContext.Request.Method))
            {
                await contexto.HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
            }
        } 
    }

    public async Task LoginUser()
    {
        SignInResult? resultado = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        
        if (resultado.Succeeded)
        {
            RedirectManager.RedirectTo("/");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
