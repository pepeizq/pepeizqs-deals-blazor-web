@using BaseDatos.Recompensas
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Identity
@using System.Text.Json
@using pepeizqs_deals_web.Data

@inject UserManager<Usuario> UserManager
@inject IHttpContextAccessor HttpContextAccessor

<style>
	.caja-cuenta-contenido {
		background-color: var(--fondoSubsubcabecera);
		border: 2px solid var(--fondoSubcabecera);
		padding: 30px;
		box-shadow: 0px 4px 8px 0px rgba(0, 0, 0, 0.28),0px 0px 2px 0px rgba(0, 0, 0, 0.24);
	}
</style>

<style>
	.boton-pestañas {
		color: var(--colorTexto);
		background: transparent;
		text-align: center;
		border: 0;
		width: 100%;
		transition: transform .2s;
		font-size: 17px;
		padding: 10px;
	}

	.boton-pestañas:hover {
		color: var(--colorTextoHover);
		transform: scale(1.01);
	}

	.recompensa-expandir {
		transition: transform .2s;
	}

	.recompensa-expandir:hover {
		transform: scale(1.01);
	}
</style>

<div style="width: 100%; display: flex; flex-direction: column; gap: 30px;">
	@if (usuario?.PatreonCoins >= 120)
	{
		<div style="background-color: var(--fondoPeligro); border: 1px solid var(--fondoBotonPequeño); padding: 20px 30px; display: flex; align-items: center; gap: 20px;">
			<div style="max-width: 30px;">
				<svg class="svg-boton" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">
					<path d="M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zm0-384c13.3 0 24 10.7 24 24l0 112c0 13.3-10.7 24-24 24s-24-10.7-24-24l0-112c0-13.3 10.7-24 24-24zM224 352a32 32 0 1 1 64 0 32 32 0 1 1 -64 0z" />
				</svg>
			</div>

			@Herramientas.Idiomas.BuscarTexto(idioma, "Limit", "PatreonStore")
		</div>
	}

	<div class="caja-cuenta-contenido" style="display: flex; align-items: center; gap: 30px;">
		<div style="max-width: 30px;">
			<svg class="svg-boton" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 640 640">
				<path d="M320 576C461.4 576 576 461.4 576 320C576 178.6 461.4 64 320 64C178.6 64 64 178.6 64 320C64 461.4 178.6 576 320 576zM288 224C288 206.3 302.3 192 320 192C337.7 192 352 206.3 352 224C352 241.7 337.7 256 320 256C302.3 256 288 241.7 288 224zM280 288L328 288C341.3 288 352 298.7 352 312L352 400L360 400C373.3 400 384 410.7 384 424C384 437.3 373.3 448 360 448L280 448C266.7 448 256 437.3 256 424C256 410.7 266.7 400 280 400L304 400L304 336L280 336C266.7 336 256 325.3 256 312C256 298.7 266.7 288 280 288z" />
			</svg>
		</div>
		
		<div>
			@Herramientas.Idiomas.BuscarTexto(idioma, "Problem", "PatreonStore")
		</div>
	</div>
</div>

<div class="subcabecera" style="background-color: var(--fondoSubsubcabecera); margin-top: 40px; margin-bottom: 40px;">
	<div class="cuerpo-ancho sub-subcabecera" style="padding: 20px 0px;">
		<h1 style="font-size: 18px; margin: 0px;">
			@Herramientas.Idiomas.BuscarTexto(idioma, "String2", "PatreonStore") (@juegos?.Count)
		</h1>

		<div style="margin-left: auto; display: flex; justify-content: right;">
			@{
				int? monedas = 0;

				if (usuario != null)
				{
					monedas = usuario.PatreonCoins;
				}

				if (monedas == null)
				{
					monedas = 0;
				}

				<label style="font-size: 14px;">
					@string.Format(Herramientas.Idiomas.BuscarTexto(idioma, "String1", "PatreonStore"), monedas.ToString())
				</label>
			}
		</div>
	</div>
</div>

<div class="caja-cuenta-contenido" style="display: grid; grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); gap: 30px; justify-items: center;">
	@if (juegos != null)
	{
		if (juegos.Count > 0)
		{
			foreach (var recompensaJuego in juegos)
			{
				if (string.IsNullOrEmpty(recompensaJuego.UsuarioId) == true)
				{
					global::Juegos.Juego juego = BaseDatos.Juegos.Buscar.UnJuego(recompensaJuego.JuegoId);

					if (juego != null)
					{
						bool usuarioTieneJuego = Herramientas.UsuarioJuegos.ComprobarSiTiene(juegosUsuario, juego, recompensaJuego.DRM);
						bool usuarioTieneDeseado = false;

						string fondoColor = "background-color: var(--fondoBotonPequeño)";

						if (usuarioTieneJuego == true)
						{
							fondoColor = "background-color: var(--fondoBien);";
						}
						else
						{
							usuarioTieneDeseado = Herramientas.Deseados.ComprobarSiEsta(usuario?.SteamWishlist, usuario?.Wishlist, usuario?.GogWishlist, juego, recompensaJuego.DRM);

							if (usuarioTieneDeseado == true)
							{
								fondoColor = "background-color: var(--fondoAlerta);";
							}
						}

						bool aptoPoderComprar = false;

						if (usuario != null)
						{
							if (usuario?.PatreonCoins != null)
							{
								if (usuario.PatreonCoins >= recompensaJuego.Coins)
								{
									aptoPoderComprar = true;
								}
							}
						}

						if (usuarioTieneJuego == true)
						{
							aptoPoderComprar = false;
						}

						if (aptoPoderComprar == true)
						{
							<button @onclick="@(e => ComprarJuego(e, recompensaJuego, juego.Nombre))" class="recompensa-expandir" style="text-align: left; border: 0; width: 100%; font-size: 15px; padding: 0px;" title="@juego.Nombre">
								<div style="@fondoColor; display: flex; flex-direction: column;">
									<img src="@juego.Imagenes.Library_600x900" style="width: 100%; height: 100%;" />

									<div style="display: flex; align-items: center; padding: 10px; color: var(--colorTexto);">
										@{
											string imagen = global::Juegos.JuegoDRM2.SacarImagen(recompensaJuego.DRM);
										}

										<img src="@imagen" style="width: 20px; height: 20px;" alt="@juego.Nombre" />

										<div style="width: 100%; text-align: right;">@recompensaJuego.Coins.ToString() Coins</div>
									</div>
								</div>
							</button>
						}
						else
						{
							<div style="@fondoColor; display: flex; flex-direction: column;">
								<img src="@juego.Imagenes.Library_600x900" style="width: 100%; height: 100%;" />

								<div style="display: flex; align-items: center; padding: 10px; color: var(--colorTexto);">
									@{
										string imagen = global::Juegos.JuegoDRM2.SacarImagen(recompensaJuego.DRM);
									}

									<img src="@imagen" style="width: 20px; height: 20px;" alt="@juego.Nombre" />

									<div style="width: 100%; text-align: right;">@recompensaJuego.Coins.ToString() Coins</div>
								</div>
							</div>
						}
					}
				}
			}
		}
	}
</div>

@if (mostrarAvisoCompra == true)
{
	<div class="opciones-panel" style="display: flex; justify-content: center; align-items: center;">
		<div class="caja-cuenta-contenido" style="max-width: 600px; text-align: center; margin: 80px auto; position: relative;">
			@string.Format(Herramientas.Idiomas.BuscarTexto(idioma, "Buy", "PatreonStore"), nombreJuegoSeleccionado)

			<div style="display: flex; align-items: center; gap: 30px; margin-top: 20px;">
				<button @onclick="@(e => ComprarJuegoSi(e, juegoSeleccionado))" class="boton-pequeño" style="text-align: center; border: 0; width: 100%; font-size: 15px; padding: 6px 12px;">
					@Herramientas.Idiomas.BuscarTexto(idioma, "Yes", "PatreonStore")
				</button>

				<button @onclick="@(e => ComprarJuegoNo(e))" class="boton-pequeño" style="text-align: center; border: 0; width: 100%; font-size: 15px; padding: 6px 12px;">
					@Herramientas.Idiomas.BuscarTexto(idioma, "No", "PatreonStore")
				</button>
			</div>
		</div>
	</div>
}

@if (mostrarAvisoClave == true)
{
	<div class="opciones-panel" style="display: flex; justify-content: center; align-items: center;">
		<div class="caja-cuenta-contenido" style="max-width: 600px; text-align: center; margin: 80px auto; position: relative;">
			@nombreJuegoSeleccionado
			<div style="margin-top: 10px;">@claveJuegoSeleccionado</div>
			<div style="margin-top: 10px;"><a href="https://store.steampowered.com/account/registerkey?key=@claveJuegoSeleccionado" target="_blank">@Herramientas.Idiomas.BuscarTexto(idioma, "Redeem", "PatreonStore")</a></div>

			<div style="display: flex; align-items: center; gap: 30px; margin-top: 30px;">
				<button @onclick="@(e => CerrarAvisoClave(e))" class="boton-pequeño" style="text-align: center; border: 0; width: fit-content; font-size: 15px; padding: 6px 12px;">
					@Herramientas.Idiomas.BuscarTexto(idioma, "Close", "PatreonStore")
				</button>
			</div>
		</div>
	</div>
}

@if (mostrarAvisoPobre == true)
{
	<div class="opciones-panel" style="display: flex; justify-content: center; align-items: center;">
		<div class="caja-cuenta-contenido" style="max-width: 600px; text-align: center; margin: 80px auto; position: relative;">
			@string.Format(Herramientas.Idiomas.BuscarTexto(idioma, "Poor", "PatreonStore"), nombreJuegoSeleccionado)

			<div style="display: flex; align-items: center; gap: 30px; margin-top: 30px;">
				<button @onclick="@(e => CerrarAvisoPobre(e))" class="boton-pequeño" style="text-align: center; border: 0; width: fit-content; font-size: 15px; padding: 6px 12px;">
					@Herramientas.Idiomas.BuscarTexto(idioma, "Close", "PatreonStore")
				</button>
			</div>
		</div>
	</div>
}

@code {

	#nullable disable

	[Parameter]
	public string idioma { get; set; }

	[Parameter]
	public string usuarioId { get; set; }

	private Usuario usuario = new Usuario();
	private Herramientas.UsuarioListadosJuegos juegosUsuario = new Herramientas.UsuarioListadosJuegos();

	private List<RecompensaJuego> juegos = new List<RecompensaJuego>();

	private bool mostrarAvisoCompra = false;
	private bool mostrarAvisoClave = false;
	private bool mostrarAvisoPobre = false;

	private RecompensaJuego juegoSeleccionado = new RecompensaJuego();
	private string nombreJuegoSeleccionado = null;
	private string claveJuegoSeleccionado = null;

	protected override async Task OnInitializedAsync()
	{
		juegos = BaseDatos.Recompensas.Juegos.Disponibles();

		usuario = await UserManager.FindByIdAsync(usuarioId);

		if (usuario != null)
		{
			juegosUsuario = Herramientas.UsuarioJuegos.Cargar(usuario);
		}
	}

	private void ComprarJuego(MouseEventArgs e, RecompensaJuego juego, string nombre)
	{
		nombreJuegoSeleccionado = nombre;

		if (juego.Coins <= usuario.PatreonCoins)
		{
			mostrarAvisoCompra = true;
			juegoSeleccionado = juego;			
		}
		else
		{
			mostrarAvisoPobre = true;
		}
	}

	private void ComprarJuegoSi(MouseEventArgs e, RecompensaJuego juego)
	{
		mostrarAvisoCompra = false;

		BaseDatos.Recompensas.Juegos.Actualizar(juegoSeleccionado.Id, usuario.Id);
		BaseDatos.Recompensas.Historial.Insertar(usuario.Id, -juegoSeleccionado.Coins, "Buy " + juegoSeleccionado.JuegoNombre, DateTime.Now);

		usuario.PatreonCoins = usuario.PatreonCoins - juegoSeleccionado.Coins;

		List<BaseDatos.Usuarios.Clave> claves = new List<BaseDatos.Usuarios.Clave>();

		if (string.IsNullOrEmpty(usuario.Keys) == false)
		{
			claves = JsonSerializer.Deserialize<List<BaseDatos.Usuarios.Clave>>(usuario.Keys);
		}

		BaseDatos.Usuarios.Clave nuevaClave = new BaseDatos.Usuarios.Clave();
		nuevaClave.Nombre = juegoSeleccionado.JuegoNombre;
		nuevaClave.Codigo = juegoSeleccionado.Clave;
		nuevaClave.JuegoId = juegoSeleccionado.JuegoId.ToString();

		if (claves == null)
		{
			claves = new List<BaseDatos.Usuarios.Clave>();
		}

		claves.Add(nuevaClave);

		usuario.Keys = JsonSerializer.Serialize(claves);

		claveJuegoSeleccionado = juegoSeleccionado.Clave;

		try
		{
			UserManager.UpdateAsync(usuario);
		}
		catch { }

		juegos.Clear();
		juegos = BaseDatos.Recompensas.Juegos.Disponibles();

		mostrarAvisoClave = true;
	}

	private void ComprarJuegoNo(MouseEventArgs e)
	{
		mostrarAvisoCompra = false;
	}

	private void CerrarAvisoClave(MouseEventArgs e)
	{
		mostrarAvisoClave = false;
	}

	private void CerrarAvisoPobre(MouseEventArgs e)
	{
		mostrarAvisoPobre = false;
	}
}
