@using BaseDatos.Recompensas
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Identity
@using System.Text.Json
@using pepeizqs_deals_web.Data

@inject UserManager<Usuario> UserManager

<style>
	.caja-cuenta-contenido {
		background-color: var(--fondoSubsubcabecera);
		border: 2px solid var(--fondoSubcabecera);
		padding: 30px;
		box-shadow: 0px 4px 8px 0px rgba(0, 0, 0, 0.28),0px 0px 2px 0px rgba(0, 0, 0, 0.24);
	}
</style>

<style>
	.boton-pestañas {
		color: var(--colorTexto);
		background: transparent;
		text-align: center;
		border: 0;
		width: 100%;
		transition: transform .2s;
		font-size: 17px;
		padding: 10px;
	}

	.boton-pestañas:hover {
		color: var(--colorTextoHover);
		transform: scale(1.01);
	}

	.recompensa-expandir {
		transition: transform .2s;
	}

	.recompensa-expandir:hover {
		transform: scale(1.01);
	}
</style>

<div style="width: 100%; display: flex; flex-direction: column; gap: 30px;">
	@if (usuario?.PatreonCoins >= 120)
	{
		<div style="background-color: var(--fondoPeligro); padding: 20px 30px; display: flex; align-items: center; gap: 20px;">
			<div style="max-width: 30px;">
				<svg class="svg-boton" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">
					<path d="M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zm0-384c13.3 0 24 10.7 24 24l0 112c0 13.3-10.7 24-24 24s-24-10.7-24-24l0-112c0-13.3 10.7-24 24-24zM224 352a32 32 0 1 1 64 0 32 32 0 1 1 -64 0z" />
				</svg>
			</div>

			@Herramientas.Idiomas.BuscarTexto(idioma, "Limit", "PatreonStore")
		</div>
	}

	<div class="caja-cuenta-contenido" style="display: flex; align-items: center; gap: 30px;">
		<div style="max-width: 30px;">
			<svg class="svg-boton" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 640 640">
				<path d="M320 576C461.4 576 576 461.4 576 320C576 178.6 461.4 64 320 64C178.6 64 64 178.6 64 320C64 461.4 178.6 576 320 576zM288 224C288 206.3 302.3 192 320 192C337.7 192 352 206.3 352 224C352 241.7 337.7 256 320 256C302.3 256 288 241.7 288 224zM280 288L328 288C341.3 288 352 298.7 352 312L352 400L360 400C373.3 400 384 410.7 384 424C384 437.3 373.3 448 360 448L280 448C266.7 448 256 437.3 256 424C256 410.7 266.7 400 280 400L304 400L304 336L280 336C266.7 336 256 325.3 256 312C256 298.7 266.7 288 280 288z" />
			</svg>
		</div>
		
		<div>
			@Herramientas.Idiomas.BuscarTexto(idioma, "Problem", "PatreonStore")
		</div>
	</div>
</div>

<div class="subcabecera" style="background-color: var(--fondoSubsubcabecera); margin-top: 40px; margin-bottom: 40px;">
	<div class="cuerpo-ancho sub-subcabecera" style="padding: 20px 0px;">
		<h1 style="font-size: 18px; margin: 0px;">
			@Herramientas.Idiomas.BuscarTexto(idioma, "String2", "PatreonStore") (@juegos?.Count)
		</h1>

		<div style="margin-left: auto; display: flex; justify-content: right; align-items: center; gap: 20px;">
			@{
				int? monedas = 0;

				if (usuario != null)
				{
					monedas = usuario.PatreonCoins;
				}

				if (monedas == null)
				{
					monedas = 0;
				}

				<label style="font-size: 14px;">
					@string.Format(Herramientas.Idiomas.BuscarTexto(idioma, "String1", "PatreonStore"), monedas.ToString())
				</label>
			}

			<button class="boton-pequeño" @onclick="EnseñarOpciones" style="width: fit-content; padding: 10px 15px; border: 0px; background-color: transparent;">
				<div style="width: 22px;">
					<svg class="svg-icono" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">
						<path d="M495.9 166.6c3.2 8.7 .5 18.4-6.4 24.6l-43.3 39.4c1.1 8.3 1.7 16.8 1.7 25.4s-.6 17.1-1.7 25.4l43.3 39.4c6.9 6.2 9.6 15.9 6.4 24.6c-4.4 11.9-9.7 23.3-15.8 34.3l-4.7 8.1c-6.6 11-14 21.4-22.1 31.2c-5.9 7.2-15.7 9.6-24.5 6.8l-55.7-17.7c-13.4 10.3-28.2 18.9-44 25.4l-12.5 57.1c-2 9.1-9 16.3-18.2 17.8c-13.8 2.3-28 3.5-42.5 3.5s-28.7-1.2-42.5-3.5c-9.2-1.5-16.2-8.7-18.2-17.8l-12.5-57.1c-15.8-6.5-30.6-15.1-44-25.4L83.1 425.9c-8.8 2.8-18.6 .3-24.5-6.8c-8.1-9.8-15.5-20.2-22.1-31.2l-4.7-8.1c-6.1-11-11.4-22.4-15.8-34.3c-3.2-8.7-.5-18.4 6.4-24.6l43.3-39.4C64.6 273.1 64 264.6 64 256s.6-17.1 1.7-25.4L22.4 191.2c-6.9-6.2-9.6-15.9-6.4-24.6c4.4-11.9 9.7-23.3 15.8-34.3l4.7-8.1c6.6-11 14-21.4 22.1-31.2c5.9-7.2 15.7-9.6 24.5-6.8l55.7 17.7c13.4-10.3 28.2-18.9 44-25.4l12.5-57.1c2-9.1 9-16.3 18.2-17.8C227.3 1.2 241.5 0 256 0s28.7 1.2 42.5 3.5c9.2 1.5 16.2 8.7 18.2 17.8l12.5 57.1c15.8 6.5 30.6 15.1 44 25.4l55.7-17.7c8.8-2.8 18.6-.3 24.5 6.8c8.1 9.8 15.5 20.2 22.1 31.2l4.7 8.1c6.1 11 11.4 22.4 15.8 34.3zM256 336a80 80 0 1 0 0-160 80 80 0 1 0 0 160z" />
					</svg>
				</div>
			</button>
		</div>
	</div>
</div>

<div class="caja-cuenta-contenido" style="display: grid; grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); gap: 30px; justify-items: center;">
	@if (juegos != null)
	{
		if (juegos.Count > 0)
		{
			foreach (var recompensaJuego in juegos)
			{
				if (string.IsNullOrEmpty(recompensaJuego.UsuarioId) == true)
				{
					global::Juegos.Juego juego = BaseDatos.Juegos.Buscar.UnJuego(recompensaJuego.JuegoId);

					if (juego != null)
					{
						bool usuarioTieneJuego = Herramientas.UsuarioJuegos.ComprobarSiTiene(juegosUsuario, juego, recompensaJuego.DRM);
						bool usuarioTieneDeseado = false;

						string fondoColor = "background-color: var(--fondoBotonPequeño)";

						if (usuarioTieneJuego == true)
						{
							fondoColor = "background-color: var(--fondoBien);";
						}
						else
						{
							usuarioTieneDeseado = Herramientas.Deseados.ComprobarSiEsta(usuario?.SteamWishlist, usuario?.Wishlist, usuario?.GogWishlist, juego, recompensaJuego.DRM);

							if (usuarioTieneDeseado == true)
							{
								fondoColor = "background-color: var(--fondoAlerta);";
							}
						}

						bool enseñar = true;

						if (ocultarJuegos == "checked" && usuarioTieneJuego == true)
						{
							enseñar = false;
						}

						if (enseñar == true)
						{
							<button @onclick="@(e => MostrarJuego(e, recompensaJuego, juego))" class="recompensa-expandir" style="text-align: left; border: 0; width: 100%; font-size: 15px; padding: 0px;" title="@juego.Nombre">
								<div style="@fondoColor; display: flex; flex-direction: column;">
									<img src="@juego.Imagenes.Library_600x900" style="width: 100%; height: 100%;" />

									<div style="display: flex; align-items: center; padding: 10px; color: var(--colorTexto);">
										@{
											string imagen = global::Juegos.JuegoDRM2.SacarImagen(recompensaJuego.DRM);
										}

										<img src="@imagen" style="width: 20px; height: 20px;" alt="@juego.Nombre" />

										<div style="width: 100%; text-align: right;">@recompensaJuego.Coins.ToString() Coins</div>
									</div>
								</div>
							</button>
						}
					}
				}
			}
		}
	}
</div>

@if (mostrarJuego == true)
{
	<div class="opciones-panel">
		<div style="max-width: 800px; background-color: var(--fondoSubcabecera); border: 2px solid var(--fondoSubcabecera); margin: 20px auto; overflow-y: scroll; scrollbar-color: var(--fondoCodigo) var(--fondoOscuro); box-shadow: 0px 4px 8px 0px rgba(0, 0, 0, 0.28),0px 0px 2px 0px rgba(0, 0, 0, 0.24);">
			<div style="display: flex; align-items: center; gap: 30px; padding: 20px; background-color: var(--fondoSubsubcabecera);">
				<button class="boton-pequeño" @onclick="OcultarJuego" style="width: fit-content; padding: 10px 15px;">
					<div style="max-width: 24px; max-height: 24px;">
						<svg class="svg-icono" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">
							<path d="M9.4 233.4c-12.5 12.5-12.5 32.8 0 45.3l160 160c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3L109.2 288 416 288c17.7 0 32-14.3 32-32s-14.3-32-32-32l-306.7 0L214.6 118.6c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0l-160 160z" />
						</svg>
					</div>
				</button>

				<div style="font-size: 20px;">
					<a href="/game/@juegoMostrar.Id/@Herramientas.EnlaceAdaptador.Nombre(juegoMostrar.Nombre)/" target="_blank" style="text-decoration: none;">
						@juegoMostrar.Nombre
					</a>
				</div>
			</div>

			<div style="display: flex; flex-direction: column; gap: 30px; padding: 20px;">
				<div style="display: flex; flex-direction: column; gap: 30px; background-color: var(--fondoSubsubcabecera); border: 2px solid var(--fondoSubcabecera); box-shadow: 0px 4px 8px 0px rgba(0, 0, 0, 0.28),0px 0px 2px 0px rgba(0, 0, 0, 0.24); padding: 20px;">
					<div style="display: flex; align-items: center; gap: 20px;">
						<a href="/game/@juegoMostrar.Id/@Herramientas.EnlaceAdaptador.Nombre(juegoMostrar.Nombre)/" target="_blank">
							<img src="@juegoMostrar.Imagenes.Library_600x900" style="width: 200px;" />
						</a>

						<div>
							@{
								bool puedeComprar = true;

								if (usuario?.PatreonCoins == null)
								{
									puedeComprar = false;
								}
								else
								{
									if (usuario?.PatreonCoins < recompensaMostrar.Coins)
									{
										puedeComprar = false;
									}
								}

								// if (usuarioAdmin == true)
								// {
								// 	puedeComprar = true;
								// }
							}
		
							@if (puedeComprar == false)
							{
								<div style="background-color: var(--fondoPeligro); padding: 20px; display: flex; align-items: center; gap: 20px;">
									<div style="max-width: 30px;">
										<svg class="svg-boton" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">
											<path d="M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zm0-384c13.3 0 24 10.7 24 24l0 112c0 13.3-10.7 24-24 24s-24-10.7-24-24l0-112c0-13.3 10.7-24 24-24zM224 352a32 32 0 1 1 64 0 32 32 0 1 1 -64 0z" />
										</svg>
									</div>

									<div style="display: flex; flex-direction: column; gap: 20px;">
										@if (usuarioPatreon == false)
										{
											<div>
												@Herramientas.Idiomas.BuscarTexto(idioma, "String6", "PatreonStore")
											</div>

											<a href="/patreon" target="_blank">
												@Herramientas.Idiomas.BuscarTexto(idioma, "String7", "PatreonStore")
											</a>
										}
										else
										{
											int monedas2 = 0;

											if (usuario?.PatreonCoins != null)
											{
												monedas2 = (int)usuario.PatreonCoins;
											}

											<div>
												@string.Format(Herramientas.Idiomas.BuscarTexto(idioma, "String12", "PatreonStore"), ((recompensaMostrar.Coins - monedas2) / 2).ToString())
											</div>
										}
									</div>
								</div>
							}
							else
							{
								if (string.IsNullOrEmpty(claveJuegoSeleccionado) == true)
								{
									<div style="display: flex; flex-direction: column; gap: 30px;">
										<div style="padding: 0px 20px; display: flex; align-items: center; gap: 20px;">
											<div>
												@string.Format(Herramientas.Idiomas.BuscarTexto(idioma, "String9", "PatreonStore"), recompensaMostrar.Coins.ToString())
											</div>
										</div>

										@if (recompensaMostrar.FechaCaduca != null)
										{
											<div style="background-color: var(--fondoAlerta); padding: 10px 20px; display: flex; align-items: center; gap: 20px;">
												<div>
													@string.Format(Herramientas.Idiomas.BuscarTexto(idioma, "String11", "PatreonStore"), recompensaMostrar.FechaCaduca.Value.Day.ToString() + "/" + recompensaMostrar.FechaCaduca.Value.Month.ToString() + "/" + recompensaMostrar.FechaCaduca.Value.Year.ToString())
												</div>
											</div>
										}

										<button @onclick="@(e => ComprarJuego(e, recompensaMostrar))" class="boton-pequeño" style="text-align: center; border: 0; width: fit-content; padding: 15px 25px; font-size: 18px; margin-left: auto; margin-right: auto;">
											@Herramientas.Idiomas.BuscarTexto(idioma, "String8", "PatreonStore")
										</button>
									</div>
								}
								else
								{
									<div style="display: flex; flex-direction: column; gap: 10px;">
										<div style="min-width: 250px; text-align: center;">
											@claveJuegoSeleccionado
										</div>

										@if (recompensaMostrar.DRM == global::Juegos.JuegoDRM.Steam)
										{
											<div style="margin-left: auto; margin-right: auto;">
												<a href="https://store.steampowered.com/account/registerkey?key=@claveJuegoSeleccionado" target="_blank" style="text-decoration: none;">
													@Herramientas.Idiomas.BuscarTexto(idioma, "Redeem", "PatreonStore")
												</a>
											</div>
										}

										<div style="margin-left: auto; margin-right: auto;">
											<a href="/account/keys/" target="_blank" style="text-decoration: none;">
												@Herramientas.Idiomas.BuscarTexto(idioma, "String10", "PatreonStore")
											</a>
										</div>
									</div>
								}
							}
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
}

@if (mostrarOpciones == true)
{
	<div class="opciones-panel">
		<div style="max-width: 800px; background-color: var(--fondoSubcabecera); border: 2px solid var(--fondoSubcabecera); margin: 20px auto; overflow-y: scroll; scrollbar-color: var(--fondoCodigo) var(--fondoOscuro); box-shadow: 0px 4px 8px 0px rgba(0, 0, 0, 0.28),0px 0px 2px 0px rgba(0, 0, 0, 0.24);">
			<div style="display: flex; align-items: center; gap: 30px; padding: 20px; background-color: var(--fondoSubsubcabecera);">
				<button class="boton-pequeño" @onclick="OcultarOpciones" style="width: fit-content; padding: 10px 15px;">
					<div style="max-width: 24px; max-height: 24px;">
						<svg class="svg-icono" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">
							<path d="M9.4 233.4c-12.5 12.5-12.5 32.8 0 45.3l160 160c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3L109.2 288 416 288c17.7 0 32-14.3 32-32s-14.3-32-32-32l-306.7 0L214.6 118.6c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0l-160 160z" />
						</svg>
					</div>
				</button>

				<div style="font-size: 20px;">
					@Herramientas.Idiomas.BuscarTexto(idioma, "String4", "PatreonStore")
				</div>
			</div>

			<div style="display: flex; flex-direction: column; gap: 30px; padding: 20px;">
				<div style="display: flex; flex-direction: column; gap: 30px; background-color: var(--fondoSubsubcabecera); border: 2px solid var(--fondoSubcabecera); box-shadow: 0px 4px 8px 0px rgba(0, 0, 0, 0.28),0px 0px 2px 0px rgba(0, 0, 0, 0.24); padding: 20px;">
					<div style="display: flex; align-items: center; gap: 20px;">
						<div class="checkbox-caja">
							<input type="checkbox" class="checkbox-interior" checked="@ocultarJuegos" @onchange="OcultarJuegos">
						</div>

						<div style="padding-bottom: 5px;">
							@Herramientas.Idiomas.BuscarTexto(idioma, "String5", "PatreonStore")
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
}

@code {

	#nullable disable

	[Parameter]
	public string idioma { get; set; }

	[Parameter]
	public string usuarioId { get; set; }

	[Parameter]
	public bool usuarioAdmin { get; set; }

	private Usuario usuario = null;
	private Herramientas.UsuarioListadosJuegos juegosUsuario = null;
	private bool usuarioPatreon = false;

	private List<RecompensaJuego> juegos = null;

	private string claveJuegoSeleccionado = null;

	protected override async Task OnInitializedAsync()
	{
		juegos = BaseDatos.Recompensas.Juegos.Disponibles();

		usuario = await UserManager.FindByIdAsync(usuarioId);

		if (usuario != null)
		{
			juegosUsuario = Herramientas.UsuarioJuegos.Cargar(usuario);
			usuarioPatreon = Herramientas.Patreon.VerificarActivo(BaseDatos.Usuarios.Buscar.FechaPatreon(usuarioId));

			if (usuario.PatreonOption1 == true)
			{
				ocultarJuegos = "checked";
			}
			else
			{
				ocultarJuegos = null;
			}
		}
	}

	#region Opciones

	private bool mostrarOpciones = false;

	private void EnseñarOpciones()
	{
		mostrarOpciones = true;
	}

	private void OcultarOpciones()
	{
		mostrarOpciones = false;
	}

	private string ocultarJuegos = null;

	private async void OcultarJuegos()
	{
		bool valor = false;

		if (ocultarJuegos == "checked")
		{
			ocultarJuegos = null;
		}
		else
		{
			ocultarJuegos = "checked";
		}

		if (ocultarJuegos == "checked")
		{
			valor = true;
		}
		else if (ocultarJuegos == null)
		{
			valor = false;
		}

		if (string.IsNullOrEmpty(usuarioId) == false)
		{
			BaseDatos.Usuarios.Actualizar.Opcion("PatreonOption1", valor, usuarioId);
		}

		await InvokeAsync(StateHasChanged);
	}

	#endregion

	private bool mostrarJuego = false;
	private RecompensaJuego recompensaMostrar = null;
	private global::Juegos.Juego juegoMostrar = null;

	private void MostrarJuego(MouseEventArgs e, RecompensaJuego juego, global::Juegos.Juego juego2)
	{
		claveJuegoSeleccionado = null;

		mostrarJuego = true;
		recompensaMostrar = juego;
		juegoMostrar = juego2;
	}

	private void OcultarJuego()
	{
		mostrarJuego = false;
	}

	private async void ComprarJuego(MouseEventArgs e, RecompensaJuego juego)
	{
		BaseDatos.Recompensas.Juegos.Actualizar(recompensaMostrar.Id, usuario.Id);
		BaseDatos.Recompensas.Historial.Insertar(usuario.Id, -recompensaMostrar.Coins, "Buy " + recompensaMostrar.JuegoNombre, DateTime.Now);

		usuario.PatreonCoins = usuario.PatreonCoins - recompensaMostrar.Coins;

		List<BaseDatos.Usuarios.Clave> claves = new List<BaseDatos.Usuarios.Clave>();

		if (string.IsNullOrEmpty(usuario.Keys) == false)
		{
			claves = JsonSerializer.Deserialize<List<BaseDatos.Usuarios.Clave>>(usuario.Keys);
		}

		BaseDatos.Usuarios.Clave nuevaClave = new BaseDatos.Usuarios.Clave();
		nuevaClave.Nombre = recompensaMostrar.JuegoNombre;
		nuevaClave.Codigo = recompensaMostrar.Clave;
		nuevaClave.JuegoId = recompensaMostrar.JuegoId.ToString();

		if (claves == null)
		{
			claves = new List<BaseDatos.Usuarios.Clave>();
		}

		claves.Add(nuevaClave);

		usuario.Keys = JsonSerializer.Serialize(claves);

		claveJuegoSeleccionado = recompensaMostrar.Clave;

		try
		{
			await UserManager.UpdateAsync(usuario);
		}
		catch { }

		juegos.Clear();
		juegos = BaseDatos.Recompensas.Juegos.Disponibles();
	}
}
