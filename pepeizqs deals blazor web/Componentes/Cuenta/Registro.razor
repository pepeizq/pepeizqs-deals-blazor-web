@page "/account/register"

@attribute [ExcludeFromInteractiveRouting]

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using pepeizqs_deals_web.Data

@inject IHttpContextAccessor Contexto
@inject UserManager<Usuario> UserManager
@inject IUserStore<Usuario> UserStore
@inject SignInManager<Usuario> SignInManager
@inject IEmailSender<Usuario> EmailSender
@inject NavigationManager NavManager

@if (string.IsNullOrEmpty(usuarioId) == true)
{
    string titulo = Herramientas.Idiomas.BuscarTexto(idioma, "Title", "Register") + " • pepeizq's deals";

    <HeadContent>
        <PageTitle>@titulo</PageTitle>
    </HeadContent>

    <div class="caja-diseño" style="max-width: 600px; padding: 40px; margin: auto;">
        @if (string.IsNullOrEmpty(mensajeError) == false)
        {
            <div style="margin-bottom: 20px; background-color: var(--fondoPeligro); padding: 15px 20px;">
                @mensajeError
            </div>
        }

        <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegistrarUsuario" FormName="register">
            <DataAnnotationsValidator />
            <div class="texto-info">@Herramientas.Idiomas.BuscarTexto(idioma, "String1", "Register")</div>
            <hr />
            <ValidationSummary class="texto-peligro-entrada" role="alert" />
            <div style="margin-bottom: 20px;">
                <label for="Input.Email" class="texto-info-entrada">
                    @Herramientas.Idiomas.BuscarTexto(idioma, "String2", "Register")
                </label>

                <InputText @bind-Value="Input.Email" id="Input.Email" class="entrada-texto" autocomplete="username" aria-required="true" placeholder="@Herramientas.Idiomas.BuscarTexto(idioma, "String3", "Register")" />
                <ValidationMessage For="() => Input.Email" class="texto-peligro-entrada" />
            </div>
            <div style="margin-bottom: 20px;">
                <label for="Input.Password" class="texto-info-entrada">
                    @Herramientas.Idiomas.BuscarTexto(idioma, "String4", "Register")
                </label>
                <InputText type="password" @bind-Value="Input.Password" id="Input.Password" class="entrada-texto" autocomplete="new-password" aria-required="true" placeholder="@Herramientas.Idiomas.BuscarTexto(idioma, "String5", "Register")" />
                <ValidationMessage For="() => Input.Password" class="texto-peligro-entrada" />
            </div>
            <div style="margin-bottom: 30px;">
                <label for="Input.ConfirmPassword" class="texto-info-entrada">
                    @Herramientas.Idiomas.BuscarTexto(idioma, "String6", "Register")
                </label>
                <InputText type="password" @bind-Value="Input.ConfirmPassword" id="Input.ConfirmPassword" class="entrada-texto" autocomplete="new-password" aria-required="true" placeholder="@Herramientas.Idiomas.BuscarTexto(idioma, "String5", "Register")" />
                <ValidationMessage For="() => Input.ConfirmPassword" class="texto-peligro-entrada" />
            </div>

            <button type="submit" class="boton-pequeño" style="text-align: center; font-size: 20px; padding: 15px 20px;">
                @Herramientas.Idiomas.BuscarTexto(idioma, "String7", "Register")
            </button>
        </EditForm>
    </div>

    <Accesos idioma="@idioma" mostrarRegistro="false" />
}

@code {

    #nullable disable

    private string idioma = "en";
    private string usuarioId = null;

    private IEnumerable<IdentityError> identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string ReturnUrl { get; set; }

    private string mensajeError => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    protected override void OnInitialized()
    {
        if (Contexto.HttpContext != null)
        {
            idioma = Contexto.HttpContext.Request.Headers["Accept-Language"].ToString().Split(";").FirstOrDefault()?.Split(",").FirstOrDefault();
            usuarioId = Contexto.HttpContext.User.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value;
        }
    }

    public async Task RegistrarUsuario(EditContext editContext)
    {
        var user = CrearUsuario();

        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
        var result = await UserManager.CreateAsync(user, Input.Password);

        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            return;
        }

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavManager.GetUriWithQueryParameters(
            NavManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

        await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        if (UserManager.Options.SignIn.RequireConfirmedAccount == true)
        {
            NavManager.NavigateTo("/account");
        }

        await SignInManager.SignInAsync(user, isPersistent: false);
        NavManager.NavigateTo(ReturnUrl);
    }

    private Usuario CrearUsuario()
    {
        try
        {
            return Activator.CreateInstance<Usuario>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(Usuario)}'. " +
                $"Ensure that '{nameof(Usuario)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<Usuario> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<Usuario>)UserStore;
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }
}
