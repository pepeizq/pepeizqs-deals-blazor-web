@page "/bundle/{bundleId:int}/{bundleNombre?}/"

@using APIs.Steam
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.JSInterop
@using Microsoft.VisualBasic
@using pepeizqs_deals_blazor_web.Componentes.Interfaz
@using pepeizqs_deals_web.Data

@inject IHttpContextAccessor Contexto
@inject IJSRuntime JavaScript

@if (bundle != null)
{
	if (tipo == Tipo.Bundle)
	{
		string titulo = bundle.NombreBundle + " • " + bundle.NombreTienda + " • pepeizq's deals";

		if (titulo.Length > 66)
		{
			titulo = titulo.Substring(0, 66) + " ...";
		}

		string descripcion = string.Empty;
		string enlace = "https://pepeizqdeals.com/bundle/" + bundle.Id.ToString() + "/" + Herramientas.EnlaceAdaptador.Nombre(bundle.NombreBundle) + "/";
		string imagen = string.Empty;

		if (bundle.Tiers != null)
		{
			string precio = bundle.Tiers[0].Precio.ToString();
			precio = precio.Replace(".", ",");
			precio = precio.Trim() + "€";

			if (bundle.Pick == false)
			{
				descripcion = Herramientas.Idiomas.BuscarTexto(idioma, "String22", "Bundle") + " " + precio;
			}
			else
			{
				descripcion = Herramientas.Idiomas.BuscarTexto(idioma, "String23", "Bundle") + " " + precio;
			}
		}

		if (descripcion.Length > 147)
        {
            descripcion = descripcion.Substring(0, 147) + " ...";
        }

		if (string.IsNullOrEmpty(bundle.ImagenNoticia) == false)
		{
			if (bundle.ImagenNoticia.Contains("https://") == true)
			{
				imagen = bundle.ImagenNoticia;
			}
		}

		string[] keywordsEnBruto = Herramientas.Buscador.LimpiarNombre(bundle.NombreBundle, false).Split(' ');
		List<string> keywordsLista = new List<string>();
		keywordsLista.AddRange(keywordsEnBruto);

		string keywords = "bundle";

		foreach (string keyword in keywordsLista)
		{
			if (keyword.Length > 3)
			{
				keywords = keywords + ", " + keyword;
			}
		}

		if (bundle.Juegos != null)
		{
			if (bundle.Juegos.Count > 0)
			{
				foreach (var juego in bundle.Juegos)
				{
					if (juego != null)
					{
						if (string.IsNullOrEmpty(juego.Nombre) == false)
						{
							string[] keywordsEnBrutoJuego = Herramientas.Buscador.LimpiarNombre(juego.Nombre, false).Split(' ');
							List<string> keywordsListaJuego = new List<string>();
							keywordsListaJuego.AddRange(keywordsEnBrutoJuego);

							foreach (string keyword in keywordsListaJuego)
							{
								if (keywords.Contains(keyword) == false && keyword.Length > 3)
								{
									keywords = keywords + ", " + keyword;
								}
							}
						}
					}
				}
			}
		}
		
		<HeadContent>
            <PageTitle>@titulo</PageTitle>

			<meta name="og:title" Content="@titulo" />
			<meta name="description" content="@descripcion" />
			<meta name="og:description" content="@descripcion" />
			<meta name="og:url" content="@enlace" />
			<meta name="og:image" content="@imagen" />
			<meta name="og:site_name" content="pepeizq's deals" />
			<meta name="og:type" content="website" />
			<meta name="robots" content="index, follow" />
			<meta name="keywords" content="@keywords" />

			<script type="application/ld+json">
            @{
                string seoJson = "{" + Environment.NewLine +
                    Strings.ChrW(34) + "@context" + Strings.ChrW(34) + ":" + Strings.ChrW(34) + "https://schema.org" + Strings.ChrW(34) + "," + Environment.NewLine +
                    Strings.ChrW(34) + "@type" + Strings.ChrW(34) + ":" + Strings.ChrW(34) + "SoftwareApplication" + Strings.ChrW(34) + "," + Environment.NewLine +
                    Strings.ChrW(34) + "name" + Strings.ChrW(34) + ":" + Strings.ChrW(34) + bundle.NombreBundle + Strings.ChrW(34) + "," + Environment.NewLine +
                    Strings.ChrW(34) + "operatingSystem" + Strings.ChrW(34) + ":" + Strings.ChrW(34) + "WINDOWS" + Strings.ChrW(34) + "," + Environment.NewLine +
                    Strings.ChrW(34) + "applicationCategory" + Strings.ChrW(34) + ":" + Strings.ChrW(34) + "GameApplication" + Strings.ChrW(34) + "," + Environment.NewLine +
					Strings.ChrW(34) + "image" + Strings.ChrW(34) + ": {" + Strings.ChrW(34) + "@type" + Strings.ChrW(34) + ":" + Strings.ChrW(34) + "ImageObject" + Strings.ChrW(34) + "," + Strings.ChrW(34) + "url" + Strings.ChrW(34) + ":" + Strings.ChrW(34) + bundle.ImagenBundle + Strings.ChrW(34) + "," + Strings.ChrW(34) + "contentUrl" + Strings.ChrW(34) + ":" + Strings.ChrW(34) + bundle.NombreBundle + Strings.ChrW(34) + "}";

                seoJson = seoJson + "}";
            }

            @((MarkupString)seoJson)
        </script>

			<link rel="canonical" href="@enlace" />
		</HeadContent>
	}
}

<script>
	window.ChangeUrl = function (url) {
		history.pushState(null, '', url);
	}
</script>

<style>
	.bundle-tabla {
		grid-template-columns: 1fr 1fr 1fr 1fr;
		grid-gap: 40px;
	}

	.bundle-espacio {
		padding: 30px;
	}

	.bundle-espacio2 {
		gap: 40px;
	}

	.bundle-espacio3 {
		padding: 15px 30px;
	}

	@@media (max-width: 1000px) {
		.bundle-tabla {
			grid-template-columns: 1fr 1fr 1fr;
			grid-gap: 20px;
		}

		.bundle-espacio {
			padding: 10px;
		}

		.bundle-espacio2 {
			gap: 20px;
		}

		.bundle-espacio3 {
			padding: 10px 20px;
		}
	}
</style>

@if (bundle != null)
{
	if (tipo == Tipo.Bundle)
	{
		if (usuarioAdmin == true)
		{
			<pepeizqs_deals_blazor_web.Componentes.Admin.Bundle idioma="@idioma" bundleId="@bundle.Id" />
		}

		<div class="subcabecera">
			<div class="cuerpo-ancho sub-subcabecera">
				<div style="height: 40px; padding: 0px 20px;">
					<img src="@Herramientas.Ficheros.Imagenes.ServidorExterno(Bundles2.BundlesCargar.DevolverBundle(bundle.Tipo).ImagenTienda)" style="height: 100%;" alt="@bundle.NombreBundle" />
				</div>

				<h1 style="font-size: 18px; padding: 0px 20px; margin: 0px;">
					@bundle.NombreBundle
				</h1>

				<div style="font-size: 16px; padding: 0px 20px; margin-left: auto;">
					@bundle.FechaEmpieza.Day.ToString()/@bundle.FechaEmpieza.Month.ToString()/@bundle.FechaEmpieza.Year.ToString() • @bundle.FechaTermina.Day.ToString()/@bundle.FechaTermina.Month.ToString()/@bundle.FechaTermina.Year.ToString()
				</div>
			</div>
        </div>

		@if (DateTime.Now < bundle.FechaTermina)
		{
            string enlaceBundle = bundle.Enlace;

			if (Herramientas.Bots.UserAgentEsBot(userAgent) == false)
			{
				enlaceBundle = Herramientas.EnlaceAcortador.Generar(bundle.Enlace, bundle.Tipo, usuarioPatreon);
			}

			<div style="position: sticky; top: var(--alturaCabecera); z-index: 1000;">
				<button @onclick="(e => AbrirBundle(e, enlaceBundle))" class="boton-pequeño" style="text-align: center; padding: 20px; font-size: 20px;">
					@Herramientas.Idiomas.BuscarTexto(idioma, "String26", "Bundle")
				</button>
			</div>
		}
	}

	if (tipo == Tipo.Noticia)
	{
		string enlaceBundle = bundle.Enlace;

		if (Herramientas.Bots.UserAgentEsBot(userAgent) == false)
		{
			enlaceBundle = Herramientas.EnlaceAcortador.Generar(bundle.Enlace, bundle.Tipo, usuarioPatreon, false);
		}

		<div style="position: sticky; top: var(--alturaCabecera); z-index: 1000; width: 100%;">
			<button @onclick="(e => AbrirBundle(e, enlaceBundle))" class="boton-pequeño" style="text-align: center; padding: 20px; font-size: 20px;">
				@Herramientas.Idiomas.BuscarTexto(idioma, "String26", "Bundle")
			</button>
		</div>
	}

	if (bundle.Tiers != null)
	{
		decimal totalMinimos = 0;

		<div style="margin: 40px 0px;">
			@if (bundle.Tiers.Count > 0)
			{
				int i = 0;

				foreach (var tier in OrdenarTiers(bundle.Tiers))
				{
					string marginFinal = string.Empty;

					if (tier.Posicion != bundle.Tiers.Count && bundle.Pick == false)
					{
						marginFinal = "margin-bottom: 40px;";

						if (tipo == Tipo.Juego)
						{
							marginFinal = "margin-bottom: 20px;";
						}
					}

					List<Bundles2.BundleJuego> juegosTier = new List<Bundles2.BundleJuego>();

					if (bundle.Juegos != null)
					{
						if (bundle.Juegos.Count > 0)
						{
							foreach (var juego in bundle.Juegos)
							{
								if (juego.Tier != null)
								{
									if (juego.Tier.Posicion == tier.Posicion)
									{
										juegosTier.Add(juego);
									}
								}
							}
						}
					}

					if (juegosTier.Count > 0)
					{
						juegosTier = juegosTier.OrderBy(x => x.Nombre).ToList();
					}

					foreach (var juego in juegosTier)
					{
						if (juego.Juego.Tipo == Juegos.JuegoTipo.DLC)
						{
							if (string.IsNullOrEmpty(juego.Juego.Maestro) == false)
							{
								if (juego.Juego.Maestro != "no")
								{
									foreach (var juego2 in juegosTier)
									{
										if (juego2.JuegoId == juego.Juego.Maestro)
										{
											if (juego2.DLCs == null)
											{
												juego2.DLCs = new List<string>();
											}

											bool añadir = true;

											if (juego2.DLCs.Count > 0)
											{
												foreach (var dlc in juego2.DLCs)
												{
													if (dlc == juego.JuegoId)
													{
														añadir = false;
														break;
													}
												}
											}

											if (añadir == true)
											{
												juego2.DLCs.Add(juego.JuegoId);
											}
										}
									}
								}
							}
						}
					}

					if (bundle.Pick == true)
					{
						<div class="caja-diseño bundle-espacio bundle-espacio2" style="border-radius: 0px; font-size: 18px; display: flex; align-items: center; flex-direction: row; justify-content: center; margin-bottom: 30px;">
							@foreach (var tier2 in OrdenarTiers(bundle.Tiers))
							{
								<div class="bundle-espacio3" style="text-align: center; background-color: var(--fondoMinimo); border: 1px solid var(--fondoBotonPequeño); display: flex; align-items: center; gap: 5px;">
									@if (tier2.CantidadJuegos == 1)
									{
										<label>@tier2.CantidadJuegos.ToString() @Herramientas.Idiomas.BuscarTexto(idioma, "String21", "Bundle") • @Herramientas.Precios.Euro(decimal.Parse(tier2.Precio))</label>
									}
									else if (tier2.CantidadJuegos > 1)
									{
										<label>@tier2.CantidadJuegos.ToString() @Herramientas.Idiomas.BuscarTexto(idioma, "String8", "Bundle") • @Herramientas.Precios.Euro(decimal.Parse(tier2.Precio))</label>
										<label>/</label>
										<label style="font-size: 14px;">@Herramientas.Precios.Euro(decimal.Parse(tier2.Precio) / tier2.CantidadJuegos) (@Herramientas.Idiomas.BuscarTexto(idioma, "String20", "Bundle"))</label>
									}
								</div>
							}
						</div>
					}

					string espacioFondo = "margin-bottom: 40px;";

					if (i == bundle.Tiers.Count - 1 || bundle.Pick == true)
					{
						espacioFondo = string.Empty;
					}

					<div class="caja-diseño bundle-espacio" style="border-radius: 0px; @espacioFondo">
						@if (bundle.Pick == false)
						{
							<div style="font-size: 18px; background-color: var(--fondoMinimo); border: 1px solid var(--fondoBotonPequeño); padding: 20px; margin-bottom: 30px; border-radius: 5px;">
								<div style="margin-bottom: 5px;">
									Tier @tier.Posicion: @Herramientas.Precios.Euro(decimal.Parse(tier.Precio))
								</div>

								@foreach (var juego in juegosTier)
								{
									if (juego.Juego.PrecioMinimosHistoricos != null)
									{
										foreach (var historico in juego.Juego.PrecioMinimosHistoricos)
										{
											if (historico.DRM == juego.DRM)
											{
												totalMinimos = totalMinimos + historico.Precio;

												break;
											}
										}
									}
								}

								<div style="font-size: 14px;">
									@Herramientas.Idiomas.BuscarTexto(idioma, "String14", "Bundle"): @Herramientas.Precios.Euro(totalMinimos)
								</div>
							</div>
						}

						<div class="bundle-tabla" style="display: grid;">
							@foreach (var juego in juegosTier)
							{
								bool mostrar = true;

								if (juego.Juego.Tipo == Juegos.JuegoTipo.DLC)
								{
									if (string.IsNullOrEmpty(juego.Juego.Maestro) == false)
									{
										if (juego.Juego.Maestro != "no")
										{
											foreach (var juego2 in juegosTier)
											{
												if (juego2.JuegoId == juego.Juego.Maestro)
												{
													mostrar = false;
												}
											}
										}
									}
								}

								if (mostrar == true)
								{
									<CajaJuego idioma="@idioma" juego="juego.Juego" drmBundle="juego.DRM" dlcsBundle="juego.DLCs" juegosUsuario="@juegosUsuario" idBundle="@bundleId"
											   tipo="Interfaz.CajaJuego.Tipo.Bundle" usuarioDeseadosSteam="@deseadosUsuario?.SteamWishlist" usuarioDeseadosGog="@deseadosUsuario?.GogWishlist" usuarioDeseadosWeb="@deseadosUsuario?.Wishlist" />
								}
							}
						</div>
					</div>

					if (bundle.Pick == true)
					{
						break;
					}

					i += 1;
				}
			}
		</div>
	}
}

@code {

	#nullable disable

	private string idioma = "en";
	private string usuarioId = null;
	private string userAgent = null;

	private Herramientas.UsuarioListadosJuegos juegosUsuario = null;
	private Usuario deseadosUsuario = null;
	private bool usuarioPatreon = false;
	private bool usuarioAdmin = false;

	[Parameter]
	public int bundleId { get; set; }

	[Parameter]
	public string bundleNombre { get; set; }

	[Parameter]
	public Tipo tipo { get; set; } = Tipo.Bundle;

	public Bundles2.Bundle bundle = null;

	protected override void OnInitialized()
	{
		idioma = Contexto.HttpContext.Request.Headers["Accept-Language"].ToString().Split(";").FirstOrDefault()?.Split(",").FirstOrDefault();
		usuarioId = Contexto.HttpContext.User.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value;
		userAgent = Contexto.HttpContext.Request.Headers.UserAgent.ToString();

		if (string.IsNullOrEmpty(usuarioId) == false)
		{
			idioma = BaseDatos.Usuarios.Buscar.IdiomaSobreescribir(usuarioId);
			juegosUsuario = Herramientas.UsuarioJuegos.Cargar(usuarioId);
			deseadosUsuario = BaseDatos.Usuarios.Buscar.DeseadosTiene(usuarioId);
			usuarioPatreon = Herramientas.Patreon.VerificarActivo(BaseDatos.Usuarios.Buscar.FechaPatreon(usuarioId));
			usuarioAdmin = BaseDatos.Usuarios.Buscar.RolDios(usuarioId);
		}
	}

	protected override async Task OnParametersSetAsync()
	{
		await Task.Yield();

		bundle = BaseDatos.Bundles.Buscar.UnBundle(bundleId);

		if (bundle != null)
		{
			if (bundle.Juegos != null)
			{
				if (bundle.Juegos.Count > 0)
				{
					foreach (var juego in bundle.Juegos)
					{
						if (string.IsNullOrEmpty(juego.JuegoId) == false)
						{
							juego.Juego = BaseDatos.Juegos.Buscar.UnJuego(juego.JuegoId);
							juego.Imagen = juego.Juego.Imagenes.Header_460x215;
						}
					}
				}
			}
		}
	}

	protected override async Task OnAfterRenderAsync(bool primerRender)
	{
		if (primerRender == true && tipo == Tipo.Bundle)
		{
			if (bundle != null)
			{
				await JavaScript.InvokeVoidAsync("ChangeUrl", "/bundle/" + bundle.Id.ToString() + "/" + Herramientas.EnlaceAdaptador.Nombre(bundle.NombreBundle) + "/");
			}			
		}
	}

	public enum Tipo
	{
		Bundle,
		Bundles,
		Juego,
		Noticia
	}

	private List<Bundles2.BundleTier> OrdenarTiers(List<Bundles2.BundleTier> tiers)
	{
		if (tiers != null)
		{
			tiers.Sort(delegate (Bundles2.BundleTier t1, Bundles2.BundleTier t2)
			{
				return t1.Posicion.CompareTo(t2.Posicion);
			});
		}

		return tiers;
	}

	private async void AbrirBundle(MouseEventArgs e, string enlace)
	{
		await JavaScript.InvokeVoidAsync("open", enlace, "_blank");
	}
}
