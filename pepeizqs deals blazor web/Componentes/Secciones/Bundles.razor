@page "/bundles"

@using APIs.Steam
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components.Web.Virtualization
@using Microsoft.AspNetCore.Identity
@using Microsoft.JSInterop
@using Microsoft.VisualBasic
@using pepeizqs_deals_blazor_web.Componentes.Interfaz
@using pepeizqs_deals_web.Data

@inject IHttpContextAccessor Contexto
@inject IJSRuntime JavaScript

@{
	string titulo = Herramientas.Idiomas.BuscarTexto(idioma, "Title", "Bundle");
	string keywords = "bundles";

	if (bundlesActuales?.Count > 0)
	{
		if (bundlesActuales.Count == 1)
		{
			titulo = string.Format(Herramientas.Idiomas.BuscarTexto(idioma, "String16", "Bundle"), bundlesActuales.Count.ToString());
		}
		else if (bundlesActuales.Count > 1)
		{
			titulo = string.Format(Herramientas.Idiomas.BuscarTexto(idioma, "String17", "Bundle"), bundlesActuales.Count.ToString());
		}

		foreach (var bundleActual in bundlesActuales)
		{
			if (keywords.Contains(bundleActual.NombreTienda.ToLower()) == false)
			{
				keywords = keywords + ", " + bundleActual.NombreTienda.ToLower();
			}
		}
	}
	else
	{
		titulo = Herramientas.Idiomas.BuscarTexto(idioma, "String18", "Bundle");
	}

	string contenidoJson = @"{
        ""@context"": ""https://schema.org"",
		""@type"": ""ItemList"",
		""name"": ""PC Game Bundles"",
		""numberOfItems"": ""@cantidad"",
        ""itemListOrder"": ""Descending""
	";

	contenidoJson = contenidoJson.Replace("@cantidad", (bundlesActuales?.Count > 0 ? bundlesActuales?.Count : 0).ToString());

	if (bundlesActuales?.Count > 0)
	{
		contenidoJson = contenidoJson + @",
			""itemListElement"": [";

		int i = 0;
		while (i < bundlesActuales?.Count)
		{
			if (i != 0)
			{
				contenidoJson = contenidoJson + ",";
			}

			contenidoJson = contenidoJson + @"{
				""@type"": ""ListItem"",
				""position"": ""@posicion"",
				""name"": ""@nombre"",
				""url"": ""@enlace"",
				""image"": ""@imagen"" 
			}";

			contenidoJson = contenidoJson.Replace("@posicion", (i + 1).ToString());
			contenidoJson = contenidoJson.Replace("@nombre", bundlesActuales[i].NombreBundle);
			contenidoJson = contenidoJson.Replace("@enlace", "https://pepeizqdeals.com/bundle/" + bundlesActuales[i].Id.ToString() + "/" + Herramientas.EnlaceAdaptador.Nombre(bundlesActuales[i].NombreBundle) + "/");
			contenidoJson = contenidoJson.Replace("@imagen", bundlesActuales[i].ImagenBundle);

			i += 1;
		}

		contenidoJson = contenidoJson + "]";
	}

	contenidoJson = contenidoJson + @"
			}";

	<Titulo tipo="@Titulo.Tipo.Bundles" idioma="@idioma" tituloBundles="@titulo" keywords="@keywords" contenidoJsonBundles="@contenidoJson"/>
}

<script>
	function moverScroll(id) {
		const yOffset = -90;
		const element = document.getElementById(id);
		const y = element.getBoundingClientRect().top + window.pageYOffset + yOffset;

		window.scrollTo({ top: y, behavior: 'smooth' });
	}
</script>

<script>
	window.ChangeUrl = function (url) {
		history.pushState(null, '', url);
	}
</script>

<style>
	.bundles-grid {
		gap: 40px;
	}

	@@media (max-width: 800px) {
		.bundles-grid {
			gap: 20px;
		}
	}
</style>

<style>
	.caja-archivo-contenido {
		background-color: var(--fondoSubsubcabecera);
		border: 2px solid var(--fondoSubcabecera);
		padding: 40px;
		box-shadow: 0px 4px 8px 0px rgba(0, 0, 0, 0.28),0px 0px 2px 0px rgba(0, 0, 0, 0.24);
	}
</style>

@if (mostrarBundleSeleccionado == false)
{
	<div class="subcabecera">
		<div class="cuerpo-ancho sub-subcabecera">
			@if (Herramientas.Bots.UserAgentEsBot(userAgent) == false)
			{
				<button class="boton-pequeño" style="@CambiarEstilo(Bundles2.BundleTipo.Desconocido, false) width: fit-content; padding: 8px 20px; border-radius: 5px;" @onclick="@(e => CambiarTipo(e, Bundles2.BundleTipo.Desconocido, false))">
					<h1 style="font-size: 18px; margin: 0px;">
						@Herramientas.Idiomas.BuscarTexto(idioma, "Title", "Bundle")
					</h1>
				</button>

				@if (tiposActuales.Count > 0 && mostrarArchivo == false)
				{
					foreach (var tipo in tiposActuales)
					{
						if (tipo != Bundles2.BundleTipo.Desconocido)
						{
							<button class="boton-pequeño" style="@CambiarEstilo(tipo, false) width: fit-content; padding: 8px 16px; border-radius: 5px; display: flex; align-items: center;" @onclick="@(e => CambiarTipo(e, tipo, false))" title="@Bundles2.BundlesCargar.DevolverBundle(tipo).NombreTienda">
								<img src="@Herramientas.Ficheros.Imagenes.ServidorExterno(Bundles2.BundlesCargar.DevolverBundle(tipo).ImagenIcono)" style="width: 20px; height: 20px;" alt="Store" />
							</button>
						}
					}
				}

				<div style="margin-left: auto; display: flex; justify-content: right;">
					<div style="margin-left: auto; display: flex; justify-content: right; align-items: center; gap: 10px;">
						<div class="menu-dropdown" style="width: auto; margin: 0px 20px;">
							<button class="boton-pequeño" style="background-color: var(--buscadorSubcabecera); display: flex; align-items: center; width: 100%; padding: 8px 15px; margin: 0; border: 0px; color: var(--colorTextoVisitado);">
								<div style="font-size: 14px; padding-right: 5px;">
									@Herramientas.Idiomas.BuscarTexto(idioma, "String29", "Bundle"):
								</div>

								<div style="font-size: 14px; color: var(--colorEnlace); padding-right: 15px;">
									@ordenamientoElegido
								</div>

								<div style="max-width: 9px;">
									<svg class="svg-icono" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512">
										<path d="M137.4 374.6c12.5 12.5 32.8 12.5 45.3 0l128-128c9.2-9.2 11.9-22.9 6.9-34.9s-16.6-19.8-29.6-19.8L32 192c-12.9 0-24.6 7.8-29.6 19.8s-2.2 25.7 6.9 34.9l128 128z" />
									</svg>
								</div>
							</button>

							<div class="menu-dropdown-contenido" style="right: 0; width: 100%; background-color: var(--buscadorSubcabecera);">
								<button class="texto-cabecera menu-dropdown-item" style="font-size: 14px; text-align: left; width: 100%; border: 0px;" @onclick="@(e => ElegirOrdenamiento(e, 0))">
									@Herramientas.Idiomas.BuscarTexto(idioma, "String30", "Bundle")
								</button>
								<button class="texto-cabecera menu-dropdown-item" style="font-size: 14px; text-align: left; width: 100%; border: 0px;" @onclick="@(e => ElegirOrdenamiento(e, 1))">
									@Herramientas.Idiomas.BuscarTexto(idioma, "String31", "Bundle")
								</button>
								<button class="texto-cabecera menu-dropdown-item" style="font-size: 14px; text-align: left; width: 100%; border: 0px;" @onclick="@(e => ElegirOrdenamiento(e, 2))">
									@Herramientas.Idiomas.BuscarTexto(idioma, "String32", "Bundle")
								</button>
								<button class="texto-cabecera menu-dropdown-item" style="font-size: 14px; text-align: left; width: 100%; border: 0px;" @onclick="@(e => ElegirOrdenamiento(e, 3))">
									@Herramientas.Idiomas.BuscarTexto(idioma, "String33", "Bundle")
								</button>
							</div>
						</div>
					</div>

					<button class="boton-pequeño" style="@CambiarEstilo(Bundles2.BundleTipo.Desconocido, true) width: fit-content; padding: 8px 20px; border-radius: 5px;" @onclick="@(e => CambiarTipo(e, Bundles2.BundleTipo.Desconocido, true))">
						<div style="font-size: 16px;">
							@Herramientas.Idiomas.BuscarTexto(idioma, "String2", "Bundle")
						</div>
					</button>
				</div>
			}
			else
			{
				<h1 style="font-size: 18px; margin: 0px;">
					@Herramientas.Idiomas.BuscarTexto(idioma, "Title", "Bundle")
				</h1>
			}
		</div>
	</div>

	@if (mostrarArchivo == false)
	{
		<div class="bundles-grid caja-archivo-contenido" style="display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 30px; justify-items: center; margin: 40px 0px; padding: 30px;">
			@if (bundlesActuales != null)
			{
				foreach (var bundle in bundlesActuales)
				{
					<button @onclick="@(e => SeleccionarBundle(e, bundle))" class="boton-pequeño" style="padding: 0px;">
						<div style="width: 100%; text-align: center; padding: 2px;">
							@if (bundle.Tipo == Bundles2.BundleTipo.HumbleBundle)
							{
								<img src="@Herramientas.Ficheros.Imagenes.ServidorExterno(bundle.ImagenNoticia, 395, 222)" style="max-width: 100%;" alt="@bundle.NombreBundle" />
							}
							else
							{
								<img src="@Herramientas.Ficheros.Imagenes.ServidorExterno(bundle.ImagenBundle, 395, 222)" style="max-width: 100%;" alt="@bundle.NombreBundle" />
							}

							<div style="margin-top: 10px; margin-bottom: 5px; text-align: center;">
								@MostrarFecha(bundle.FechaEmpieza, bundle.FechaTermina)
							</div>
						</div>
					</button>
				}
			}
		</div>
	}
	else
	{
		<div style="display: flex; align-items: start; gap: 15px; margin: 40px 0px 20px 0px; flex-wrap: wrap;">
			@foreach (var año in años)
			{
				<div>
					<button @onclick="@(e => CambiarAño(e, año))" class="boton-pequeño" style="padding: 6px 10px; width: auto;">
						@año
					</button>

					@if (añoSeleccionado == año)
					{
						<div style="margin-top: 10px; background: var(--colorTexto); padding: 1px;" />

						<div style="position: absolute; margin-top: 15px; display: flex; align-items: center;">
							@foreach (var bundleTipo in Bundles2.BundlesCargar.CargarBundles())
							{
								List<Bundles2.Bundle> bundlesAño = new List<Bundles2.Bundle>();

								foreach (var bundlePasado in bundlesPasados)
								{
									if (bundlePasado.FechaEmpieza.Year.ToString() == añoSeleccionado && bundleTipo == bundlePasado.Tipo)
									{
										bundlesAño.Add(bundlePasado);
									}
								}

								if (bundlesAño.Count > 0)
								{
									<div style="margin-right: 15px; font-size: 14px;">
										<a onclick="moverScroll('pasado-@bundleTipo.ToString()')" style="color: var(--colorTexto); text-decoration: none; cursor: pointer;">
											<img src="@Herramientas.Ficheros.Imagenes.ServidorExterno(Bundles2.BundlesCargar.DevolverBundle(bundleTipo).ImagenIcono)" style="width: 22px; height: 22px;" alt="Store" /> (@bundlesAño.Count.ToString())
										</a>
									</div>
								}
							}
						</div>
					}
				</div>
			}
		</div>

		@if (string.IsNullOrEmpty(añoSeleccionado) == false)
		{
			<div style="display: flex; flex-direction: column; gap: 40px; margin: 55px auto 40px auto;">
				@foreach (var bundleTipo in Bundles2.BundlesCargar.CargarBundles())
				{
					List<Bundles2.Bundle> bundlesAño = new List<Bundles2.Bundle>();

					foreach (var bundlePasado in bundlesPasados)
					{
						if (bundlePasado.FechaEmpieza.Year.ToString() == añoSeleccionado && bundleTipo == bundlePasado.Tipo)
						{
							bundlesAño.Add(bundlePasado);
						}
					}

					if (bundlesAño.Count > 0)
					{
						<div class="caja-archivo-contenido">
							<div id="pasado-@bundleTipo.ToString()" style="max-width: 200px;">
								<img src="@Herramientas.Ficheros.Imagenes.ServidorExterno(Bundles2.BundlesCargar.DevolverBundle(bundleTipo).ImagenTienda)" alt="Store" style="width: 100%; max-height: 70px; object-fit: contain;" />
							</div>

							<hr>

							<div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 30px; justify-content: flex-start;">
								@{
									int i = 1;
									while (i < 13)
									{
										List<Bundles2.Bundle> bundlesMensual = new List<Bundles2.Bundle>();

										foreach (var bundle in bundlesAño)
										{
											if (bundle.FechaEmpieza.Month == i)
											{
												bundlesMensual.Add(bundle);
											}
										}

										if (bundlesMensual.Count > 0)
										{
											bundlesMensual = bundlesMensual.OrderBy(x => x.NombreBundle).ToList();

											<div>
												<label>@Herramientas.Idiomas.BuscarTexto(idioma, "Month." + i.ToString(), "Months") (@bundlesMensual.Count.ToString())</label>

												<ul>
													@foreach (var bundleMensual in bundlesMensual)
													{
														<li style="margin-bottom: 5px;">
															<a @onclick="@(e => SeleccionarBundle(e, bundleMensual))" class="enlace-falso">
																@bundleMensual.NombreBundle
															</a>
														</li>
													}
												</ul>
											</div>
										}

										i += 1;
									}
								}
							</div>
						</div>
					}
				}
			</div>
		}
	}
}
else
{
	if (bundleSeleccionado != null)
	{
		<div class="subcabecera">
			<div class="cuerpo-ancho sub-subcabecera">
				<button @onclick="@(e => CerrarBundle(e))" class="boton-pequeño" style="width: fit-content; padding: 8px 20px; background-color: transparent;">
					<div style="max-width: 24px; max-height: 24px;">
						<svg class="svg-boton" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">
							<path d="M9.4 233.4c-12.5 12.5-12.5 32.8 0 45.3l160 160c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3L109.2 288 416 288c17.7 0 32-14.3 32-32s-14.3-32-32-32l-306.7 0L214.6 118.6c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0l-160 160z" />
						</svg>
					</div>
				</button>

				<div style="height: 40px; padding: 0px 20px;">
					<img src="@Herramientas.Ficheros.Imagenes.ServidorExterno(Bundles2.BundlesCargar.DevolverBundle(bundleSeleccionado.Tipo).ImagenTienda)" style="height: 100%;" alt="@bundleSeleccionado.NombreBundle" />
				</div>

				<div style="font-size: 18px; padding: 0px 20px;">
					@bundleSeleccionado.NombreBundle
				</div>

				<div style="font-size: 16px; padding: 0px 20px; margin-left: auto;">
					@MostrarFecha(bundleSeleccionado.FechaEmpieza, bundleSeleccionado.FechaTermina)
				</div>
			</div>
        </div>

		if (DateTime.Now < bundleSeleccionado.FechaTermina)
		{
			string enlaceBundle = bundleSeleccionado.Enlace;

			if (Herramientas.Bots.UserAgentEsBot(userAgent) == false)
			{
				enlaceBundle = Herramientas.EnlaceAcortador.Generar(bundleSeleccionado.Enlace, bundleSeleccionado.Tipo, usuarioPatreon);
			}

			<div style="position: sticky; top: var(--alturaCabecera); z-index: 1000;">
				<button @onclick="(e => AbrirBundle(e, enlaceBundle))" class="boton-pequeño" style="text-align: center; padding: 20px; font-size: 20px;">
					@Herramientas.Idiomas.BuscarTexto(idioma, "String3", "Bundle")
				</button>
			</div>
		}

		<Bundle bundleId="@bundleSeleccionado.Id" tipo="@Bundle.Tipo.Bundles" />
	}
}

@code {

	#nullable disable

	private string idioma = "en";
	private string usuarioId = null;
	private string userAgent = null;

	private bool usuarioPatreon = false;

	[PersistentState] public List<Bundles2.Bundle> bundlesActuales { get; set; }
	[PersistentState] public List<Bundles2.Bundle> bundlesPasados { get; set; }
	private Bundles2.Bundle bundleSeleccionado = new Bundles2.Bundle();
	private bool mostrarBundleSeleccionado = false;

	private List<string> años = new List<string>();
	private string añoSeleccionado = string.Empty;

	protected override void OnInitialized()
	{
		Herramientas.ContextoUsuarioDatos datos = Herramientas.ContextoUsuario.Leer(Contexto);
		idioma = datos.Idioma;
		usuarioId = datos.UsuarioId;
		userAgent = datos.UserAgent;

		if (string.IsNullOrEmpty(usuarioId) == false)
		{
			idioma = BaseDatos.Usuarios.Buscar.IdiomaSobreescribir(usuarioId);
			usuarioPatreon = Herramientas.Patreon.VerificarActivo(BaseDatos.Usuarios.Buscar.FechaPatreon(usuarioId));
		}

		//--------------------------------------------------------------------

		DateTime arranque = new DateTime(2010, 1, 1);

		int i = 0;
		while (i < 100)
		{
			if (arranque.Year != DateTime.Now.Year)
			{
				años.Add(arranque.Year.ToString());
				arranque = arranque.AddYears(1);
			}
			i += 1;
		}

		años.Add(DateTime.Now.Year.ToString());
		años.Reverse();

		//--------------------------------------------------------------------

		if (bundlesActuales == null || bundlesActuales?.Count == 0)
		{
			int ordenamientoUsuario = 0;

			if (string.IsNullOrEmpty(usuarioId) == false)
			{
				ordenamientoUsuario = BaseDatos.Usuarios.Buscar.BundlesOrden(usuarioId);
			}

			CargarOrdenamiento(true, ordenamientoUsuario);
		}

		if (bundlesActuales?.Count > 0)
		{
			bundleSeleccionado = null;

			foreach (var bundle in bundlesActuales)
			{
				bool añadirTipo = true;

				if (tiposActuales.Count > 0)
				{
					foreach (var tipoActual in tiposActuales)
					{
						if (tipoActual == bundle.Tipo)
						{
							añadirTipo = false;
						}
					}
				}

				if (añadirTipo == true)
				{
					tiposActuales.Add(bundle.Tipo);
				}
			}
		}

		if (tiposActuales.Count > 0)
		{
			tiposActuales = tiposActuales.OrderBy(x => (int)x).ToList();
		}
	}

	[PersistentState] public string ordenamientoElegido { get; set; } 
	[PersistentState] public int ordenamientoNumero2 { get; set; }

	private void ElegirOrdenamiento(MouseEventArgs e, int nuevoNumero)
	{
		CargarOrdenamiento(false, nuevoNumero);
	}

	private void CargarOrdenamiento(bool inicio, int ordenamientoNumero)
	{
		if (inicio == true)
		{
			bundlesActuales ??= BaseDatos.Bundles.Buscar.Actuales(ordenamientoNumero, tipoSeleccionado);
		}
		else
		{
			bundlesActuales = BaseDatos.Bundles.Buscar.Actuales(ordenamientoNumero, tipoSeleccionado);
		}

        ordenamientoNumero2 = ordenamientoNumero;

		if (ordenamientoNumero == 0)
		{
			ordenamientoElegido = Herramientas.Idiomas.BuscarTexto(idioma, "String30", "Bundle");
		}
		else if (ordenamientoNumero == 1)
		{
			ordenamientoElegido = Herramientas.Idiomas.BuscarTexto(idioma, "String31", "Bundle");
		}
		else if (ordenamientoNumero == 2)
		{
			ordenamientoElegido = Herramientas.Idiomas.BuscarTexto(idioma, "String32", "Bundle");
		}
		else if (ordenamientoNumero == 3)
		{
			ordenamientoElegido = Herramientas.Idiomas.BuscarTexto(idioma, "String33", "Bundle");
		}

		if (inicio == false && string.IsNullOrEmpty(usuarioId) == false)
		{
			BaseDatos.Usuarios.Actualizar.Opcion("BundlesSort", ordenamientoNumero, usuarioId);
		}
	}

	private Bundles2.BundleTipo tipoSeleccionado = Bundles2.BundleTipo.Desconocido;
	private List<Bundles2.BundleTipo> tiposActuales = new List<Bundles2.BundleTipo>();
	private bool mostrarArchivo = false;

	private void CambiarTipo(MouseEventArgs e, Bundles2.BundleTipo nuevoTipo, bool esArchivo)
	{
		mostrarArchivo = esArchivo;

		if (esArchivo == false)
		{
			tipoSeleccionado = nuevoTipo;
			bundlesActuales = BaseDatos.Bundles.Buscar.Actuales(ordenamientoNumero2, nuevoTipo);
		}
		else
		{
			añoSeleccionado = DateTime.Now.Year.ToString();
			bundlesPasados = BaseDatos.Bundles.Buscar.Año(añoSeleccionado);
		}
	}

	private string CambiarEstilo(Bundles2.BundleTipo nuevoTipo, bool esArchivo)
	{
		if (mostrarArchivo == true && esArchivo == true)
		{
			if (nuevoTipo != Bundles2.BundleTipo.Desconocido)
			{
				return "background-color: transparent;";
			}
			else
			{
				return "background-color: var(--botonSubcabecera); box-shadow: 0px 2px 4px 0px rgba(0, 0, 0, 0.25),0px 0px 1px 0px rgba(0, 0, 0, 0.25);";
			}
		}
		else
		{
			if (tipoSeleccionado == nuevoTipo && mostrarArchivo == false && esArchivo == false)
			{
				return "background-color: var(--botonSubcabecera); box-shadow: 0px 2px 4px 0px rgba(0, 0, 0, 0.25),0px 0px 1px 0px rgba(0, 0, 0, 0.25);";
			}
			else
			{
				return "background-color: transparent;";
			}
		}
	}

	#region Archivo

	private void CambiarAño(MouseEventArgs e, string nuevoAño)
	{
		añoSeleccionado = nuevoAño;

		bundlesPasados = BaseDatos.Bundles.Buscar.Año(añoSeleccionado);
	}

	private string MostrarFecha(DateTime fechaEmpieza, DateTime fechaTermina)
	{
		if (fechaTermina.Year > 2022)
		{
			TimeSpan diferenciaTiempo = fechaTermina.Subtract(DateTime.Now);

			if (diferenciaTiempo.Days > 1)
			{
				return string.Format(Herramientas.Idiomas.BuscarTexto(idioma, "String4", "Bundle"), diferenciaTiempo.Days);
			}
			else if (diferenciaTiempo.Days == 1)
			{
				return string.Format(Herramientas.Idiomas.BuscarTexto(idioma, "String5", "Bundle"), diferenciaTiempo.Days);
			}
			else if (diferenciaTiempo.Days == 0 && diferenciaTiempo.Minutes > 0)
			{
				return string.Format(Herramientas.Idiomas.BuscarTexto(idioma, "String6", "Bundle"), diferenciaTiempo.Days);
			}
		}

		return Herramientas.Idiomas.BuscarTexto(idioma, "String7", "Bundle") + " • " + fechaEmpieza.Day.ToString() + "/" + fechaEmpieza.Month.ToString() + "/" + fechaEmpieza.Year.ToString() + " • " + fechaTermina.Day.ToString() + "/" + fechaTermina.Month.ToString() + "/" + fechaTermina.Year.ToString();
	}

	#endregion

	private async void SeleccionarBundle(MouseEventArgs e, Bundles2.Bundle nuevoBundle)
	{
		bundleSeleccionado = nuevoBundle;

		foreach (var juego in bundleSeleccionado.Juegos)
		{
			if (string.IsNullOrEmpty(juego.JuegoId) == false)
			{
				juego.Juego = BaseDatos.Juegos.Buscar.UnJuego(juego.JuegoId);
			}		
		}

		mostrarBundleSeleccionado = true;

		await JavaScript.InvokeVoidAsync("moverScroll", "cuerpazo");
		await JavaScript.InvokeVoidAsync("ChangeUrl", "/bundle/" + bundleSeleccionado.Id.ToString() + "/" + Herramientas.EnlaceAdaptador.Nombre(bundleSeleccionado.NombreBundle) + "/");
	}

	private async void CerrarBundle(MouseEventArgs e)
	{
		mostrarBundleSeleccionado = false;

		await JavaScript.InvokeVoidAsync("moverScroll", "cuerpazo");
		await JavaScript.InvokeVoidAsync("ChangeUrl", "/bundles/");
	}

	private async void AbrirBundle(MouseEventArgs e, string enlace)
	{
		await JavaScript.InvokeVoidAsync("open", enlace, "_blank");
	}
}
