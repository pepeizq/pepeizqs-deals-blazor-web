@page "/curator/{slug}/"

@using APIs.Steam
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components.Web.Virtualization
@using Microsoft.AspNetCore.Identity
@using Microsoft.VisualBasic
@using pepeizqs_deals_web.Data
@using pepeizqs_deals_blazor_web.Componentes.Interfaz

@inject IHttpContextAccessor Contexto

<style>
	.caja-curator-contenido {
		background-color: var(--fondoSubsubcabecera);
		border: 2px solid var(--fondoSubcabecera);
		padding: 0px;
		box-shadow: 0px 4px 8px 0px rgba(0, 0, 0, 0.28),0px 0px 2px 0px rgba(0, 0, 0, 0.24);
	}
</style>

@if (curator != null)
{
	string titulo = curator.Nombre + " (Curator) • pepeizq's deals";
	string descripcion = Herramientas.Idiomas.BuscarTexto(idioma, "Subtitle", "Curators");
	string enlace = "https://pepeizqdeals.com/curator/" + slug + "/";
	string imagen = "https://pepeizqdeals.com/logo/logoentrada.webp";

	if (string.IsNullOrEmpty(curator.Descripcion) == false)
	{
		descripcion = curator.Descripcion;
	}

	if (curator.Imagen != null)
	{
		if (string.IsNullOrEmpty(curator.Imagen) == false)
		{
			imagen = curator.Imagen;
		}
	}

	string keywords = "curator";

	if (curator.Nombre != null)
	{
		string[] keywordsEnBruto = Herramientas.Buscador.LimpiarNombre(curator.Nombre, false).Split(' ');
		List<string> keywordsLista = new List<string>();
		keywordsLista.AddRange(keywordsEnBruto);

		foreach (string keyword in keywordsLista)
		{
			if (keyword.Length > 3 && keywords.Contains(keyword) == false)
			{
				keywords = keywords + ", " + keyword;
			}
		}
	}

	<HeadContent>
		<PageTitle>@titulo</PageTitle>

		<meta name="og:title" content="@titulo" />

		@if (string.IsNullOrEmpty(descripcion) == false)
		{
			descripcion = descripcion.Replace(Strings.ChrW(34).ToString(), null);

			string descripcionMeta = descripcion;

			if (descripcionMeta.Length > 146)
			{
				descripcionMeta = descripcionMeta.Substring(0, 146) + " ...";
			}

			<meta name="description" content="@descripcionMeta" />
			<meta name="og:description" content="@descripcionMeta" />
		}

		<meta name="og:url" content="@enlace" />
		<meta name="og:image" content="@imagen" />
		<meta name="og:site_name" content="pepeizq's deals" />
		<meta name="og:type" content="website" />
		<meta name="robots" content="index, follow" />
		<meta name="keywords" content="@keywords" />
	
		<script type="application/ld+json">
			@{
				string seoJson = "{" + Environment.NewLine +
					Strings.ChrW(34) + "@context" + Strings.ChrW(34) + ":" + Strings.ChrW(34) + "https://schema.org" + Strings.ChrW(34) + "," + Environment.NewLine +
					Strings.ChrW(34) + "@type" + Strings.ChrW(34) + ":" + Strings.ChrW(34) + "ProfilePage" + Strings.ChrW(34) + "," + Environment.NewLine +
					Strings.ChrW(34) + "mainEntity" + Strings.ChrW(34) + ": {" + Environment.NewLine +
					Strings.ChrW(34) + "@type" + Strings.ChrW(34) + ":" + Strings.ChrW(34) + "Organization" + Strings.ChrW(34) + "," + Environment.NewLine +
					Strings.ChrW(34) + "name" + Strings.ChrW(34) + ":" + Strings.ChrW(34) + curator.Nombre + Strings.ChrW(34) + "," + Environment.NewLine +
					Strings.ChrW(34) + "description" + Strings.ChrW(34) + ":" + Strings.ChrW(34) + descripcion + Strings.ChrW(34) + "," + Environment.NewLine +
					Strings.ChrW(34) + "image" + Strings.ChrW(34) + ":" + Strings.ChrW(34) + imagen + Strings.ChrW(34);

				if (curator.Web != null)
				{
					if (string.IsNullOrEmpty(curator.Web.Enlace) == false)
					{
						seoJson = seoJson + "," + Environment.NewLine + Strings.ChrW(34) + "sameAs" + Strings.ChrW(34) + ": [ " + Strings.ChrW(34) + curator.Web.Enlace + Strings.ChrW(34) + " ]";
					}
				}

				seoJson = seoJson + "}" + Environment.NewLine + "}";
            }

            @((MarkupString)seoJson)
        </script>

		<link rel="canonical" href="@enlace" />
		<link title="pepeizq's deals • @Herramientas.Idiomas.BuscarTexto(idioma, "Title", "LastNews")" rel="alternate" type="application/rss+xml" href="https://pepeizqdeals.com/rss-en.xml" />
	</HeadContent>

	<div class="subcabecera">
		<div class="cuerpo-ancho sub-subcabecera" style="flex-wrap: nowrap;">
			<img src="@Herramientas.Ficheros.Imagenes.ServidorExterno(curator.Imagen)" style="width: 100px; height: 100px;" alt="@curator.Nombre" />

			<div style="display: flex; flex-direction: column; gap: 10px;">
				<h1 style="font-size: 18px; margin: 0px; width: fit-content;">
					@if (curator.Web != null)
					{
						<a href="@curator.Web.Enlace" target="_blank" style="text-decoration: none;">@curator.Nombre</a>
					}
					else
					{
						@curator.Nombre
					}
				</h1>

				<div style="font-size: 14px;">
					@curator.Descripcion
				</div>
			</div>
		</div>
	</div>

	<div>
		@if (string.IsNullOrEmpty(curator.ImagenFondo) == false)
		{
			<img class="juego-fondo" src="@Herramientas.Ficheros.Imagenes.ServidorExterno(curator.ImagenFondo)" alt="Background" loading="lazy" />
		}

		<div style="position: relative; display: flex; flex-direction: column; gap: 40px; margin: 40px auto;">
			@if (juegosDestacados.Count > 1)
			{
				<div class="caja-curator-contenido">
					<div style="font-size: 20px; background-color: var(--fondoSubcabecera); padding: 20px 30px;">
						@Herramientas.Idiomas.BuscarTexto(idioma, "String1", "Curators")
					</div>

					<div style="display: grid; grid-template-columns: repeat(auto-fill, minmax(170px, 1fr)); gap: 20px; width: 100%; padding: 30px;">
						@foreach (var destacado in juegosDestacados)
						{
							<CajaJuego idioma="@idioma" juego="@destacado" juegosUsuario="@juegosUsuario" usuarioDeseadosSteam="@deseadosUsuario?.SteamWishlist" usuarioDeseadosWeb="@deseadosUsuario?.Wishlist" usuarioDeseadosGog="@deseadosUsuario?.GogWishlist" tipo="CajaJuego.Tipo.CuratorDestacado" userAgent="@userAgent" />
						}
					</div>
				</div>
			}

			@if (juegosCurator?.Count > 0)
			{
				<div style="display: flex; align-items: start; gap: 40px;">
					@if (Herramientas.Bots.UserAgentEsBot(userAgent) == false)
					{
						<div class="caja-curator-contenido" style="width: 30%; display: flex; flex-direction: column;">
							<div style="font-size: 18px; background-color: var(--fondoSubcabecera); padding: 15px 30px;">
								@Herramientas.Idiomas.BuscarTexto(idioma, "String6", "Curators")
							</div>

							<div style="padding: 20px; display: flex; flex-direction: column; gap: 5px;">
								@{
									string fondoJuegos = string.Empty;

									if (filtrado == 1)
									{
										fondoJuegos = "background-color: var(--fondoBotonPequeño);";
									}
									else
									{
										fondoJuegos = "background-color: transparent;";
									}

									string fondoDLCs = string.Empty;

									if (filtrado == 2)
									{
										fondoDLCs = "background-color: var(--fondoBotonPequeño);";
									}
									else
									{
										fondoDLCs = "background-color: transparent;";
									}

									string fondoBandasSonoras = string.Empty;

									if (filtrado == 3)
									{
										fondoBandasSonoras = "background-color: var(--fondoBotonPequeño);";
									}
									else
									{
										fondoBandasSonoras = "background-color: transparent;";
									}

									string fondoSoftware = string.Empty;

									if (filtrado == 4)
									{
										fondoSoftware = "background-color: var(--fondoBotonPequeño);";
									}
									else
									{
										fondoSoftware = "background-color: transparent;";
									}
								}

								@if (juegosCuratorJuegos.Count > 0)
								{
									<button @onclick="(e => MostrarListado(e, juegosCuratorJuegos, 1))" style="color: var(--colorTexto); border: 0px; width: 100%; text-align: center; padding: 10px; @fondoJuegos">
										<div style="display: flex; align-items: center;">
											@Herramientas.Idiomas.BuscarTexto(idioma, "String2", "Curators") (@juegosCuratorJuegos.Count.ToString())
										</div>
									</button>
								}

								@if (juegosCuratorDLCs.Count > 0)
								{
									<button @onclick="(e => MostrarListado(e, juegosCuratorDLCs, 2))" style="color: var(--colorTexto); border: 0px; width: 100%; text-align: center; padding: 10px; @fondoDLCs">
										<div style="display: flex; align-items: center;">
											@Herramientas.Idiomas.BuscarTexto(idioma, "String3", "Curators") (@juegosCuratorDLCs.Count.ToString())
										</div>
									</button>
								}

								@if (juegosCuratorBandasSonoras.Count > 0)
								{
									<button @onclick="(e => MostrarListado(e, juegosCuratorBandasSonoras, 3))" style="color: var(--colorTexto); border: 0px; width: 100%; text-align: center; padding: 10px; @fondoBandasSonoras">
										<div style="display: flex; align-items: center;">
											@Herramientas.Idiomas.BuscarTexto(idioma, "String4", "Curators") (@juegosCuratorBandasSonoras.Count.ToString())
										</div>
									</button>
								}

								@if (juegosCuratorSoftware.Count > 0)
								{
									<button @onclick="(e => MostrarListado(e, juegosCuratorSoftware, 4))" style="color: var(--colorTexto); border: 0px; width: 100%; text-align: center; padding: 10px; @fondoSoftware">
										<div style="display: flex; align-items: center;">
											@Herramientas.Idiomas.BuscarTexto(idioma, "String5", "Curators") (@juegosCuratorSoftware.Count.ToString())
										</div>
									</button>
								}
							</div>
						</div>
					}

					<div style="width: 100%;">
						<div style="display: flex; flex-direction: column; gap: 20px; margin-top: -20px;">
							<Virtualize Context="juego" Items="juegosCuratorMostrar" ItemSize="107" OverscanCount="6">
								<ItemContent>
									<CajaJuego idioma="@idioma" juego="@juego" juegosUsuario="@juegosUsuario" usuarioDeseadosSteam="@deseadosUsuario?.SteamWishlist" usuarioDeseadosWeb="@deseadosUsuario?.Wishlist" usuarioDeseadosGog="@deseadosUsuario?.GogWishlist" tipo="CajaJuego.Tipo.CuratorLista" userAgent="@userAgent" />
								</ItemContent>
							</Virtualize>
						</div>
					</div>
				</div>
			}
		</div>
	</div>
}

@code {

	#nullable disable

	private string idioma = "en";
	private string usuarioId = null;
	private string userAgent = null;

	[PersistentState] public Herramientas.UsuarioListadosJuegos juegosUsuario { get; set; }
	[PersistentState] public Usuario deseadosUsuario { get; set; }
	private bool usuarioPatreon = false;

	[Parameter]
	public string slug { get; set; }

	[PersistentState] public BaseDatos.Curators.Curator curator { get; set; }
	[PersistentState] public List<Juegos.Juego> juegosCurator { get; set; }
	private List<Juegos.Juego> juegosDestacados = new List<Juegos.Juego>();

	private int filtrado = 0;
	private List<Juegos.Juego> juegosCuratorMostrar = new List<Juegos.Juego>();
	private List<Juegos.Juego> juegosCuratorJuegos = new List<Juegos.Juego>();
	private List<Juegos.Juego> juegosCuratorDLCs = new List<Juegos.Juego>();
	private List<Juegos.Juego> juegosCuratorBandasSonoras = new List<Juegos.Juego>();
	private List<Juegos.Juego> juegosCuratorSoftware = new List<Juegos.Juego>();

	protected override void OnInitialized()
	{
		idioma = Contexto.HttpContext.Request.Headers["Accept-Language"].ToString().Split(";").FirstOrDefault()?.Split(",").FirstOrDefault();
		usuarioId = Contexto.HttpContext.User.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value;
		userAgent = Contexto.HttpContext.Request.Headers.UserAgent.ToString();

		if (string.IsNullOrEmpty(usuarioId) == false)
		{
			idioma = BaseDatos.Usuarios.Buscar.IdiomaSobreescribir(usuarioId);
			juegosUsuario ??= Herramientas.UsuarioJuegos.Cargar(usuarioId);
			deseadosUsuario ??= BaseDatos.Usuarios.Buscar.DeseadosTiene(usuarioId);
			usuarioPatreon = Herramientas.Patreon.VerificarActivo(BaseDatos.Usuarios.Buscar.FechaPatreon(usuarioId));
		}

		if (string.IsNullOrEmpty(slug) == false)
		{
			curator ??= BaseDatos.Curators.Buscar.Uno(slug);
		}
	}

	protected override async Task OnAfterRenderAsync(bool primerRender)
	{
		if (primerRender == true && curator != null)
		{
			if (curator.IdSteam > 0)
			{
				if (string.IsNullOrEmpty(curator.ImagenFondo) == true)
				{
					SteamCuratorAPIVanidad api = await APIs.Steam.Curator.ExtraerVanidad(curator.IdSteam.ToString());

					if (api != null)
					{
						if (string.IsNullOrEmpty(api.Imagen) == false)
						{
							BaseDatos.Curators.Actualizar.ImagenFondo(api.Imagen, curator.IdSteam);
							curator.ImagenFondo = api.Imagen;
						}
					}
				}

				if (curator.Fecha == null)
				{
					global::BaseDatos.Curators.Actualizar.Ejecutar(curator);
				}
				else
				{
					if (curator.Fecha?.Subtract(DateTime.Now) > TimeSpan.FromDays(90))
					{
						global::BaseDatos.Curators.Actualizar.Ejecutar(curator);
					}
				}

				juegosCurator ??= global::BaseDatos.Juegos.Buscar.MultiplesJuegosSteam(curator.SteamIds);

				if (juegosCurator.Count > 0)
				{
					foreach (var juegoCurator in juegosCurator)
					{
						if (juegoCurator.Tipo == Juegos.JuegoTipo.Game)
						{
							if (juegosDestacados.Count < 6)
							{
								juegosDestacados.Add(juegoCurator);
							}

							juegosCuratorJuegos.Add(juegoCurator);
						}
						else if (juegoCurator.Tipo == Juegos.JuegoTipo.DLC)
						{
							juegosCuratorDLCs.Add(juegoCurator);
						}
						else if (juegoCurator.Tipo == Juegos.JuegoTipo.Music)
						{
							juegosCuratorBandasSonoras.Add(juegoCurator);
						}
						else if (juegoCurator.Tipo == Juegos.JuegoTipo.Software)
						{
							juegosCuratorSoftware.Add(juegoCurator);
						}
					}

					if (juegosCuratorJuegos.Count > 0)
					{
						juegosCuratorMostrar = juegosCuratorJuegos;
						filtrado = 1;
					}
					else if (juegosCuratorDLCs.Count > 0)
					{
						juegosCuratorMostrar = juegosCuratorDLCs;
						filtrado = 2;
					}
					else if (juegosCuratorBandasSonoras.Count > 0)
					{
						juegosCuratorMostrar = juegosCuratorBandasSonoras;
						filtrado = 3;
					}
					else if (juegosCuratorSoftware.Count > 0)
					{
						juegosCuratorMostrar = juegosCuratorSoftware;
						filtrado = 4;
					}
				}
			}

			await InvokeAsync(StateHasChanged);
		}
	}

	private void MostrarListado(MouseEventArgs e, List<Juegos.Juego> juegos, int nuevoFiltrado)
	{
		if (nuevoFiltrado != filtrado)
		{
			juegosCuratorMostrar = juegos;
			filtrado = nuevoFiltrado;
		}
		else
		{
			juegosCuratorMostrar = juegosCurator;
			filtrado = 0;
		}
	}
}
