@page "/free/"

@using APIs.Steam
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.VisualBasic
@using pepeizqs_deals_blazor_web.Componentes.Interfaz
@using pepeizqs_deals_web.Data

@inject IHttpContextAccessor Contexto

@{
    string titulo = Herramientas.Idiomas.BuscarTexto(idioma, "Title", "Free") + " • pepeizq's deals";
    string descripcion = Herramientas.Idiomas.BuscarTexto(idioma, "String11", "Free");
    string enlace = "https://pepeizqdeals.com/free/";
    string imagen = "https://pepeizqdeals.com/logo/logoentrada.webp";
    string keywords = "free";

    if (juegosActuales.Count > 0)
    {
        juegosActuales = juegosActuales.OrderBy(x => x.Nombre).ToList();

        int juegos = 0;
        int dlcs = 0;

        foreach (var juego in juegosActuales)
        {
            if (juego != null)
            {
                if (juego.Juego != null)
                {
                    if (juego.Juego.Tipo == Juegos.JuegoTipo.Game)
                    {
                        juegos += 1;
                    }
                    else if (juego.Juego.Tipo == Juegos.JuegoTipo.DLC)
                    {
                        dlcs += 1;
                    }
                }

                string[] keywordsEnBruto = Herramientas.Buscador.LimpiarNombre(juego.Nombre + " " + Gratis2.GratisCargar.DevolverGratis(juego.Tipo).Nombre, false).Split(' ');
                List<string> keywordsLista = new List<string>();
                keywordsLista.AddRange(keywordsEnBruto);

                foreach (var keyword in keywordsLista)
                {
                    if (keywords.Contains(keyword) == false && keyword.Length > 3)
                    {
                        keywords = keywords + ", " + keyword;
                    }
                }
            }
        }

        if (juegos == 0)
        {
            if (dlcs == 1)
            {
                titulo = string.Format(Herramientas.Idiomas.BuscarTexto(idioma, "String6", "Free"), dlcs.ToString()) + " " + Herramientas.Idiomas.BuscarTexto(idioma, "String8", "Free");
            }
            else if (dlcs > 1)
            {
                titulo = string.Format(Herramientas.Idiomas.BuscarTexto(idioma, "String7", "Free"), dlcs.ToString()) + " " + Herramientas.Idiomas.BuscarTexto(idioma, "String9", "Free");
            }
        }
        else if (juegos > 0)
        {
            if (juegos == 1 && dlcs == 0)
            {
                titulo = string.Format(Herramientas.Idiomas.BuscarTexto(idioma, "String3", "Free"), juegos.ToString()) + " " + Herramientas.Idiomas.BuscarTexto(idioma, "String8", "Free");
            }
            else if (juegos > 1 && dlcs == 0)
            {
                titulo = string.Format(Herramientas.Idiomas.BuscarTexto(idioma, "String4", "Free"), juegos.ToString()) + " " + Herramientas.Idiomas.BuscarTexto(idioma, "String9", "Free");
            }
            else if (juegos == 1 && dlcs == 1)
            {
                titulo = string.Format(Herramientas.Idiomas.BuscarTexto(idioma, "String3", "Free"), juegos.ToString()) + " " +
                    Herramientas.Idiomas.BuscarTexto(idioma, "String5", "Free") + " " +
                    string.Format(Herramientas.Idiomas.BuscarTexto(idioma, "String6", "Free"), dlcs.ToString()) + " " +
                    Herramientas.Idiomas.BuscarTexto(idioma, "String9", "Free");
            }
            else if (juegos > 1 && dlcs == 1)
            {
                titulo = string.Format(Herramientas.Idiomas.BuscarTexto(idioma, "String4", "Free"), juegos.ToString()) + " " +
                    Herramientas.Idiomas.BuscarTexto(idioma, "String5", "Free") + " " +
                    string.Format(Herramientas.Idiomas.BuscarTexto(idioma, "String6", "Free"), dlcs.ToString()) + " " +
                    Herramientas.Idiomas.BuscarTexto(idioma, "String9", "Free");
            }
            else if (juegos == 1 && dlcs > 1)
            {
                titulo = string.Format(Herramientas.Idiomas.BuscarTexto(idioma, "String3", "Free"), juegos.ToString()) + " " +
                    Herramientas.Idiomas.BuscarTexto(idioma, "String5", "Free") + " " +
                    string.Format(Herramientas.Idiomas.BuscarTexto(idioma, "String7", "Free"), dlcs.ToString()) + " " +
                    Herramientas.Idiomas.BuscarTexto(idioma, "String9", "Free");
            }
            else if (juegos > 1 && dlcs > 1)
            {
                titulo = string.Format(Herramientas.Idiomas.BuscarTexto(idioma, "String4", "Free"), juegos.ToString()) + " " +
                    Herramientas.Idiomas.BuscarTexto(idioma, "String5", "Free") + " " +
                    string.Format(Herramientas.Idiomas.BuscarTexto(idioma, "String7", "Free"), dlcs.ToString()) + " " +
                    Herramientas.Idiomas.BuscarTexto(idioma, "String9", "Free");
            }
        }

        if (string.IsNullOrEmpty(titulo) == true)
        {
            titulo = Herramientas.Idiomas.BuscarTexto(idioma, "String10", "Free");
        }
    }

    <HeadContent>
        <PageTitle>@titulo</PageTitle>

        <meta name="og:title" Content="@titulo" />
        <meta name="description" content="@descripcion" />
        <meta name="og:description" content="@descripcion" />
        <meta name="og:url" content="@enlace" />
        <meta name="og:image" content="@imagen" />
        <meta name="og:site_name" content="pepeizq's deals" />
        <meta name="og:type" content="website" />
        <meta name="robots" content="index, follow" />
        <meta name="keywords" content="@keywords" />

        <script type="application/ld+json">
			@{
				string seoJson = "{" + Environment.NewLine +
					Strings.ChrW(34) + "@context" + Strings.ChrW(34) + ":" + Strings.ChrW(34) + "https://schema.org" + Strings.ChrW(34) + "," + Environment.NewLine +
					Strings.ChrW(34) + "@type" + Strings.ChrW(34) + ":" + Strings.ChrW(34) + "ItemList" + Strings.ChrW(34) + "," + Environment.NewLine +
					Strings.ChrW(34) + "name" + Strings.ChrW(34) + ":" + Strings.ChrW(34) + "Free PC Games and DLCs to claim" + Strings.ChrW(34) + "," + Environment.NewLine +
					Strings.ChrW(34) + "numberOfItems" + Strings.ChrW(34) + ":" + Strings.ChrW(34) + juegosActuales.Count.ToString() + Strings.ChrW(34) + "," + Environment.NewLine +
					Strings.ChrW(34) + "itemListOrder" + Strings.ChrW(34) + ":" + Strings.ChrW(34) + "Descending" + Strings.ChrW(34) + "," + Environment.NewLine +
					Strings.ChrW(34) + "itemListElement" + Strings.ChrW(34) + ": [";

				int i = 0;
                    while (i < juegosActuales.Count)
				{
					if (i != 0)
					{
						seoJson = seoJson + ",";
					}

					seoJson = seoJson + "{" + Environment.NewLine +
						Strings.ChrW(34) + "@type" + Strings.ChrW(34) + ":" + Strings.ChrW(34) + "ListItem" + Strings.ChrW(34) + "," + Environment.NewLine +
						Strings.ChrW(34) + "position" + Strings.ChrW(34) + ":" + Strings.ChrW(34) + (i + 1).ToString() + Strings.ChrW(34) + "," + Environment.NewLine +
						Strings.ChrW(34) + "name" + Strings.ChrW(34) + ":" + Strings.ChrW(34) + juegosActuales[i].Nombre + Strings.ChrW(34) + "," + Environment.NewLine +
						Strings.ChrW(34) + "url" + Strings.ChrW(34) + ":" + Strings.ChrW(34) + "https://pepeizqdeals.com/game/" + juegosActuales[i].JuegoId.ToString() + "/" + Herramientas.EnlaceAdaptador.Nombre(juegosActuales[i].Nombre) + "/" + Strings.ChrW(34) + "," + Environment.NewLine +
						Strings.ChrW(34) + "image" + Strings.ChrW(34) + ":" + Strings.ChrW(34) + juegosActuales[i].Imagen + Strings.ChrW(34) + "}";

					i += 1;
				}

				seoJson = seoJson + "]" + Environment.NewLine + "}";
			}

			@((MarkupString)seoJson)
		</script>

        <link rel="canonical" href="@enlace" />
    </HeadContent>
}

<script>
    function moverScroll(id) {
        const yOffset = -90;
        const element = document.getElementById(id);
        const y = element.getBoundingClientRect().top + window.pageYOffset + yOffset;

        window.scrollTo({ top: y, behavior: 'smooth' });
    }
</script>

<style>
    .caja-archivo-contenido {
        background-color: var(--fondoSubsubcabecera);
        border: 2px solid var(--fondoSubcabecera);
        padding: 40px;
        box-shadow: 0px 4px 8px 0px rgba(0, 0, 0, 0.28),0px 0px 2px 0px rgba(0, 0, 0, 0.24);
    }
</style>

<div class="subcabecera">
    <div class="cuerpo-ancho sub-subcabecera">
        <button class="boton-pequeño" style="@CambiarEstilo(Gratis2.GratisTipo.Desconocido, false) width: fit-content; padding: 8px 20px; border-radius: 5px;" @onclick="@(e => CambiarTipo(e, Gratis2.GratisTipo.Desconocido, false))">
            <h1 style="font-size: 18px; margin: 0px;">
                @Herramientas.Idiomas.BuscarTexto(idioma, "Title", "Free")
            </h1>
        </button>

        @if (tiposActuales.Count > 0 && mostrarArchivo == false)
        {
            foreach (var tipo in tiposActuales)
            {
                if (tipo != Gratis2.GratisTipo.Desconocido)
                {
                    <button class="boton-pequeño" style="@CambiarEstilo(tipo, false) width: fit-content; padding: 8px 20px; border-radius: 5px;" @onclick="@(e => CambiarTipo(e, tipo, false))" title="@Gratis2.GratisCargar.DevolverGratis(tipo).Nombre">
                        <img src="@Herramientas.Ficheros.Imagenes.ServidorExterno(Gratis2.GratisCargar.DevolverGratis(tipo).ImagenIcono)" style="width: 20px; height: 20px;" alt="Store" />
                    </button>
                }
            }
        }

        <div style="margin-left: auto; display: flex; justify-content: right;">
            <button class="boton-pequeño" style="@CambiarEstilo(Gratis2.GratisTipo.Desconocido, true) width: fit-content; padding: 8px 20px; border-radius: 5px;" @onclick="@(e => CambiarTipo(e, Gratis2.GratisTipo.Desconocido, true))">
                <div style="font-size: 16px;">
                    @Herramientas.Idiomas.BuscarTexto(idioma, "String2", "Free")
                </div>
            </button>
        </div>
    </div>
</div>

@if (mostrarArchivo == false)
{
    <div class="caja-archivo-contenido" style="display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); justify-items: center; gap: 30px; padding: 30px; margin: 40px 0px;">
        @foreach (var juego in juegosActuales)
        {
            string enlaceGratis = Herramientas.EnlaceAcortador.Generar(juego.Enlace, juego.Tipo, usuarioPatreon);

            <CajaJuego enlaceGratis="@enlaceGratis" drmGratis="@juego.DRM" tipoGratis="@juego.Tipo" idioma="@idioma" juego="@juego.Juego" juegosUsuario="@juegosUsuario" usuarioDeseadosSteam="@deseadosUsuario?.SteamWishlist" usuarioDeseadosWeb="@deseadosUsuario?.Wishlist" usuarioDeseadosGog="@deseadosUsuario?.GogWishlist" tipo="CajaJuego.Tipo.Gratis"/> 
        }
    </div>
}
else
{
    <div style="display: flex; align-items: start; gap: 15px; margin: 40px 0px 20px 0px; flex-wrap: wrap;">
        @foreach (var año in años)
        {
            <div>
                <button @onclick="@(e => CambiarAño(e, año))" class="boton-pequeño" style="padding: 6px 10px; width: auto;">
                    @año
                </button>

                @if (añoSeleccionado == año)
                {
                    <div style="margin-top: 10px; background: var(--colorTexto); padding: 1px;" />

                    <div style="position: absolute; margin-top: 15px; display: flex; align-items: center;">
                        @foreach (var gratisPasado in gratisPasados)
                        {
                            List<Juegos.JuegoGratis> gratisAño = new List<Juegos.JuegoGratis>();

                            foreach (var juego in gratisPasado.Juegos)
                            {
                                if (juego.FechaEmpieza.Year.ToString() == añoSeleccionado)
                                {
                                    gratisAño.Add(juego);
                                }
                            }

                            if (gratisAño.Count > 0)
                            {
                                <div style="margin-right: 15px; font-size: 14px;">
                                    <a onclick="moverScroll('pasado-@gratisPasado.Tipo.Nombre')" style="color: var(--colorTexto); text-decoration: none; cursor: pointer;">
                                        <img src="@gratisPasado.Tipo.ImagenIcono" style="width: 22px; height: 22px;" alt="Store" /> (@gratisAño.Count.ToString())
                                    </a>
                                </div>
                            }
                        }
                    </div>
                }
            </div>
        }
    </div>

    @if (string.IsNullOrEmpty(añoSeleccionado) == false)
    {
        <div style="display: flex; flex-direction: column; gap: 40px; margin: 55px auto 40px auto;">
            @foreach (var gratisPasado in gratisPasados)
            {
                List<Juegos.JuegoGratis> gratisAño = new List<Juegos.JuegoGratis>();

                foreach (var juego in gratisPasado.Juegos)
                {
                    if (juego.FechaEmpieza.Year.ToString() == añoSeleccionado)
                    {
                        gratisAño.Add(juego);
                    }
                }

                if (gratisAño.Count > 0)
                {
                    <div class="caja-archivo-contenido">
                        <div id="pasado-@gratisPasado.Tipo.Nombre" style="max-width: 200px;">
                            <img src="@gratisPasado.Tipo.ImagenLogo" alt="Store" style="width: 100%; max-height: 70px; object-fit: contain;" />
                        </div>

                        <hr>

                        <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 30px; justify-content: flex-start;">
                            @{
                                int i = 1;
                                while (i < 13)
                                {
                                    List<Juegos.JuegoGratis> gratisMensual = new List<Juegos.JuegoGratis>();

                                    foreach (var juego in gratisAño)
                                    {
                                        if (juego.FechaEmpieza.Month == i)
                                        {
                                            gratisMensual.Add(juego);
                                        }
                                    }

                                    if (gratisMensual.Count > 0)
                                    {
                                        <div>
                                            <label>@Herramientas.Idiomas.BuscarTexto(idioma, "Month." + i.ToString(), "Months") (@gratisMensual.Count.ToString())</label>

                                            <ul>
                                                @foreach (var juegoMensual in gratisMensual)
                                                {
                                                    <li style="margin-bottom: 5px;">
                                                        <a href="/game/@juegoMensual.JuegoId/@Herramientas.EnlaceAdaptador.Nombre(juegoMensual.Nombre)/">
                                                            <label style="cursor: pointer;">@juegoMensual.Nombre</label>

                                                            @if (gratisPasado.Tipo.DRMEnseñar == true)
                                                            {
                                                                <label style="cursor: pointer; margin-left: 5px;">(@Juegos.JuegoDRM2.DevolverDRM(juegoMensual.DRM))</label>
                                                            }
                                                        </a>
                                                    </li>
                                                }
                                            </ul>
                                        </div>
                                    }

                                    i += 1;
                                }
                            }
                        </div>
                    </div>
                }
            }
        </div>
    }
}

@code {

    #nullable disable

    private string idioma = "en";
    private string usuarioId = null;

    private Herramientas.UsuarioListadosJuegos juegosUsuario = null;
    private Usuario deseadosUsuario = null;
    private bool usuarioPatreon = false;

    private List<Juegos.JuegoGratis> juegosActuales = new List<Juegos.JuegoGratis>();
    private List<Gratis2.GratisComponente> gratisPasados = new List<Gratis2.GratisComponente>();

    private List<string> años = new List<string>();
    private string añoSeleccionado = string.Empty;

    protected override void OnInitialized()
    {
        idioma = Contexto.HttpContext.Request.Headers["Accept-Language"].ToString().Split(";").FirstOrDefault()?.Split(",").FirstOrDefault();
        usuarioId = Contexto.HttpContext.User.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value;

        if (string.IsNullOrEmpty(usuarioId) == false)
        {
            idioma = BaseDatos.Usuarios.Buscar.IdiomaSobreescribir(usuarioId);
            juegosUsuario = Herramientas.UsuarioJuegos.Cargar(usuarioId);
            deseadosUsuario = BaseDatos.Usuarios.Buscar.DeseadosTiene(usuarioId);
            usuarioPatreon = Herramientas.Patreon.VerificarActivo(BaseDatos.Usuarios.Buscar.FechaPatreon(usuarioId));
        }

        //--------------------------------------------------------------------

        DateTime arranque = new DateTime(2011, 1, 1);

        int i = 0;
        while (i < 100)
        {
            if (arranque.Year != DateTime.Now.Year)
            {
                años.Add(arranque.Year.ToString());
                arranque = arranque.AddYears(1);
            }
            i += 1;
        }

        años.Add(DateTime.Now.Year.ToString());
        años.Reverse();

        //--------------------------------------------------------------------

        juegosActuales = BaseDatos.Gratis.Buscar.Actuales();

        if (juegosActuales.Count > 0)
        {
            foreach (var juegoActual in juegosActuales)
            {
                Juegos.Juego juego2 = BaseDatos.Juegos.Buscar.UnJuego(juegoActual.JuegoId.ToString());
                juegoActual.Imagen = juego2.Imagenes.Header_460x215;
                juegoActual.Juego = juego2;

                bool añadirTipo = true;

                if (tiposActuales.Count > 0)
                {
                    foreach (var tipoActual in tiposActuales)
                    {
                        if (tipoActual == juegoActual.Tipo)
                        {
                            añadirTipo = false;
                        }
                    }
                }

                if (añadirTipo == true)
                {
                    tiposActuales.Add(juegoActual.Tipo);
                }
            }
        }

        if (tiposActuales.Count > 0)
        {
            tiposActuales = tiposActuales.OrderBy(x => (int)x).ToList();
        }
    }

    private Gratis2.GratisTipo tipoSeleccionado = Gratis2.GratisTipo.Desconocido;
    private List<Gratis2.GratisTipo> tiposActuales = new List<Gratis2.GratisTipo>();
    private bool mostrarArchivo = false;

    private void CambiarTipo(MouseEventArgs e, Gratis2.GratisTipo nuevoTipo, bool esArchivo)
    {
        mostrarArchivo = esArchivo;

        if (esArchivo == false)
        {
            tipoSeleccionado = nuevoTipo;
            juegosActuales = BaseDatos.Gratis.Buscar.Actuales(nuevoTipo);

            if (juegosActuales.Count > 0)
            {
                foreach (var juegoActual in juegosActuales)
                {
                    Juegos.Juego juego2 = BaseDatos.Juegos.Buscar.UnJuego(juegoActual.JuegoId.ToString());
                    juegoActual.Imagen = juego2.Imagenes.Header_460x215;
                    juegoActual.Juego = juego2;
                }
            }
        }
        else
        {
            añoSeleccionado = DateTime.Now.Year.ToString();
            GenerarArchivo();
        }
    }

    private string CambiarEstilo(Gratis2.GratisTipo nuevoTipo, bool esArchivo)
    {
        if (mostrarArchivo == true && esArchivo == true)
        {
            if (nuevoTipo != Gratis2.GratisTipo.Desconocido)
            {
                return "background-color: transparent;";
            }
            else
            {
                return "background-color: var(--botonSubcabecera);";
            }
        }
        else
        {
            if (tipoSeleccionado == nuevoTipo && mostrarArchivo == false && esArchivo == false)
            {
                return "background-color: var(--botonSubcabecera);";
            }
            else
            {
                return "background-color: transparent;";
            }
        }
    }

    #region Archivo

    private void CambiarAño(MouseEventArgs e, string nuevoAño)
    {
        añoSeleccionado = nuevoAño;
        GenerarArchivo();
    }

    private void GenerarArchivo()
    {
        List<Juegos.JuegoGratis> juegosPasados = BaseDatos.Gratis.Buscar.Año(añoSeleccionado);

        if (juegosPasados.Count > 0)
        {
            gratisPasados.Clear();

            foreach (var gratis in Gratis2.GratisCargar.GenerarListado())
            {
                List<Juegos.JuegoGratis> juegos2 = new List<Juegos.JuegoGratis>();

                foreach (var juego in juegosPasados)
                {
                    if (juego.Tipo == gratis.Tipo)
                    {
                        juegos2.Add(juego);
                    }
                }

                if (juegos2.Count > 0)
                {
                    Gratis2.GratisComponente componente = new Gratis2.GratisComponente();
                    componente.Juegos = juegos2;
                    componente.Tipo = gratis;

                    gratisPasados.Add(componente);
                }
            }
        }
    }

    #endregion
}
