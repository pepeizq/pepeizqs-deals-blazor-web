@page "/historical-lows/"

@using APIs.Steam
@using BaseDatos.Juegos
@using Juegos
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components.Web.Virtualization
@using Microsoft.AspNetCore.Identity
@using Microsoft.Data.SqlClient
@using Microsoft.JSInterop
@using pepeizqs_deals_web.Data
@using pepeizqs_deals_blazor_web.Componentes.Interfaz
@using System.Text.Json
@using Tiendas2

@inject IHttpContextAccessor Contexto
@inject IJSRuntime JavaScript

<Titulo tipo="@Titulo.Tipo.Minimos" idioma="@idioma"/>

<script>
	window.ChangeUrl = function (url) {
		history.pushState(null, '', url);
	}
</script>

<style>
	.cargando {
		width: 48px;
		height: 48px;
		border: 5px solid var(--colorTexto);
		border-bottom-color: transparent;
		border-radius: 50%;
		display: inline-block;
		box-sizing: border-box;
		animation: rotation 1s linear infinite;
	}

	@@keyframes rotation {
	0% {
	transform: rotate(0deg);
	}

	100% {
	transform: rotate(360deg);
	}
	}
</style>

@if (cargado == false)
{
	<div style="min-height: 200px; display: flex; align-items: center; justify-content: space-around;">
		<div class="cargando" />
	</div>
}
else
{
	<div class="subcabecera">
		<div class="cuerpo-ancho sub-subcabecera">
			<h1 style="font-size: 18px; margin: 0px; width: fit-content; padding: 9px 0px;">
                @Herramientas.Idiomas.BuscarTexto(idioma, "String1", "HistoricalLows") (@juegosFiltrados.Count().ToString())
			</h1>

			@if (Herramientas.Bots.UserAgentEsBot(userAgent) == false)
			{
				<div style="margin-left: auto; display: flex; justify-content: right; align-items: center; gap: 20px;">
					<div class="menu-dropdown" style="width: auto; margin: 0px 20px;">
						<button class="boton-pequeño" style="background-color: var(--buscadorSubcabecera); display: flex; align-items: center; width: 100%; padding: 8px 15px; margin: 0; border: 0px; color: var(--colorTextoVisitado);">
							<div style="font-size: 14px; padding-right: 5px;">
								@Herramientas.Idiomas.BuscarTexto(idioma, "String2", "HistoricalLows"):
							</div>

							<div style="font-size: 14px; color: var(--colorEnlace); padding-right: 15px;">
								@ordenamientoElegido
							</div>

							<div style="max-width: 9px;">
								<svg class="svg-icono" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512">
									<path d="M137.4 374.6c12.5 12.5 32.8 12.5 45.3 0l128-128c9.2-9.2 11.9-22.9 6.9-34.9s-16.6-19.8-29.6-19.8L32 192c-12.9 0-24.6 7.8-29.6 19.8s-2.2 25.7 6.9 34.9l128 128z" />
								</svg>
							</div>
						</button>

						<div class="menu-dropdown-contenido" style="right: 0; width: 100%; background-color: var(--buscadorSubcabecera);">
							<button class="texto-cabecera menu-dropdown-item" style="font-size: 14px; text-align: left; width: 100%; border: 0px;" @onclick="(e => OrdenarReseñasPorcentaje(true))">
								@Herramientas.Idiomas.BuscarTexto(idioma, "String3", "HistoricalLows")
							</button>
							<button class="texto-cabecera menu-dropdown-item" style="font-size: 14px; text-align: left; width: 100%; border: 0px;" @onclick="(e => OrdenarReseñasCantidad(true))">
								@Herramientas.Idiomas.BuscarTexto(idioma, "String4", "HistoricalLows")
							</button>
							<hr />
							<button class="texto-cabecera menu-dropdown-item" style="font-size: 14px; text-align: left; width: 100%; border: 0px;" @onclick="(e => OrdenarNombreAZ(true))">
								@Herramientas.Idiomas.BuscarTexto(idioma, "String5", "HistoricalLows")
							</button>
							<button class="texto-cabecera menu-dropdown-item" style="font-size: 14px; text-align: left; width: 100%; border: 0px;" @onclick="(e => OrdenarNombreZA(true))">
								@Herramientas.Idiomas.BuscarTexto(idioma, "String6", "HistoricalLows")
							</button>
							<button class="texto-cabecera menu-dropdown-item" style="font-size: 14px; text-align: left; width: 100%; border: 0px;" @onclick="(e => OrdenarPrecio(true))">
								@Herramientas.Idiomas.BuscarTexto(idioma, "String7", "HistoricalLows")
							</button>
							<button class="texto-cabecera menu-dropdown-item" style="font-size: 14px; text-align: left; width: 100%; border: 0px;" @onclick="(e => OrdenarDescuento(true))">
								@Herramientas.Idiomas.BuscarTexto(idioma, "String8", "HistoricalLows")
							</button>
							<hr />
							<button class="texto-cabecera menu-dropdown-item" style="font-size: 14px; text-align: left; width: 100%; border: 0px;" @onclick="(e => OrdenarFechaDetectado(true))">
								@Herramientas.Idiomas.BuscarTexto(idioma, "String34", "HistoricalLows")
							</button>
							<button class="texto-cabecera menu-dropdown-item" style="font-size: 14px; text-align: left; width: 100%; border: 0px;" @onclick="(e => OrdenarFechaLanzamiento(true))">
								@Herramientas.Idiomas.BuscarTexto(idioma, "String35", "HistoricalLows")
							</button>
						</div>
					</div>

					<div style="background-color: var(--buscadorSubcabecera); padding-right: 10px; display: flex; align-items: center; gap: 10px;">
						<input type="text" @bind-value="textoBuscador" @bind-value:event="oninput" @bind-value:after="TextoCambiaBuscador" class="entrada-texto" style="background-color: transparent; min-width: 50%; font-size: 14px; padding: 8px 10px;" placeholder="@Herramientas.Idiomas.BuscarTexto(idioma, "String9", "HistoricalLows")" />

						<div style="max-width: 16px;">
							<svg class="svg-icono" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">
								<path d="M416 208c0 45.9-14.9 88.3-40 122.7L502.6 457.4c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L330.7 376c-34.4 25.2-76.8 40-122.7 40C93.1 416 0 322.9 0 208S93.1 0 208 0S416 93.1 416 208zM208 352a144 144 0 1 0 0-288 144 144 0 1 0 0 288z" />
							</svg>
						</div>
					</div>
				</div>
			}		
		</div>
	</div>
	
	@if (Herramientas.Bots.UserAgentEsBot(userAgent) == false)
	{
		<div class="subcabecera" style="background-color: var(--fondoSubsubcabecera);">
			<div class="cuerpo-ancho" style="padding: 20px 0px;">
				<div style="display: flex; align-items: center; gap: 15px; flex-flow: wrap;">
					@if (string.IsNullOrEmpty(usuarioId) == false)
					{
						<button class="boton-pequeño" @onclick="OpcionesOcultar" style="font-size: 14px; width: fit-content; padding: 6px 10px; border: 0px; color: var(--colorTextoVisitado);">
							<div style="display: flex; align-items: center; gap: 10px;">
								@Herramientas.Idiomas.BuscarTexto(idioma, "String11", "HistoricalLows")

								@if (enseñarOcultar == false)
								{
									<div style="max-width: 9px;">
										<svg class="svg-icono" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512">
											<path d="M137.4 374.6c12.5 12.5 32.8 12.5 45.3 0l128-128c9.2-9.2 11.9-22.9 6.9-34.9s-16.6-19.8-29.6-19.8L32 192c-12.9 0-24.6 7.8-29.6 19.8s-2.2 25.7 6.9 34.9l128 128z" />
										</svg>
									</div>
								}
								else
								{
									<div style="max-width: 9px;">
										<svg class="svg-icono" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512">
											<path d="M182.6 137.4c-12.5-12.5-32.8-12.5-45.3 0l-128 128c-9.2 9.2-11.9 22.9-6.9 34.9s16.6 19.8 29.6 19.8l256 0c12.9 0 24.6-7.8 29.6-19.8s2.2-25.7-6.9-34.9l-128-128z" />
										</svg>
									</div>
								}
							</div>
						</button>
					}

					<button class="boton-pequeño" @onclick="OpcionesDescuentoMinimo" style="font-size: 14px; width: fit-content; padding: 6px 10px; border: 0px; color: var(--colorTextoVisitado);">
						<div style="display: flex; align-items: center; gap: 10px;">
							@Herramientas.Idiomas.BuscarTexto(idioma, "String12", "HistoricalLows") (@minimoDescuento.ToString()%)

							@if (enseñarDescuentoMinimo == false)
							{
								<div style="max-width: 9px;">
									<svg class="svg-icono" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512">
										<path d="M137.4 374.6c12.5 12.5 32.8 12.5 45.3 0l128-128c9.2-9.2 11.9-22.9 6.9-34.9s-16.6-19.8-29.6-19.8L32 192c-12.9 0-24.6 7.8-29.6 19.8s-2.2 25.7 6.9 34.9l128 128z" />
									</svg>
								</div>
							}
							else
							{
								<div style="max-width: 9px;">
									<svg class="svg-icono" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512">
										<path d="M182.6 137.4c-12.5-12.5-32.8-12.5-45.3 0l-128 128c-9.2 9.2-11.9 22.9-6.9 34.9s16.6 19.8 29.6 19.8l256 0c12.9 0 24.6-7.8 29.6-19.8s2.2-25.7-6.9-34.9l-128-128z" />
									</svg>
								</div>
							}
						</div>
					</button>

					<button class="boton-pequeño" @onclick="OpcionesPrecioMaximo" style="font-size: 14px; width: fit-content; padding: 6px 10px; border: 0px; color: var(--colorTextoVisitado);">
						<div style="display: flex; align-items: center; gap: 10px;">
							@Herramientas.Idiomas.BuscarTexto(idioma, "String13", "HistoricalLows") (@maximoPrecio.ToString()€)

							@if (enseñarPrecioMaximo == false)
							{
								<div style="max-width: 9px;">
									<svg class="svg-icono" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512">
										<path d="M137.4 374.6c12.5 12.5 32.8 12.5 45.3 0l128-128c9.2-9.2 11.9-22.9 6.9-34.9s-16.6-19.8-29.6-19.8L32 192c-12.9 0-24.6 7.8-29.6 19.8s-2.2 25.7 6.9 34.9l128 128z" />
									</svg>
								</div>
							}
							else
							{
								<div style="max-width: 9px;">
									<svg class="svg-icono" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512">
										<path d="M182.6 137.4c-12.5-12.5-32.8-12.5-45.3 0l-128 128c-9.2 9.2-11.9 22.9-6.9 34.9s16.6 19.8 29.6 19.8l256 0c12.9 0 24.6-7.8 29.6-19.8s2.2-25.7-6.9-34.9l-128-128z" />
									</svg>
								</div>
							}
						</div>
					</button>

					<button class="boton-pequeño" @onclick="OpcionesDRMs" style="font-size: 14px; width: fit-content; padding: 6px 10px; border: 0px; color: var(--colorTextoVisitado);">
						<div style="display: flex; align-items: center; gap: 10px;">
							@{
								int contadorDRMs = 0;

								foreach (var drm in drmsListado)
								{
									if (drm.Estado == true)
									{
										contadorDRMs += 1;
									}
								}
							}

							@Herramientas.Idiomas.BuscarTexto(idioma, "String14", "HistoricalLows") (@contadorDRMs.ToString())

							@if (enseñarDRMs == false)
							{
								<div style="max-width: 9px;">
									<svg class="svg-icono" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512">
										<path d="M137.4 374.6c12.5 12.5 32.8 12.5 45.3 0l128-128c9.2-9.2 11.9-22.9 6.9-34.9s-16.6-19.8-29.6-19.8L32 192c-12.9 0-24.6 7.8-29.6 19.8s-2.2 25.7 6.9 34.9l128 128z" />
									</svg>
								</div>
							}
							else
							{
								<div style="max-width: 9px;">
									<svg class="svg-icono" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512">
										<path d="M182.6 137.4c-12.5-12.5-32.8-12.5-45.3 0l-128 128c-9.2 9.2-11.9 22.9-6.9 34.9s16.6 19.8 29.6 19.8l256 0c12.9 0 24.6-7.8 29.6-19.8s2.2-25.7-6.9-34.9l-128-128z" />
									</svg>
								</div>
							}
						</div>
					</button>

					<button class="boton-pequeño" @onclick="OpcionesTiendas" style="font-size: 14px; width: fit-content; padding: 6px 10px; border: 0px; color: var(--colorTextoVisitado);">
						<div style="display: flex; align-items: center; gap: 10px;">
							@{
								int contadorTiendas = 0;

								foreach (var tienda in tiendas)
								{
									if (tienda.Estado == true)
									{
										contadorTiendas += 1;
									}
								}
							}

							@Herramientas.Idiomas.BuscarTexto(idioma, "String15", "HistoricalLows") (@contadorTiendas.ToString())

							@if (enseñarTiendas == false)
							{
								<div style="max-width: 9px;">
									<svg class="svg-icono" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512">
										<path d="M137.4 374.6c12.5 12.5 32.8 12.5 45.3 0l128-128c9.2-9.2 11.9-22.9 6.9-34.9s-16.6-19.8-29.6-19.8L32 192c-12.9 0-24.6 7.8-29.6 19.8s-2.2 25.7 6.9 34.9l128 128z" />
									</svg>
								</div>
							}
							else
							{
								<div style="max-width: 9px;">
									<svg class="svg-icono" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512">
										<path d="M182.6 137.4c-12.5-12.5-32.8-12.5-45.3 0l-128 128c-9.2 9.2-11.9 22.9-6.9 34.9s16.6 19.8 29.6 19.8l256 0c12.9 0 24.6-7.8 29.6-19.8s2.2-25.7-6.9-34.9l-128-128z" />
									</svg>
								</div>
							}
						</div>
					</button>

					<button class="boton-pequeño" @onclick="OpcionesMinimoReseñas" style="font-size: 14px; width: fit-content; padding: 6px 10px; border: 0px; color: var(--colorTextoVisitado);">
						<div style="display: flex; align-items: center; gap: 10px;">
							@Herramientas.Idiomas.BuscarTexto(idioma, "String40", "HistoricalLows") (@minimoReseñas.ToString())

							@if (enseñarMinimoReseñas == false)
							{
								<div style="max-width: 9px;">
									<svg class="svg-icono" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512">
										<path d="M137.4 374.6c12.5 12.5 32.8 12.5 45.3 0l128-128c9.2-9.2 11.9-22.9 6.9-34.9s-16.6-19.8-29.6-19.8L32 192c-12.9 0-24.6 7.8-29.6 19.8s-2.2 25.7 6.9 34.9l128 128z" />
									</svg>
								</div>
							}
							else
							{
								<div style="max-width: 9px;">
									<svg class="svg-icono" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512">
										<path d="M182.6 137.4c-12.5-12.5-32.8-12.5-45.3 0l-128 128c-9.2 9.2-11.9 22.9-6.9 34.9s16.6 19.8 29.6 19.8l256 0c12.9 0 24.6-7.8 29.6-19.8s2.2-25.7-6.9-34.9l-128-128z" />
									</svg>
								</div>
							}
						</div>
					</button>

					<button class="boton-pequeño" @onclick="OpcionesCategorias" style="font-size: 14px; width: fit-content; padding: 6px 10px; border: 0px; color: var(--colorTextoVisitado);">
						<div style="display: flex; align-items: center; gap: 10px;">
							@{
								int contadorCategorias = 0;

								foreach (var categoria in categorias)
								{
									if (categoria.Estado == true)
									{
										contadorCategorias += 1;
									}
								}
							}

							@Herramientas.Idiomas.BuscarTexto(idioma, "String17", "HistoricalLows") (@contadorCategorias.ToString())

							@if (enseñarCategorias == false)
							{
								<div style="max-width: 9px;">
									<svg class="svg-icono" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512">
										<path d="M137.4 374.6c12.5 12.5 32.8 12.5 45.3 0l128-128c9.2-9.2 11.9-22.9 6.9-34.9s-16.6-19.8-29.6-19.8L32 192c-12.9 0-24.6 7.8-29.6 19.8s-2.2 25.7 6.9 34.9l128 128z" />
									</svg>
								</div>
							}
							else
							{
								<div style="max-width: 9px;">
									<svg class="svg-icono" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512">
										<path d="M182.6 137.4c-12.5-12.5-32.8-12.5-45.3 0l-128 128c-9.2 9.2-11.9 22.9-6.9 34.9s16.6 19.8 29.6 19.8l256 0c12.9 0 24.6-7.8 29.6-19.8s2.2-25.7-6.9-34.9l-128-128z" />
									</svg>
								</div>
							}
						</div>
					</button>

					<button class="boton-pequeño" @onclick="OpcionesSteamDeck" style="font-size: 14px; width: fit-content; padding: 6px 10px; border: 0px; color: var(--colorTextoVisitado);">
						<div style="display: flex; align-items: center; gap: 10px;">
							@{
								int contadorDeck = 0;

								foreach (var deck2 in deckListado)
								{
									if (deck2.Estado == true)
									{
										contadorDeck += 1;
									}
								}
							}

							@Herramientas.Idiomas.BuscarTexto(idioma, "String24", "HistoricalLows") (@contadorDeck.ToString())

							@if (enseñarSteamDeck == false)
							{
								<div style="max-width: 9px;">
									<svg class="svg-icono" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512">
										<path d="M137.4 374.6c12.5 12.5 32.8 12.5 45.3 0l128-128c9.2-9.2 11.9-22.9 6.9-34.9s-16.6-19.8-29.6-19.8L32 192c-12.9 0-24.6 7.8-29.6 19.8s-2.2 25.7 6.9 34.9l128 128z" />
									</svg>
								</div>
							}
							else
							{
								<div style="max-width: 9px;">
									<svg class="svg-icono" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512">
										<path d="M182.6 137.4c-12.5-12.5-32.8-12.5-45.3 0l-128 128c-9.2 9.2-11.9 22.9-6.9 34.9s16.6 19.8 29.6 19.8l256 0c12.9 0 24.6-7.8 29.6-19.8s2.2-25.7-6.9-34.9l-128-128z" />
									</svg>
								</div>
							}
						</div>
					</button>

					<button class="boton-pequeño" @onclick="OpcionesLanzamiento" style="font-size: 14px; width: fit-content; padding: 6px 10px; border: 0px; color: var(--colorTextoVisitado);">
						<div style="display: flex; align-items: center; gap: 10px;">
							@{
								string lanzamientoElegidoTexto = string.Empty;

								if (lanzamientoElegido == 0)
								{
									lanzamientoElegidoTexto = Herramientas.Idiomas.BuscarTexto(idioma, "String30", "HistoricalLows");
								}
								else if (lanzamientoElegido == 1)
								{
									lanzamientoElegidoTexto = Herramientas.Idiomas.BuscarTexto(idioma, "String31", "HistoricalLows");
								}
								else if (lanzamientoElegido == 2)
								{
									lanzamientoElegidoTexto = Herramientas.Idiomas.BuscarTexto(idioma, "String32", "HistoricalLows");
								}
								else if (lanzamientoElegido == 3)
								{
									lanzamientoElegidoTexto = Herramientas.Idiomas.BuscarTexto(idioma, "String33", "HistoricalLows");
								}
							}

							@Herramientas.Idiomas.BuscarTexto(idioma, "String29", "HistoricalLows") (@lanzamientoElegidoTexto)

							@if (enseñarLanzamiento == false)
							{
								<div style="max-width: 9px;">
									<svg class="svg-icono" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512">
										<path d="M137.4 374.6c12.5 12.5 32.8 12.5 45.3 0l128-128c9.2-9.2 11.9-22.9 6.9-34.9s-16.6-19.8-29.6-19.8L32 192c-12.9 0-24.6 7.8-29.6 19.8s-2.2 25.7 6.9 34.9l128 128z" />
									</svg>
								</div>
							}
							else
							{
								<div style="max-width: 9px;">
									<svg class="svg-icono" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512">
										<path d="M182.6 137.4c-12.5-12.5-32.8-12.5-45.3 0l-128 128c-9.2 9.2-11.9 22.9-6.9 34.9s16.6 19.8 29.6 19.8l256 0c12.9 0 24.6-7.8 29.6-19.8s2.2-25.7-6.9-34.9l-128-128z" />
									</svg>
								</div>
							}
						</div>
					</button>

					<button class="boton-pequeño" @onclick="OpcionesInteligenciaArtificial" style="font-size: 14px; width: fit-content; padding: 6px 10px; border: 0px; color: var(--colorTextoVisitado);">
						<div style="display: flex; align-items: center; gap: 10px;">
							@{
								string inteligenciaArtificialElegidaTexto = string.Empty;

								if (inteligenciaArtificialElegida == 0)
								{
									inteligenciaArtificialElegidaTexto = Herramientas.Idiomas.BuscarTexto(idioma, "String37", "HistoricalLows");
								}
								else if (inteligenciaArtificialElegida == 1)
								{
									inteligenciaArtificialElegidaTexto = Herramientas.Idiomas.BuscarTexto(idioma, "String38", "HistoricalLows");
								}
								else if (inteligenciaArtificialElegida == 2)
								{
									inteligenciaArtificialElegidaTexto = Herramientas.Idiomas.BuscarTexto(idioma, "String39", "HistoricalLows");
								}
							}

							@Herramientas.Idiomas.BuscarTexto(idioma, "String36", "HistoricalLows") (@inteligenciaArtificialElegidaTexto)

							@if (enseñarLanzamiento == false)
							{
								<div style="max-width: 9px;">
									<svg class="svg-icono" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512">
										<path d="M137.4 374.6c12.5 12.5 32.8 12.5 45.3 0l128-128c9.2-9.2 11.9-22.9 6.9-34.9s-16.6-19.8-29.6-19.8L32 192c-12.9 0-24.6 7.8-29.6 19.8s-2.2 25.7 6.9 34.9l128 128z" />
									</svg>
								</div>
							}
							else
							{
								<div style="max-width: 9px;">
									<svg class="svg-icono" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512">
										<path d="M182.6 137.4c-12.5-12.5-32.8-12.5-45.3 0l-128 128c-9.2 9.2-11.9 22.9-6.9 34.9s16.6 19.8 29.6 19.8l256 0c12.9 0 24.6-7.8 29.6-19.8s2.2-25.7-6.9-34.9l-128-128z" />
									</svg>
								</div>
							}
						</div>
					</button>
				</div>

				@if (enseñarOcultar == true)
				{
					<div style="background-color: var(--fondoMinimo); border: 1px solid var(--fondoBotonPequeño); border-radius: 5px; padding: 20px; margin-top: 20px; display: grid; grid-template-columns: repeat(auto-fill, minmax(200px, 1fr)); gap: 20px; width: 100%;">
						<div style="display: flex; align-items: center; gap: 20px;">
							<div class="checkbox-caja">
								<input type="checkbox" class="checkbox-interior" checked="@ocultarJuegosUsuarioSteam" @onchange="OcultarJuegosUsuarioSteam">
							</div>

							<div style="padding-bottom: 5px;">
								Steam
							</div>
						</div>

						<div style="display: flex; align-items: center; gap: 20px;">
							<div class="checkbox-caja">
								<input type="checkbox" class="checkbox-interior" checked="@ocultarJuegosUsuarioGog" @onchange="OcultarJuegosUsuarioGog">
							</div>

							<div style="padding-bottom: 5px;">
								GOG
							</div>
						</div>
					</div>
				}

				@if (enseñarDescuentoMinimo == true)
				{
					<div style="background-color: var(--fondoMinimo); border: 1px solid var(--fondoBotonPequeño); border-radius: 5px; padding: 20px; margin-top: 20px;">
						<div style="display: flex; align-items: center; gap: 30px;">
							<input type="range" min="1" max="91" value="@minimoDescuento" step="5" @onchange="@(e => CambiarMinimoDescuento(e))" class="deslizador">

							<label style="min-width: 65px; text-align: center;">@minimoDescuento%</label>
						</div>
					</div>
				}

				@if (enseñarPrecioMaximo == true)
				{
					<div style="background-color: var(--fondoMinimo); border: 1px solid var(--fondoBotonPequeño); border-radius: 5px; padding: 20px; margin-top: 20px;">
						<div style="display: flex; align-items: center; gap: 30px;">
							<input type="range" min="5" max="90" value="@maximoPrecio" step="1" @onchange="@(e => CambiarMaximoPrecio(e))" class="deslizador">

							<label style="min-width: 65px; text-align: center;">@maximoPrecio€</label>
						</div>
					</div>
				}

				@if (enseñarDRMs == true)
				{
					<div style="background-color: var(--fondoMinimo); border: 1px solid var(--fondoBotonPequeño); border-radius: 5px; padding: 20px; margin-top: 20px;">
						<div style="display: grid; grid-template-columns: repeat(auto-fill, minmax(100px, 1fr)); gap: 20px;">
							@foreach (var drm in drmsListado)
							{
								string iconoDRM = string.Empty;
								string nombreDRM = string.Empty;

								foreach (var drm2 in JuegoDRM2.GenerarListado())
								{
									if (drm2.Id == drm.DRMId)
									{
										iconoDRM = drm2.Imagen;
										nombreDRM = drm2.Nombre;
									}
								}

								<div style="display: flex; align-items: center;" title="@nombreDRM">
									<div class="checkbox-caja">
										<input type="checkbox" class="checkbox-interior" checked="@drm.Checkbox" @onchange="@(e => EnseñarJuegosDRM(e, drm.DRMId))">
									</div>

									@if (drm.DRMId != JuegoDRM.DRMFree)
									{
										<div style="margin-left: 20px; padding-bottom: 10px;">
											<img src="@iconoDRM" style="max-width: 24px; max-height: 24px;" title="@nombreDRM" />
										</div>
									}
									else
									{
										<div style="margin-left: 20px; padding-bottom: 5px;">
											<label style="font-size: 10px; max-width: 24px; text-align: center;">@nombreDRM</label>
										</div>
									}
								</div>
							}
						</div>
					</div>
				}

				@if (enseñarTiendas == true)
				{
					<div style="background-color: var(--fondoMinimo); border: 1px solid var(--fondoBotonPequeño); border-radius: 5px; padding: 20px; margin-top: 20px;">
						<div style="display: grid; grid-template-columns: repeat(auto-fill, minmax(100px, 1fr)); gap: 20px;">
							@foreach (var tienda in tiendas)
							{
								string iconoTienda = string.Empty;
								string nombreTienda = string.Empty;

								foreach (var tienda2 in Tiendas2.TiendasCargar.GenerarListado())
								{
									if (tienda2.Id == tienda.TiendaId)
									{
										iconoTienda = tienda2.ImagenIcono;
										nombreTienda = tienda2.Nombre;
									}
								}

								<div style="display: flex; align-items: center; gap: 20px;" title="@nombreTienda">
									<div class="checkbox-caja">
										<input type="checkbox" class="checkbox-interior" checked="@tienda.Checkbox" @onchange="@(e => EnseñarJuegosTienda(e, tienda.TiendaId))">
									</div>

									<div style="padding-bottom: 10px;">
										<img src="@iconoTienda" style="width: 24px; height: 24px;" title="@nombreTienda" />
									</div>
								</div>
							}
						</div>
					</div>
				}

				@if (enseñarMinimoReseñas == true)
				{
					<div style="background-color: var(--fondoMinimo); border: 1px solid var(--fondoBotonPequeño); border-radius: 5px; padding: 20px; margin-top: 20px;">
						<div style="display: flex; align-items: center; gap: 30px;">
							<input type="range" min="0" max="10000" value="@minimoReseñas" step="1" @onchange="@(e => CambiarMinimoReseñas(e))" class="deslizador">

							<label style="min-width: 65px; text-align: center;">@minimoReseñas</label>
						</div>
					</div>
				}

				@if (enseñarCategorias == true)
				{
					<div style="background-color: var(--fondoMinimo); border: 1px solid var(--fondoBotonPequeño); border-radius: 5px; padding: 20px; margin-top: 20px;">
						<div style="display: grid; grid-template-columns: repeat(auto-fill, minmax(150px, 1fr)); gap: 20px;">
							@foreach (var categoria in categorias)
							{
								string nombreCategoria = string.Empty;

								if (categoria.Categoria == JuegoTipo.Game)
								{
									nombreCategoria = Herramientas.Idiomas.BuscarTexto(idioma, "String18", "HistoricalLows");
								}
								else if (categoria.Categoria == JuegoTipo.DLC)
								{
									nombreCategoria = Herramientas.Idiomas.BuscarTexto(idioma, "String19", "HistoricalLows");
								}
								else if (categoria.Categoria == JuegoTipo.Music)
								{
									nombreCategoria = Herramientas.Idiomas.BuscarTexto(idioma, "String20", "HistoricalLows");
								}
								else if (categoria.Categoria == JuegoTipo.Software)
								{
									nombreCategoria = Herramientas.Idiomas.BuscarTexto(idioma, "String21", "HistoricalLows");
								}

								<div style="display: flex; align-items: center;" title="@nombreCategoria">
									<div class="checkbox-caja">
										<input type="checkbox" class="checkbox-interior" checked="@categoria.Checkbox" @onchange="@(e => EnseñarJuegosCategoria(e, categoria.Categoria))">
									</div>

									<div style="margin-left: 15px; padding-bottom: 8px;">
										<label style="font-size: 14px;">@nombreCategoria</label>
									</div>
								</div>
							}
						</div>
					</div>
				}

				@if (enseñarSteamDeck == true)
				{
					<div style="background-color: var(--fondoMinimo); border: 1px solid var(--fondoBotonPequeño); border-radius: 5px; padding: 20px; margin-top: 20px;">
						<div style="display: grid; grid-template-columns: repeat(auto-fill, minmax(150px, 1fr)); gap: 20px;">
							@foreach (var steamdeck in deckListado)
							{
								string nombreTipo = string.Empty;

								if (steamdeck.Tipo == JuegoDeck.Verificado)
								{
									nombreTipo = Herramientas.Idiomas.BuscarTexto(idioma, "String25", "HistoricalLows");
								}
								else if (steamdeck.Tipo == JuegoDeck.Jugable)
								{
									nombreTipo = Herramientas.Idiomas.BuscarTexto(idioma, "String26", "HistoricalLows");
								}
								else if (steamdeck.Tipo == JuegoDeck.NoSoportado)
								{
									nombreTipo = Herramientas.Idiomas.BuscarTexto(idioma, "String27", "HistoricalLows");
								}
								else if (steamdeck.Tipo == JuegoDeck.Desconocido)
								{
									nombreTipo = Herramientas.Idiomas.BuscarTexto(idioma, "String28", "HistoricalLows");
								}

								<div style="display: flex; align-items: center;" title="@nombreTipo">
									<div class="checkbox-caja">
										<input type="checkbox" class="checkbox-interior" checked="@steamdeck.Checkbox" @onchange="@(e => EnseñarJuegosSteamDeck(e, steamdeck.Tipo))">
									</div>

									<div style="margin-left: 15px; padding-bottom: 8px;">
										<label style="font-size: 14px;">@nombreTipo</label>
									</div>
								</div>
							}
						</div>
					</div>
				}

				@if (enseñarLanzamiento == true)
				{
					<div style="background-color: var(--fondoMinimo); border: 1px solid var(--fondoBotonPequeño); border-radius: 5px; padding: 20px; margin-top: 20px;">
						<div style="display: grid; grid-template-columns: repeat(auto-fill, minmax(150px, 1fr)); gap: 20px;">
							<div style="display: flex; align-items: center;" title="@Herramientas.Idiomas.BuscarTexto(idioma, "String30", "HistoricalLows")">
								<div class="checkbox-caja">
									<input type="checkbox" class="checkbox-interior" checked="@lanzamientoChecked0" @onchange="@(e => CambiarLanzamiento(e, 0))">
								</div>

								<div style="margin-left: 15px; padding-bottom: 8px;">
									<label style="font-size: 14px;">@Herramientas.Idiomas.BuscarTexto(idioma, "String30", "HistoricalLows")</label>
								</div>
							</div>

							<div style="display: flex; align-items: center;" title="@Herramientas.Idiomas.BuscarTexto(idioma, "String31", "HistoricalLows")">
								<div class="checkbox-caja">
									<input type="checkbox" class="checkbox-interior" checked="@lanzamientoChecked1" @onchange="@(e => CambiarLanzamiento(e, 1))">
								</div>

								<div style="margin-left: 15px; padding-bottom: 8px;">
									<label style="font-size: 14px;">@Herramientas.Idiomas.BuscarTexto(idioma, "String31", "HistoricalLows")</label>
								</div>
							</div>

							<div style="display: flex; align-items: center;" title="@Herramientas.Idiomas.BuscarTexto(idioma, "String32", "HistoricalLows")">
								<div class="checkbox-caja">
									<input type="checkbox" class="checkbox-interior" checked="@lanzamientoChecked2" @onchange="@(e => CambiarLanzamiento(e, 2))">
								</div>

								<div style="margin-left: 15px; padding-bottom: 8px;">
									<label style="font-size: 14px;">@Herramientas.Idiomas.BuscarTexto(idioma, "String32", "HistoricalLows")</label>
								</div>
							</div>

							<div style="display: flex; align-items: center;" title="@Herramientas.Idiomas.BuscarTexto(idioma, "String33", "HistoricalLows")">
								<div class="checkbox-caja">
									<input type="checkbox" class="checkbox-interior" checked="@lanzamientoChecked3" @onchange="@(e => CambiarLanzamiento(e, 3))">
								</div>

								<div style="margin-left: 15px; padding-bottom: 8px;">
									<label style="font-size: 14px;">@Herramientas.Idiomas.BuscarTexto(idioma, "String33", "HistoricalLows")</label>
								</div>
							</div>
						</div>
					</div>
				}

				@if (enseñarInteligenciaArtificial == true)
				{
					<div style="background-color: var(--fondoMinimo); border: 1px solid var(--fondoBotonPequeño); border-radius: 5px; padding: 20px; margin-top: 20px;">
						<div style="display: grid; grid-template-columns: repeat(auto-fill, minmax(150px, 1fr)); gap: 20px;">
							<div style="display: flex; align-items: center;" title="@Herramientas.Idiomas.BuscarTexto(idioma, "String37", "HistoricalLows")">
								<div class="checkbox-caja">
									<input type="checkbox" class="checkbox-interior" checked="@inteligenciaArtificialChecked0" @onchange="@(e => CambiarInteligenciaArtificial(e, 0))">
								</div>

								<div style="margin-left: 15px; padding-bottom: 8px;">
									<label style="font-size: 14px;">@Herramientas.Idiomas.BuscarTexto(idioma, "String37", "HistoricalLows")</label>
								</div>
							</div>

							<div style="display: flex; align-items: center;" title="@Herramientas.Idiomas.BuscarTexto(idioma, "String38", "HistoricalLows")">
								<div class="checkbox-caja">
									<input type="checkbox" class="checkbox-interior" checked="@inteligenciaArtificialChecked1" @onchange="@(e => CambiarInteligenciaArtificial(e, 1))">
								</div>

								<div style="margin-left: 15px; padding-bottom: 8px;">
									<label style="font-size: 14px;">@Herramientas.Idiomas.BuscarTexto(idioma, "String38", "HistoricalLows")</label>
								</div>
							</div>

							<div style="display: flex; align-items: center;" title="@Herramientas.Idiomas.BuscarTexto(idioma, "String39", "HistoricalLows")">
								<div class="checkbox-caja">
									<input type="checkbox" class="checkbox-interior" checked="@inteligenciaArtificialChecked2" @onchange="@(e => CambiarInteligenciaArtificial(e, 2))">
								</div>

								<div style="margin-left: 15px; padding-bottom: 8px;">
									<label style="font-size: 14px;">@Herramientas.Idiomas.BuscarTexto(idioma, "String39", "HistoricalLows")</label>
								</div>
							</div>
						</div>
					</div>
				}
			</div>
		</div>
	}	
	
	<div style="max-width: 1000px; margin: 40px auto;">
		@if (juegosFiltrados.Count > 0)
		{
			<div style="display: flex; flex-direction: column; gap: 25px; margin-top: -15px;">
				<Virtualize Context="juego" Items="@juegosFiltrados" ItemSize="107" OverscanCount="5">
					<ItemContent>
						<CajaJuego idioma="@idioma" juego="@juego" juegosUsuario="@juegosUsuario" usuarioDeseadosSteam="@deseadosUsuario?.SteamWishlist" usuarioDeseadosWeb="@deseadosUsuario?.Wishlist" usuarioDeseadosGog="@deseadosUsuario?.GogWishlist" tipo="CajaJuego.Tipo.MinimosHistoricos" usuarioPatreon="@usuarioPatreon" userAgent="@userAgent"/>
					</ItemContent>
				</Virtualize>
			</div>
		}
	</div>
}

@code {

	#nullable disable

	private string idioma = "en";
	private string usuarioId = null;
	private string userAgent = null;

	[PersistentState] public Herramientas.UsuarioListadosJuegos juegosUsuario { get; set; }
	[PersistentState] public Usuario deseadosUsuario { get; set; }
	private bool usuarioPatreon = false;
	[PersistentState] public Usuario opcionesMinimos { get; set; }

	[SupplyParameterFromQuery]
	private string DRMs { get; set; }

	[SupplyParameterFromQuery]
	private string Stores { get; set; }

	[SupplyParameterFromQuery]
	private string Categories { get; set; }

	[SupplyParameterFromQuery]
	private string MinDiscount { get; set; }

	[SupplyParameterFromQuery]
	private string MaxPrice { get; set; }

	[SupplyParameterFromQuery]
	private string Deck { get; set; }

	[SupplyParameterFromQuery]
	private string Release { get; set; }

	[SupplyParameterFromQuery]
	private string AI { get; set; }

	[SupplyParameterFromQuery]
	private string MinReviews { get; set; }

	private List<Juegos.Juego> juegosGestor = new List<Juegos.Juego>();
	private List<Juegos.Juego> juegosFiltrados = new List<Juegos.Juego>();

	private string ordenamientoElegido = string.Empty;

	private string textoBuscador { get; set; }

	private bool cargado = false;

	protected override void OnInitialized()
	{
		Herramientas.ContextoUsuarioDatos datos = Herramientas.ContextoUsuario.Leer(Contexto);
		idioma = datos.Idioma;
		usuarioId = datos.UsuarioId;
		userAgent = datos.UserAgent;

		if (string.IsNullOrEmpty(usuarioId) == false)
		{
			idioma = BaseDatos.Usuarios.Buscar.IdiomaSobreescribir(usuarioId);
			juegosUsuario ??= Herramientas.UsuarioJuegos.Cargar(usuarioId);
			deseadosUsuario ??= BaseDatos.Usuarios.Buscar.DeseadosTiene(usuarioId);
			usuarioPatreon = Herramientas.Patreon.VerificarActivo(BaseDatos.Usuarios.Buscar.FechaPatreon(usuarioId));
			opcionesMinimos ??= BaseDatos.Usuarios.Buscar.OpcionesMinimos(usuarioId);

			if (opcionesMinimos != null)
			{
				#region Filtrado

				if (opcionesMinimos.HistoricalLowsSort != null)
				{
					opcionesMinimos.HistoricalLowsSort = 1;
				}

				if (opcionesMinimos.HistoricalLowsOption1 == true)
				{
					ocultarJuegosUsuarioSteam = "checked";
				}
				else
				{
					ocultarJuegosUsuarioSteam = null;
				}

				if (opcionesMinimos.HistoricalLowsOption4 == true)
				{
					ocultarJuegosUsuarioGog = "checked";
				}
				else
				{
					ocultarJuegosUsuarioGog = null;
				}

				if (opcionesMinimos.HistoricalLowsOption2 == null)
				{
					minimoDescuento = 1;
				}
				else
				{
					if (opcionesMinimos.HistoricalLowsOption2 == 0 || opcionesMinimos.HistoricalLowsOption2 == null)
					{
						minimoDescuento = 1;
					}
					else if (opcionesMinimos.HistoricalLowsOption2 > 0)
					{
						minimoDescuento = opcionesMinimos.HistoricalLowsOption2;
					}
				}

				if (opcionesMinimos.HistoricalLowsOption3 == null)
				{
					maximoPrecio = 90;
				}
				else
				{
					if (opcionesMinimos.HistoricalLowsOption3 == 0 || opcionesMinimos.HistoricalLowsOption3 == null)
					{
						maximoPrecio = 90;
					}
					else if (opcionesMinimos.HistoricalLowsOption3 > 0)
					{
						maximoPrecio = opcionesMinimos.HistoricalLowsOption3;
					}
				}

				if (string.IsNullOrEmpty(opcionesMinimos.HistoricalLowsDRMs) == false)
				{
					drmsListado = JsonSerializer.Deserialize<List<MostrarJuegoDRM>>(opcionesMinimos.HistoricalLowsDRMs);
				}

				if (string.IsNullOrEmpty(opcionesMinimos.HistoricalLowsStores) == false)
				{
					tiendas = JsonSerializer.Deserialize<List<MostrarJuegoTienda>>(opcionesMinimos.HistoricalLowsStores);
					tiendas = GenerarListaTiendas(tiendas);
				}

				if (string.IsNullOrEmpty(opcionesMinimos.HistoricalLowsCategories) == false)
				{
					categorias = JsonSerializer.Deserialize<List<MostrarJuegoCategoria>>(opcionesMinimos.HistoricalLowsCategories);
				}

				if (string.IsNullOrEmpty(opcionesMinimos.HistoricalLowsSteamDeck) == false)
				{
					deckListado = JsonSerializer.Deserialize<List<MostrarJuegoSteamDeck>>(opcionesMinimos.HistoricalLowsSteamDeck);
				}

				if (opcionesMinimos.HistoricalLowsRelease == null)
				{
					lanzamientoElegido = 0;
				}
				else
				{
					lanzamientoElegido = (int)opcionesMinimos.HistoricalLowsRelease;
				}

				if (lanzamientoElegido == 0)
				{
					lanzamientoChecked0 = "checked";
					lanzamientoChecked1 = null;
					lanzamientoChecked2 = null;
					lanzamientoChecked3 = null;
				}
				else if (lanzamientoElegido == 1)
				{
					lanzamientoChecked0 = null;
					lanzamientoChecked1 = "checked";
					lanzamientoChecked2 = null;
					lanzamientoChecked3 = null;
				}
				else if (lanzamientoElegido == 2)
				{
					lanzamientoChecked0 = null;
					lanzamientoChecked1 = null;
					lanzamientoChecked2 = "checked";
					lanzamientoChecked3 = null;
				}
				else if (lanzamientoElegido == 3)
				{
					lanzamientoChecked0 = null;
					lanzamientoChecked1 = null;
					lanzamientoChecked2 = null;
					lanzamientoChecked3 = "checked";
				}

				if (opcionesMinimos.HistoricalLowsAI == null)
				{
					inteligenciaArtificialElegida = 0;
				}
				else
				{
					inteligenciaArtificialElegida = (int)opcionesMinimos.HistoricalLowsAI;
				}

				if (inteligenciaArtificialElegida == 0)
				{
					inteligenciaArtificialChecked0 = "checked";
					inteligenciaArtificialChecked1 = null;
					inteligenciaArtificialChecked2 = null;
				}
				else if (inteligenciaArtificialElegida == 1)
				{
					inteligenciaArtificialChecked0 = null;
					inteligenciaArtificialChecked1 = "checked";
					inteligenciaArtificialChecked2 = null;
				}
				else if (inteligenciaArtificialElegida == 2)
				{
					inteligenciaArtificialChecked0 = null;
					inteligenciaArtificialChecked1 = null;
					inteligenciaArtificialChecked2 = "checked";
				}

				if (opcionesMinimos.HistoricalLowsReviews == null)
				{
					minimoReseñas = 0;
				}
				else
				{
					minimoReseñas = opcionesMinimos.HistoricalLowsReviews;
				}

				#endregion
			}
		}

		if (string.IsNullOrEmpty(DRMs) == false)
		{
			foreach (var drm in drmsListado)
			{
				drm.Checkbox = null;
				drm.Estado = false;
			}

			List<string> drmsEnlace = DRMs.Split(',').ToList();

			foreach (var drmEnlace in drmsEnlace)
			{
				foreach (var drm in drmsListado)
				{
					if (drm.DRMId.ToString() == drmEnlace)
					{
						drm.Estado = true;
						drm.Checkbox = "checked";
						break;
					}
				}
			}
		}

		if (string.IsNullOrEmpty(Stores) == false)
		{
			foreach (var tienda in tiendas)
			{
				tienda.Checkbox = null;
				tienda.Estado = false;
			}

			List<string> tiendasEnlace = Stores.Split(',').ToList();

			foreach (var tiendaEnlace in tiendasEnlace)
			{
				foreach (var tienda in tiendas)
				{
					if (tienda.TiendaId == tiendaEnlace)
					{
						tienda.Estado = true;
						tienda.Checkbox = "checked";
						break;
					}
				}
			}

			tiendas = GenerarListaTiendas(tiendas);
		}

		if (string.IsNullOrEmpty(Categories) == false)
		{
			foreach (var categoria in categorias)
			{
				categoria.Checkbox = null;
				categoria.Estado = false;
			}

			List<string> categoriasEnlace = Categories.Split(',').ToList();

			foreach (var categoriaEnlace in categoriasEnlace)
			{
				foreach (var categoria in categorias)
				{
					if (categoria.Categoria.ToString() == categoriaEnlace)
					{
						categoria.Estado = true;
						categoria.Checkbox = "checked";
						break;
					}
				}
			}
		}

		if (string.IsNullOrEmpty(MinDiscount) == false)
		{
			if (int.TryParse(MinDiscount, out int descuento))
			{
				minimoDescuento = descuento;
			}
			else
			{
				minimoDescuento = 1;
			}
		}

		if (string.IsNullOrEmpty(MaxPrice) == false)
		{
			if (int.TryParse(MaxPrice, out int precio))
			{
				maximoPrecio = precio;
			}
			else
			{
				maximoPrecio = 90;
			}
		}

		if (string.IsNullOrEmpty(Deck) == false)
		{
			foreach (var deck in deckListado)
			{
				deck.Checkbox = null;
				deck.Estado = false;
			}

			List<string> decksEnlace = Deck.Split(',').ToList();

			foreach (var deckEnlace in decksEnlace)
			{
				foreach (var deck in deckListado)
				{
					if (((int)deck.Tipo).ToString() == deckEnlace)
					{
						deck.Estado = true;
						deck.Checkbox = "checked";
						break;
					}
				}
			}
		}

		if (string.IsNullOrEmpty(Release) == false)
		{
			if (int.TryParse(Release, out int lanzamiento))
			{
				lanzamientoElegido = lanzamiento;

				if (lanzamientoElegido == 0)
				{
					lanzamientoChecked0 = "checked";
					lanzamientoChecked1 = null;
					lanzamientoChecked2 = null;
					lanzamientoChecked3 = null;
				}
				else if (lanzamientoElegido == 1)
				{
					lanzamientoChecked0 = null;
					lanzamientoChecked1 = "checked";
					lanzamientoChecked2 = null;
					lanzamientoChecked3 = null;
				}
				else if (lanzamientoElegido == 2)
				{
					lanzamientoChecked0 = null;
					lanzamientoChecked1 = null;
					lanzamientoChecked2 = "checked";
					lanzamientoChecked3 = null;
				}
				else if (lanzamientoElegido == 3)
				{
					lanzamientoChecked0 = null;
					lanzamientoChecked1 = null;
					lanzamientoChecked2 = null;
					lanzamientoChecked3 = "checked";
				}
			}
			else
			{
				lanzamientoElegido = 0;

				lanzamientoChecked0 = "checked";
				lanzamientoChecked1 = null;
				lanzamientoChecked2 = null;
				lanzamientoChecked3 = null;
			}
		}

		if (string.IsNullOrEmpty(AI) == false)
		{
			if (int.TryParse(AI, out int inteligencia))
			{
				inteligenciaArtificialElegida = inteligencia;

				if (inteligenciaArtificialElegida == 0)
				{
					inteligenciaArtificialChecked0 = "checked";
					inteligenciaArtificialChecked1 = null;
					inteligenciaArtificialChecked2 = null;
				}
				else if (inteligenciaArtificialElegida == 1)
				{
					inteligenciaArtificialChecked0 = null;
					inteligenciaArtificialChecked1 = "checked";
					inteligenciaArtificialChecked2 = null;
				}
				else if (inteligenciaArtificialElegida == 2)
				{
					inteligenciaArtificialChecked0 = null;
					inteligenciaArtificialChecked1 = null;
					inteligenciaArtificialChecked2 = "checked";
				}
			}
			else
			{
				inteligenciaArtificialElegida = 0;

				inteligenciaArtificialChecked0 = "checked";
				inteligenciaArtificialChecked1 = null;
				inteligenciaArtificialChecked2 = null;
			}
		}

		if (string.IsNullOrEmpty(MinReviews) == false)
		{
			if (int.TryParse(MinReviews, out int reseñas))
			{
				minimoReseñas = reseñas;
			}
			else
			{
				minimoReseñas = 0;
			}
		}

		if (string.IsNullOrEmpty(usuarioId) == false)
		{
			opcionesMinimos ??= BaseDatos.Usuarios.Buscar.OpcionesMinimos(usuarioId);
		}
	}

	protected override async Task OnAfterRenderAsync(bool primerRender)
	{
		if (primerRender == true)
		{
			await CambiarEnlace();

			cargado = false;

			if (opcionesMinimos == null)
			{
				OrdenarReseñasCantidad(true);
			}
			else
			{
				if (opcionesMinimos.HistoricalLowsSort == null)
				{
					opcionesMinimos.HistoricalLowsSort = 1;
				}

				if (opcionesMinimos.HistoricalLowsSort == 0)
				{
					OrdenarReseñasPorcentaje(true);
				}
				else if (opcionesMinimos.HistoricalLowsSort == 1)
				{
					OrdenarReseñasCantidad(true);
				}
				else if (opcionesMinimos.HistoricalLowsSort == 2)
				{
					OrdenarNombreAZ(true);
				}
				else if (opcionesMinimos.HistoricalLowsSort == 3)
				{
					OrdenarNombreZA(true);
				}
				else if (opcionesMinimos.HistoricalLowsSort == 4)
				{
					OrdenarPrecio(true);
				}
				else if (opcionesMinimos.HistoricalLowsSort == 5)
				{
					OrdenarDescuento(true);
				}
				else if (opcionesMinimos.HistoricalLowsSort == 6)
				{
					OrdenarFechaDetectado(true);
				}
			}

			cargado = true;
			await InvokeAsync(StateHasChanged);
		}
	}

	#region Ordenar

	private void OrdenarReseñasPorcentaje(bool buscar = true)
	{
		ordenamientoElegido = Herramientas.Idiomas.BuscarTexto(idioma, "String3", "HistoricalLows");

		if (buscar == true)
		{
			juegosGestor = BaseDatos.Juegos.Buscar.Minimos(null, 1, tiendas, drmsListado, categorias, minimoDescuento, maximoPrecio, deckListado, lanzamientoElegido, inteligenciaArtificialElegida, minimoReseñas);

			if (juegosGestor.Count > 0)
			{
				juegosFiltrados = Filtros(juegosGestor);
			}
		}
		else
		{
			juegosFiltrados = Filtros(juegosGestor);
		}

		if (opcionesMinimos != null)
		{
			opcionesMinimos.HistoricalLowsSort = 0;

			if (string.IsNullOrEmpty(usuarioId) == false)
			{
				BaseDatos.Usuarios.Actualizar.Opcion("HistoricalLowsSort", 0, usuarioId);
			}
		}
	}

	private void OrdenarReseñasCantidad(bool buscar = true)
	{
		ordenamientoElegido = Herramientas.Idiomas.BuscarTexto(idioma, "String4", "HistoricalLows");

		if (buscar == true)
		{
			juegosGestor = BaseDatos.Juegos.Buscar.Minimos(null, 0, tiendas, drmsListado, categorias, minimoDescuento, maximoPrecio, deckListado, lanzamientoElegido, inteligenciaArtificialElegida, minimoReseñas);

			if (juegosGestor.Count > 0)
			{
				juegosFiltrados = Filtros(juegosGestor);
			}
		}
		else
		{
			juegosFiltrados = Filtros(juegosGestor);
		}

		if (opcionesMinimos != null)
		{
			opcionesMinimos.HistoricalLowsSort = 1;

			if (string.IsNullOrEmpty(usuarioId) == false)
			{
				BaseDatos.Usuarios.Actualizar.Opcion("HistoricalLowsSort", 1, usuarioId);
			}
		}
	}

	private void OrdenarNombreAZ(bool buscar = true)
	{
		ordenamientoElegido = Herramientas.Idiomas.BuscarTexto(idioma, "String5", "HistoricalLows");

		if (buscar == true)
		{
			juegosGestor = BaseDatos.Juegos.Buscar.Minimos(null, 2, tiendas, drmsListado, categorias, minimoDescuento, maximoPrecio, deckListado, lanzamientoElegido, inteligenciaArtificialElegida, minimoReseñas);

			if (juegosGestor.Count > 0)
			{
				juegosFiltrados = Filtros(juegosGestor);
			}
		}
		else
		{
			juegosFiltrados = Filtros(juegosGestor);
		}

		if (opcionesMinimos != null)
		{
			opcionesMinimos.HistoricalLowsSort = 2;

			if (string.IsNullOrEmpty(usuarioId) == false)
			{
				BaseDatos.Usuarios.Actualizar.Opcion("HistoricalLowsSort", 2, usuarioId);
			}
		}
	}

	private void OrdenarNombreZA(bool buscar = true)
	{
		ordenamientoElegido = Herramientas.Idiomas.BuscarTexto(idioma, "String6", "HistoricalLows");

		if (buscar == true)
		{
			juegosGestor = BaseDatos.Juegos.Buscar.Minimos(null, 3, tiendas, drmsListado, categorias, minimoDescuento, maximoPrecio, deckListado, lanzamientoElegido, inteligenciaArtificialElegida, minimoReseñas);

			if (juegosGestor.Count > 0)
			{
				juegosFiltrados = Filtros(juegosGestor);
			}
		}
		else
		{
			juegosFiltrados = Filtros(juegosGestor);
		}

		if (opcionesMinimos != null)
		{
			opcionesMinimos.HistoricalLowsSort = 3;

			if (string.IsNullOrEmpty(usuarioId) == false)
			{
				BaseDatos.Usuarios.Actualizar.Opcion("HistoricalLowsSort", 3, usuarioId);
			}
		}
	}

	private void OrdenarPrecio(bool buscar = true)
	{
		ordenamientoElegido = Herramientas.Idiomas.BuscarTexto(idioma, "String7", "HistoricalLows");

		if (buscar == true)
		{
			juegosGestor = BaseDatos.Juegos.Buscar.Minimos(null, 4, tiendas, drmsListado, categorias, minimoDescuento, maximoPrecio, deckListado, lanzamientoElegido, inteligenciaArtificialElegida, minimoReseñas);

			if (juegosGestor.Count > 0)
			{
				juegosFiltrados = Filtros(juegosGestor);
			}
		}
		else
		{
			juegosFiltrados = Filtros(juegosGestor);
		}

		if (opcionesMinimos != null)
		{
			opcionesMinimos.HistoricalLowsSort = 4;

			if (string.IsNullOrEmpty(usuarioId) == false)
			{
				BaseDatos.Usuarios.Actualizar.Opcion("HistoricalLowsSort", 4, usuarioId);
			}
		}
	}

	private void OrdenarDescuento(bool buscar = true)
	{
		ordenamientoElegido = Herramientas.Idiomas.BuscarTexto(idioma, "String8", "HistoricalLows");

		if (buscar == true)
		{
			juegosGestor = BaseDatos.Juegos.Buscar.Minimos(null, 5, tiendas, drmsListado, categorias, minimoDescuento, maximoPrecio, deckListado, lanzamientoElegido, inteligenciaArtificialElegida, minimoReseñas);

			if (juegosGestor.Count > 0)
			{
				juegosFiltrados = Filtros(juegosGestor);
			}
		}
		else
		{
			juegosFiltrados = Filtros(juegosGestor);
		}

		if (opcionesMinimos != null)
		{
			opcionesMinimos.HistoricalLowsSort = 5;

			if (string.IsNullOrEmpty(usuarioId) == false)
			{
				BaseDatos.Usuarios.Actualizar.Opcion("HistoricalLowsSort", 5, usuarioId);
			}
		}
	}

	private void OrdenarFechaDetectado(bool buscar = true)
	{
		ordenamientoElegido = Herramientas.Idiomas.BuscarTexto(idioma, "String34", "HistoricalLows");

		if (buscar == true)
		{
			juegosGestor = BaseDatos.Juegos.Buscar.Minimos(null, 6, tiendas, drmsListado, categorias, minimoDescuento, maximoPrecio, deckListado, lanzamientoElegido, inteligenciaArtificialElegida, minimoReseñas);

			if (juegosGestor.Count > 0)
			{
				juegosFiltrados = Filtros(juegosGestor);
			}
		}
		else
		{
			juegosFiltrados = Filtros(juegosGestor);
		}

		if (opcionesMinimos != null)
		{
			opcionesMinimos.HistoricalLowsSort = 6;

			if (string.IsNullOrEmpty(usuarioId) == false)
			{
				BaseDatos.Usuarios.Actualizar.Opcion("HistoricalLowsSort", 6, usuarioId);
			}
		}
	}

	private void OrdenarFechaLanzamiento(bool buscar = true)
	{
		ordenamientoElegido = Herramientas.Idiomas.BuscarTexto(idioma, "String35", "HistoricalLows");

		if (buscar == true)
		{
			juegosFiltrados = BaseDatos.Juegos.Buscar.Minimos(null, 7, tiendas, drmsListado, categorias, minimoDescuento, maximoPrecio, deckListado, lanzamientoElegido, inteligenciaArtificialElegida, minimoReseñas).Except(juegosFiltrados).ToList();

			if (juegosFiltrados.Count > 0)
			{
				juegosFiltrados = Filtros(juegosFiltrados);
			}
		}
		else
		{
			juegosFiltrados = Filtros(juegosFiltrados);
		}

		if (opcionesMinimos != null)
		{
			opcionesMinimos.HistoricalLowsSort = 7;

			if (string.IsNullOrEmpty(usuarioId) == false)
			{
				BaseDatos.Usuarios.Actualizar.Opcion("HistoricalLowsSort", 7, usuarioId);
			}
		}
	}

	#endregion

	#region Filtrado

	private List<Juegos.Juego> Filtros(List<Juegos.Juego> lista)
	{
		cargado = false;

		if (string.IsNullOrEmpty(textoBuscador) == false)
		{
			lista = lista.Where(j => Herramientas.Buscador.LimpiarNombre(j.Nombre, true).Contains(Herramientas.Buscador.LimpiarNombre(textoBuscador, true)) == true).ToList();
		}

		if (string.IsNullOrEmpty(ocultarJuegosUsuarioSteam) == false)
		{
			if (ocultarJuegosUsuarioSteam == "checked")
			{
				lista = lista.Where(j => !juegosUsuario.Steam.Any(jU => jU.Id == j.IdSteam && j.PrecioMinimosHistoricos[0].DRM == JuegoDRM.Steam)).ToList();
			}
		}

		if (string.IsNullOrEmpty(ocultarJuegosUsuarioGog) == false)
		{
			if (ocultarJuegosUsuarioGog == "checked")
			{
				lista = lista.Where(j => !juegosUsuario.Gog.Any(jU => jU.Id == j.IdGog && j.PrecioMinimosHistoricos[0].DRM == JuegoDRM.GOG)).ToList();
			}
		}

		cargado = true;

		return lista;
	}

	private async void ElegirOrdenamiento(bool buscar)
	{
		if (ordenamientoElegido == Herramientas.Idiomas.BuscarTexto(idioma, "String3", "HistoricalLows"))
		{
			OrdenarReseñasPorcentaje(buscar);
		}

		if (ordenamientoElegido == Herramientas.Idiomas.BuscarTexto(idioma, "String4", "HistoricalLows"))
		{
			OrdenarReseñasCantidad(buscar);
		}

		if (ordenamientoElegido == Herramientas.Idiomas.BuscarTexto(idioma, "String5", "HistoricalLows"))
		{
			OrdenarNombreAZ(buscar);
		}

		if (ordenamientoElegido == Herramientas.Idiomas.BuscarTexto(idioma, "String6", "HistoricalLows"))
		{
			OrdenarNombreZA(buscar);
		}

		if (ordenamientoElegido == Herramientas.Idiomas.BuscarTexto(idioma, "String7", "HistoricalLows"))
		{
			OrdenarPrecio(buscar);
		}

		if (ordenamientoElegido == Herramientas.Idiomas.BuscarTexto(idioma, "String8", "HistoricalLows"))
		{
			OrdenarDescuento(buscar);
		}

		if (ordenamientoElegido == Herramientas.Idiomas.BuscarTexto(idioma, "String34", "HistoricalLows"))
		{
			OrdenarFechaDetectado(buscar);
		}

		if (ordenamientoElegido == Herramientas.Idiomas.BuscarTexto(idioma, "String35", "HistoricalLows"))
		{
			OrdenarFechaLanzamiento(buscar);
		}

		await CambiarEnlace();
	}

	private async Task CambiarEnlace()
	{
		string drmsTexto = string.Empty;

		foreach (var drm in drmsListado)
		{
			if (drm.Estado == true)
			{
				drmsTexto += drm.DRMId.ToString() + ",";
			}
		}

		if (string.IsNullOrEmpty(drmsTexto) == false)
		{
			drmsTexto = "drms=" + drmsTexto.TrimEnd(',');
		}

		string tiendasTexto = string.Empty;

		foreach (var tienda in tiendas)
		{
			if (tienda.Estado == true)
			{
				tiendasTexto += tienda.TiendaId.ToString() + ",";
			}
		}

		if (string.IsNullOrEmpty(tiendasTexto) == false)
		{
			tiendasTexto = "&stores=" + tiendasTexto.TrimEnd(',');
		}

		string categoriasTexto = string.Empty;

		foreach (var categoria in categorias)
		{
			if (categoria.Estado == true)
			{
				categoriasTexto += categoria.Categoria.ToString() + ",";
			}
		}

		if (string.IsNullOrEmpty(categoriasTexto) == false)
		{
			categoriasTexto = "&categories=" + categoriasTexto.TrimEnd(',');
		}

		string minimoDescuentoTexto = string.Empty;

		if (minimoDescuento != null && minimoDescuento > 0)
		{
			minimoDescuentoTexto = "&mindiscount=" + minimoDescuento;
		}

		string maximoPrecioTexto = string.Empty;

		if (maximoPrecio != null && maximoPrecio > 0)
		{
			maximoPrecioTexto = "&maxprice=" + maximoPrecio;
		}

		string minimoReseñasTexto = string.Empty;

		if (minimoReseñas != null && minimoReseñas > 0)
		{
			minimoReseñasTexto = "&minreviews=" + minimoReseñas;
		}

		string deckTexto = string.Empty;

		foreach (var deck in deckListado)
		{
			if (deck.Estado == true)
			{
				deckTexto += ((int)deck.Tipo).ToString() + ",";
			}
		}

		if (string.IsNullOrEmpty(deckTexto) == false)
		{
			deckTexto = "&deck=" + deckTexto.TrimEnd(',');
		}

		string lanzamientoTexto = string.Empty;

		if (lanzamientoElegido >= 0)
		{
			lanzamientoTexto = "&release=" + lanzamientoElegido.ToString();
		}

		string inteligenciaArtificialTexto = string.Empty;

		if (inteligenciaArtificialElegida >= 0)
		{
			inteligenciaArtificialTexto = "&ai=" + inteligenciaArtificialElegida.ToString();
		}

		await JavaScript.InvokeVoidAsync("ChangeUrl", "/historical-lows?" + drmsTexto + tiendasTexto + categoriasTexto + minimoDescuentoTexto + maximoPrecioTexto + minimoReseñasTexto + deckTexto + lanzamientoTexto + inteligenciaArtificialTexto);
	}

	private void TextoCambiaBuscador()
	{
		ElegirOrdenamiento(false);
	}

	private string ocultarJuegosUsuarioSteam = null;

	#endregion

	#region Opciones Usuario

	private void OcultarJuegosUsuarioSteam()
	{
		if (opcionesMinimos != null)
		{
			if (opcionesMinimos.HistoricalLowsOption1 == true)
			{
				opcionesMinimos.HistoricalLowsOption1 = false;
				ocultarJuegosUsuarioSteam = null;
			}
			else
			{
				opcionesMinimos.HistoricalLowsOption1 = true;
				ocultarJuegosUsuarioSteam = "checked";
			}

			if (string.IsNullOrEmpty(usuarioId) == false)
			{
				BaseDatos.Usuarios.Actualizar.Opcion("HistoricalLowsOption1", (bool)opcionesMinimos.HistoricalLowsOption1, usuarioId);
			}

			ElegirOrdenamiento(false);
		}
	}

	private string ocultarJuegosUsuarioGog = null;

	private void OcultarJuegosUsuarioGog()
	{
		if (opcionesMinimos != null)
		{
			if (opcionesMinimos.HistoricalLowsOption4 == true)
			{
				opcionesMinimos.HistoricalLowsOption4 = false;
				ocultarJuegosUsuarioGog = null;
			}
			else
			{
				opcionesMinimos.HistoricalLowsOption4 = true;
				ocultarJuegosUsuarioGog = "checked";
			}

			if (string.IsNullOrEmpty(usuarioId) == false)
			{
				BaseDatos.Usuarios.Actualizar.Opcion("HistoricalLowsOption4", (bool)opcionesMinimos.HistoricalLowsOption1, usuarioId);
			}

			ElegirOrdenamiento(false);
		}
	}

	private int? minimoDescuento = 1;

	private void CambiarMinimoDescuento(ChangeEventArgs e)
	{
		minimoDescuento = int.Parse(e.Value.ToString());

		if (minimoDescuento != 1)
		{
			minimoDescuento = minimoDescuento - 1;
		}

		if (opcionesMinimos != null)
		{
			opcionesMinimos.HistoricalLowsOption2 = minimoDescuento;

			if (string.IsNullOrEmpty(usuarioId) == false)
			{
				BaseDatos.Usuarios.Actualizar.Opcion("HistoricalLowsOption2", (int)opcionesMinimos.HistoricalLowsOption2, usuarioId);
			}
		}

		ElegirOrdenamiento(true);
	}

	private decimal? maximoPrecio = 90;

	private void CambiarMaximoPrecio(ChangeEventArgs e)
	{
		maximoPrecio = decimal.Parse(e.Value.ToString());

		if (opcionesMinimos != null)
		{
			opcionesMinimos.HistoricalLowsOption3 = maximoPrecio;

			if (string.IsNullOrEmpty(usuarioId) == false)
			{
				BaseDatos.Usuarios.Actualizar.Opcion("HistoricalLowsOption3", (decimal)opcionesMinimos.HistoricalLowsOption3, usuarioId);
			}
		}

		ElegirOrdenamiento(true);
	}

	private void EnseñarJuegosDRM(ChangeEventArgs e, JuegoDRM drmElegido)
	{
		foreach (var drm in drmsListado)
		{
			if (drm.DRMId == drmElegido)
			{
				if (drm.Checkbox == null)
				{
					drm.Checkbox = "checked";
					drm.Estado = true;
				}
				else
				{
					drm.Checkbox = null;
					drm.Estado = false;
				}
			}
		}

		if (opcionesMinimos != null)
		{
			opcionesMinimos.HistoricalLowsDRMs = JsonSerializer.Serialize(drmsListado);

			if (string.IsNullOrEmpty(usuarioId) == false)
			{
				BaseDatos.Usuarios.Actualizar.Opcion("HistoricalLowsDRMs", opcionesMinimos.HistoricalLowsDRMs, usuarioId);
			}
		}

		ElegirOrdenamiento(true);
	}

	private List<MostrarJuegoDRM> drmsListado = CrearListaDRMs();

	public class MostrarJuegoDRM
	{
		public bool Estado { get; set; }
		public string Checkbox { get; set; }
		public JuegoDRM DRMId { get; set; }
	}

	private static List<MostrarJuegoDRM> CrearListaDRMs()
	{
		List<MostrarJuegoDRM> nuevaLista = new List<MostrarJuegoDRM>();

		foreach (var drm in JuegoDRM2.GenerarListado())
		{
			MostrarJuegoDRM nuevoDRM = new MostrarJuegoDRM();
			nuevoDRM.Estado = false;
			nuevoDRM.Checkbox = null;
			nuevoDRM.DRMId = drm.Id;

			if (nuevoDRM.DRMId == JuegoDRM.Steam || nuevoDRM.DRMId == JuegoDRM.GOG || nuevoDRM.DRMId == JuegoDRM.Ubisoft || nuevoDRM.DRMId == JuegoDRM.EA)
			{
				nuevoDRM.Estado = true;
				nuevoDRM.Checkbox = "checked";
			}

			nuevaLista.Add(nuevoDRM);
		}

		return nuevaLista;
	}

	private void EnseñarJuegosTienda(ChangeEventArgs e, string tiendaElegida)
	{
		foreach (var tienda in tiendas)
		{
			if (tienda.TiendaId == tiendaElegida)
			{
				if (tienda.Checkbox == null)
				{
					tienda.Checkbox = "checked";
					tienda.Estado = true;
				}
				else
				{
					tienda.Checkbox = null;
					tienda.Estado = false;
				}
			}
		}

		if (opcionesMinimos != null)
		{
			opcionesMinimos.HistoricalLowsStores = JsonSerializer.Serialize(tiendas);

			if (string.IsNullOrEmpty(usuarioId) == false)
			{
				BaseDatos.Usuarios.Actualizar.Opcion("HistoricalLowsStores", opcionesMinimos.HistoricalLowsStores, usuarioId);
			}
		}

		ElegirOrdenamiento(true);
	}

	private List<MostrarJuegoTienda> tiendas = GenerarListaTiendas();

	public class MostrarJuegoTienda
	{
		public bool Estado { get; set; }
		public string Checkbox { get; set; }
		public string TiendaId { get; set; }
	}

	private static List<MostrarJuegoTienda> GenerarListaTiendas(List<MostrarJuegoTienda> viejaLista = null)
	{
		List<MostrarJuegoTienda> nuevaLista = new List<MostrarJuegoTienda>();

		foreach (var tienda in Tiendas2.TiendasCargar.GenerarListado())
		{
			MostrarJuegoTienda nuevaTienda = new MostrarJuegoTienda();
			nuevaTienda.TiendaId = tienda.Id;

			if (viejaLista != null)
			{
				nuevaTienda.Estado = false;
				nuevaTienda.Checkbox = null;

				foreach (var viejaTienda in viejaLista)
				{
					if (viejaTienda.TiendaId == tienda.Id)
					{
						nuevaTienda.Estado = viejaTienda.Estado;
						nuevaTienda.Checkbox = viejaTienda.Checkbox;
					}
				}
			}
			else
			{
				nuevaTienda.Estado = true;
				nuevaTienda.Checkbox = "checked";
			}

			nuevaLista.Add(nuevaTienda);
		}

		return nuevaLista;
	}

	private int? minimoReseñas = 0;

	private void CambiarMinimoReseñas(ChangeEventArgs e)
	{
		minimoReseñas = int.Parse(e.Value.ToString());

		if (opcionesMinimos != null)
		{
			opcionesMinimos.HistoricalLowsReviews = minimoReseñas;

			if (string.IsNullOrEmpty(usuarioId) == false)
			{
				BaseDatos.Usuarios.Actualizar.Opcion("HistoricalLowsReviews", (int)opcionesMinimos.HistoricalLowsReviews, usuarioId);
			}
		}

		ElegirOrdenamiento(true);
	}

	private void EnseñarJuegosCategoria(ChangeEventArgs e, JuegoTipo categoriaElegida)
	{
		foreach (var categoria in categorias)
		{
			if (categoria.Categoria == categoriaElegida)
			{
				if (categoria.Checkbox == null)
				{
					categoria.Checkbox = "checked";
					categoria.Estado = true;
				}
				else
				{
					categoria.Checkbox = null;
					categoria.Estado = false;
				}
			}
		}

		if (opcionesMinimos != null)
		{
			opcionesMinimos.HistoricalLowsCategories = JsonSerializer.Serialize(categorias);

			if (string.IsNullOrEmpty(usuarioId) == false)
			{
				BaseDatos.Usuarios.Actualizar.Opcion("HistoricalLowsCategories", opcionesMinimos.HistoricalLowsCategories, usuarioId);
			}
		}

		ElegirOrdenamiento(true);
	}

	private List<MostrarJuegoCategoria> categorias = CrearListaCategorias();

	public class MostrarJuegoCategoria
	{
		public bool Estado { get; set; }
		public string Checkbox { get; set; }
		public JuegoTipo Categoria { get; set; }
	}

	private static List<MostrarJuegoCategoria> CrearListaCategorias()
	{
		List<MostrarJuegoCategoria> nuevaLista = new List<MostrarJuegoCategoria>();

		foreach (var categoria in JuegoTipos.CargarListado())
		{
			if (categoria != JuegoTipo.Bundle)
			{
				MostrarJuegoCategoria nuevaCategoria = new MostrarJuegoCategoria();
				nuevaCategoria.Estado = true;
				nuevaCategoria.Checkbox = "checked";
				nuevaCategoria.Categoria = categoria;

				nuevaLista.Add(nuevaCategoria);
			}
		}

		return nuevaLista;
	}

	private void EnseñarJuegosSteamDeck(ChangeEventArgs e, JuegoDeck tipoElegido)
	{
		foreach (var steamdeck in deckListado)
		{
			if (steamdeck.Tipo == tipoElegido)
			{
				if (steamdeck.Checkbox == null)
				{
					steamdeck.Checkbox = "checked";
					steamdeck.Estado = true;
				}
				else
				{
					steamdeck.Checkbox = null;
					steamdeck.Estado = false;
				}
			}
		}

		if (opcionesMinimos != null)
		{
			opcionesMinimos.HistoricalLowsSteamDeck = JsonSerializer.Serialize(deckListado);

			if (string.IsNullOrEmpty(usuarioId) == false)
			{
				BaseDatos.Usuarios.Actualizar.Opcion("HistoricalLowsSteamDeck", opcionesMinimos.HistoricalLowsSteamDeck, usuarioId);
			}
		}

		ElegirOrdenamiento(true);
	}

	private List<MostrarJuegoSteamDeck> deckListado = CrearListaSteamDeck();

	public class MostrarJuegoSteamDeck
	{
		public bool Estado { get; set; }
		public string Checkbox { get; set; }
		public JuegoDeck Tipo { get; set; }
	}

	private static List<MostrarJuegoSteamDeck> CrearListaSteamDeck()
	{
		List<MostrarJuegoSteamDeck> nuevaLista = new List<MostrarJuegoSteamDeck>();

		MostrarJuegoSteamDeck nuevoTipo1 = new MostrarJuegoSteamDeck();
		nuevoTipo1.Estado = true;
		nuevoTipo1.Checkbox = "checked";
		nuevoTipo1.Tipo = JuegoDeck.Verificado;

		nuevaLista.Add(nuevoTipo1);

		MostrarJuegoSteamDeck nuevoTipo2 = new MostrarJuegoSteamDeck();
		nuevoTipo2.Estado = true;
		nuevoTipo2.Checkbox = "checked";
		nuevoTipo2.Tipo = JuegoDeck.Jugable;

		nuevaLista.Add(nuevoTipo2);

		MostrarJuegoSteamDeck nuevoTipo3 = new MostrarJuegoSteamDeck();
		nuevoTipo3.Estado = true;
		nuevoTipo3.Checkbox = "checked";
		nuevoTipo3.Tipo = JuegoDeck.NoSoportado;

		nuevaLista.Add(nuevoTipo3);

		MostrarJuegoSteamDeck nuevoTipo4 = new MostrarJuegoSteamDeck();
		nuevoTipo4.Estado = true;
		nuevoTipo4.Checkbox = "checked";
		nuevoTipo4.Tipo = JuegoDeck.Desconocido;

		nuevaLista.Add(nuevoTipo4);

		return nuevaLista;
	}

	private int lanzamientoElegido = 0;
	private string lanzamientoChecked0 = null;
	private string lanzamientoChecked1 = null;
	private string lanzamientoChecked2 = null;
	private string lanzamientoChecked3 = null;

	private void CambiarLanzamiento(ChangeEventArgs e, int nuevoLanzamiento)
	{
		lanzamientoElegido = nuevoLanzamiento;

		lanzamientoChecked0 = null;
		lanzamientoChecked1 = null;
		lanzamientoChecked2 = null;
		lanzamientoChecked3 = null;

		if (lanzamientoElegido == 0)
		{
			lanzamientoChecked0 = "checked";
		}
		else if (lanzamientoElegido == 1)
		{
			lanzamientoChecked1 = "checked";
		}
		else if (lanzamientoElegido == 2)
		{
			lanzamientoChecked2 = "checked";
		}
		else if (lanzamientoElegido == 3)
		{
			lanzamientoChecked3 = "checked";
		}

		if (opcionesMinimos != null)
		{
			opcionesMinimos.HistoricalLowsRelease = lanzamientoElegido;

			if (string.IsNullOrEmpty(usuarioId) == false)
			{
				BaseDatos.Usuarios.Actualizar.Opcion("HistoricalLowsRelease", opcionesMinimos.HistoricalLowsRelease.ToString(), usuarioId);
			}		
		}

		ElegirOrdenamiento(true);
	}

	private int inteligenciaArtificialElegida = 0;
	private string inteligenciaArtificialChecked0 = null;
	private string inteligenciaArtificialChecked1 = null;
	private string inteligenciaArtificialChecked2 = null;

	private void CambiarInteligenciaArtificial(ChangeEventArgs e, int nuevaInteligenciaArtificial)
	{
		inteligenciaArtificialElegida = nuevaInteligenciaArtificial;

		inteligenciaArtificialChecked0 = null;
		inteligenciaArtificialChecked1 = null;
		inteligenciaArtificialChecked2 = null;

		if (inteligenciaArtificialElegida == 0)
		{
			inteligenciaArtificialChecked0 = "checked";
		}
		else if (inteligenciaArtificialElegida == 1)
		{
			inteligenciaArtificialChecked1 = "checked";
		}
		else if (inteligenciaArtificialElegida == 2)
		{
			inteligenciaArtificialChecked2 = "checked";
		}

		if (opcionesMinimos != null)
		{
			opcionesMinimos.HistoricalLowsAI = inteligenciaArtificialElegida;

			if (string.IsNullOrEmpty(usuarioId) == false)
			{
				BaseDatos.Usuarios.Actualizar.Opcion("HistoricalLowsAI", opcionesMinimos.HistoricalLowsAI.ToString(), usuarioId);

			}
		}

		ElegirOrdenamiento(true);
	}

	#endregion

	#region Opciones Defecto

	private void OpcionesPestañas()
	{
		enseñarOcultar = false;
		enseñarDescuentoMinimo = false;
		enseñarPrecioMaximo = false;
		enseñarDRMs = false;
		enseñarTiendas = false;
		enseñarMinimoReseñas = false;
		enseñarCategorias = false;
		enseñarSteamDeck = false;
        enseñarLanzamiento = false;
        enseñarInteligenciaArtificial = false;
	}

	private bool enseñarOcultar = false;

	private void OpcionesOcultar()
	{
		if (enseñarOcultar == false)
		{
			OpcionesPestañas();

			enseñarOcultar = true;
		}
		else
		{
			enseñarOcultar = false;
		}
	}

	private bool enseñarDescuentoMinimo = false;

	private void OpcionesDescuentoMinimo()
	{
		if (enseñarDescuentoMinimo == false)
		{
			OpcionesPestañas();

			enseñarDescuentoMinimo = true;
		}
		else
		{
			enseñarDescuentoMinimo = false;
		}
	}

	private bool enseñarPrecioMaximo = false;

	private void OpcionesPrecioMaximo()
	{
		if (enseñarPrecioMaximo == false)
		{
			OpcionesPestañas();

			enseñarPrecioMaximo = true;
		}
		else
		{
			enseñarPrecioMaximo = false;
		}
	}

	private bool enseñarDRMs = false;

	private void OpcionesDRMs()
	{
		if (enseñarDRMs == false)
		{
			OpcionesPestañas();

			enseñarDRMs = true;
		}
		else
		{
			enseñarDRMs = false;
		}
	}

	private bool enseñarTiendas = false;

	private void OpcionesTiendas()
	{
		if (enseñarTiendas == false)
		{
			OpcionesPestañas();

			enseñarTiendas = true;
		}
		else
		{
			enseñarTiendas = false;
		}
	}

	private bool enseñarMinimoReseñas = false;

	private void OpcionesMinimoReseñas()
	{
		if (enseñarMinimoReseñas == false)
		{
			OpcionesPestañas();
			enseñarMinimoReseñas = true;
		}
		else
		{
			enseñarMinimoReseñas = false;
		}
	}

	private bool enseñarCategorias = false;

	private void OpcionesCategorias()
	{
		if (enseñarCategorias == false)
		{
			OpcionesPestañas();

			enseñarCategorias = true;
		}
		else
		{
			enseñarCategorias = false;
		}
	}

	private bool enseñarSteamDeck = false;

	private void OpcionesSteamDeck()
	{
		if (enseñarSteamDeck == false)
		{
			OpcionesPestañas();

			enseñarSteamDeck = true;
		}
		else
		{
			enseñarSteamDeck = false;
		}
	}

	private bool enseñarLanzamiento = false;

	private void OpcionesLanzamiento()
	{
		if (enseñarLanzamiento == false)
		{
			OpcionesPestañas();
			enseñarLanzamiento = true;
		}
		else
		{
			enseñarLanzamiento = false;
        }
	}

	private bool enseñarInteligenciaArtificial = false;

	private void OpcionesInteligenciaArtificial()
	{
		if (enseñarInteligenciaArtificial == false)
		{
			OpcionesPestañas();
			enseñarInteligenciaArtificial = true;
		}
		else
		{
			enseñarInteligenciaArtificial = false;
        }
	}

	#endregion
}