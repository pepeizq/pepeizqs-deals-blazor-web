@page "/news/{id:int}/{nombreNoticia?}/"

@using Bundles2
@using Gratis2
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop
@using Microsoft.VisualBasic
@using Noticias
@using pepeizqs_deals_web.Data
@using Suscripciones2
@using pepeizqs_deals_blazor_web.Componentes.Interfaz

@inject IHttpContextAccessor Contexto
@inject IJSRuntime JavaScript

@{
	string tituloSeo = titulo + " • pepeizq's deals";

	if (tituloSeo.Length > 67)
	{
		tituloSeo = tituloSeo.Substring(0, 67) + " ...";
	}

	if (noticia != null)
	{
		string texto2 = Herramientas.Idiomas.ElegirTexto(idioma, noticia.ContenidoEn, noticia.ContenidoEs);

		if (string.IsNullOrEmpty(texto2) == false)
		{
			if (texto2.Contains("</div>") == true)
			{
				int int1 = texto2.IndexOf("</div>");
				texto2 = texto2.Remove(int1, texto2.Length - int1);

				if (texto2.Contains("<div") == true)
				{
					int int2 = texto2.IndexOf(">");
					texto2 = texto2.Remove(0, int2 + 1);
				}
			}
			else
			{
				if (texto2.Contains("<") == true)
				{
					int int1 = texto2.IndexOf("<");
					texto2 = texto2.Remove(int1, texto2.Length - int1);
				}
			}
		}

		string descripcion = texto2;

		if (descripcion.Length > 147)
		{
			descripcion = descripcion.Replace(Strings.ChrW(34).ToString(), null);

            descripcion = descripcion.Substring(0, 147) + " ...";
        }

		string keywords = "news";

		if (string.IsNullOrEmpty(titulo) == false)
		{
			string[] keywordsEnBruto = Herramientas.Buscador.LimpiarNombre(titulo, false).Split(' ');
			List<string> keywordsLista = new List<string>();
			keywordsLista.AddRange(keywordsEnBruto);

			foreach (string keyword in keywordsLista)
			{
				if (keyword.Length > 3)
				{
					keywords = keywords + ", " + keyword;
				}
			}
		}

		<HeadContent>
            <PageTitle>@tituloSeo</PageTitle>

			<meta name="og:title" Content="@tituloSeo" />
			<meta name="description" content="@descripcion" />
			<meta name="og:description" content="@descripcion" />
			<meta name="og:url" content="@enlaceIngles" />
			<meta name="og:image" content="@fondo" />
			<meta name="og:video" content="@video" />
			<meta name="og:site_name" content="pepeizq's deals" />
			<meta name="og:type" content="website" />
			<meta name="robots" content="index, follow" />
			<meta name="keywords" content="@keywords" />

			<script type="application/ld+json">
				@{
					string seoJson = "{" + Environment.NewLine +
						Strings.ChrW(34) + "@context" + Strings.ChrW(34) + ":" + Strings.ChrW(34) + "https://schema.org" + Strings.ChrW(34) + "," + Environment.NewLine +
						Strings.ChrW(34) + "@type" + Strings.ChrW(34) + ":" + Strings.ChrW(34) + "NewsArticle" + Strings.ChrW(34) + "," + Environment.NewLine +
						Strings.ChrW(34) + "headline" + Strings.ChrW(34) + ":" + Strings.ChrW(34) + noticia.TituloEn + Strings.ChrW(34) + "," + Environment.NewLine +
						Strings.ChrW(34) + "image" + Strings.ChrW(34) + ":" + Strings.ChrW(34) + noticia.Imagen + Strings.ChrW(34) + "," + Environment.NewLine +
						Strings.ChrW(34) + "datePublished" + Strings.ChrW(34) + ":" + Strings.ChrW(34) + noticia.FechaEmpieza.ToString("yyyy-MM-ddTHH:mm:ss") + Strings.ChrW(34) + "," + Environment.NewLine +
						Strings.ChrW(34) + "description" + Strings.ChrW(34) + ":" + Strings.ChrW(34) + descripcion + Strings.ChrW(34) + "," + Environment.NewLine +
						Strings.ChrW(34) + "author" + Strings.ChrW(34) + ": {" + Strings.ChrW(34) + "@type" + Strings.ChrW(34) + ":" + Strings.ChrW(34) + "Person" + Strings.ChrW(34) + "," + Environment.NewLine + 
						Strings.ChrW(34) + "name" + Strings.ChrW(34) + ":" + Strings.ChrW(34) + "pepeizq" + Strings.ChrW(34) + "," + Environment.NewLine + 
						Strings.ChrW(34) + "url" + Strings.ChrW(34) + ":" + Strings.ChrW(34) + "https://pepeizqapps.com/" + Strings.ChrW(34) + Environment.NewLine + "} ," + Environment.NewLine +
						Strings.ChrW(34) + "isAccessibleForFree" + Strings.ChrW(34) + ":" + Strings.ChrW(34) + "true" + Strings.ChrW(34) + "}";
				}

				@((MarkupString)seoJson)
			</script>

			<link rel="canonical" href="@enlaceIngles" hreflang="en"/>
			<link rel="alternate" href="@enlaceEspañol" hreflang="es"/>
		</HeadContent>
	}
}

<script>
	window.ChangeUrl = function (url) {
		history.pushState(null, '', url);
	}
</script>

<style>
	.caja-noticia-contenido {
		background-color: var(--fondoSubsubcabecera);
		border: 2px solid var(--fondoSubcabecera);
		padding: 40px;
		margin: 40px 0px;
		box-shadow: 0px 4px 8px 0px rgba(0, 0, 0, 0.28),0px 0px 2px 0px rgba(0, 0, 0, 0.24);
	}
</style>

@if (noticia != null)
{
	if (usuarioAdmin == true)
	{
		<pepeizqs_deals_blazor_web.Componentes.Admin.Noticia idioma="@idioma" noticiaId="@noticia.Id" />
	}

	<div class="subcabecera">
		<div class="cuerpo-ancho sub-subcabecera" style="flex-wrap: nowrap; padding: 20px 0px;">
			@{
				string imagenCabecera = string.Empty;

				if (noticia.Tipo == NoticiaTipo.Bundles)
				{
					imagenCabecera = BundlesCargar.DevolverBundle(noticia.BundleTipo).ImagenTienda;
				}
				else if (noticia.Tipo == NoticiaTipo.Gratis)
				{
					imagenCabecera = GratisCargar.DevolverGratis(noticia.GratisTipo).ImagenLogo;
				}
				else if (noticia.Tipo == NoticiaTipo.Suscripciones)
				{
					imagenCabecera = SuscripcionesCargar.DevolverSuscripcion(noticia.SuscripcionTipo).ImagenLogo;
				}

				if (string.IsNullOrEmpty(imagenCabecera) == false)
				{
					<div>
						<img src="@Herramientas.Ficheros.Imagenes.ServidorExterno(imagenCabecera)" style="max-width: 200px; max-height: 75px;" alt="Logo" />
					</div>
				}
			}

			<h1 style="font-size: 18px; margin: 0px; padding: 9px 20px; line-height: 30px;">
				@titulo
			</h1>

			<div style="margin-left: auto; display: flex; justify-content: right;">
				<div>
					@noticia.FechaEmpieza.ToString("d/M/yyyy")
				</div>
			</div>
		</div>
	</div>

	<div>
		<img class="juego-fondo" src="@Herramientas.Ficheros.Imagenes.ServidorExterno(fondo, 1536, 496)" alt="Background" loading="lazy" />

		<div style="position: relative; display: flex; flex-direction: column;">
			@if (noticia.Tipo == NoticiaTipo.Bundles)
			{
				if (noticia.BundleId > 0)
				{
					Bundles2.Bundle bundle = BaseDatos.Bundles.Buscar.UnBundle(noticia.BundleId);

					if (bundle != null)
					{
						<div style="position: relative; display: flex; flex-direction: column;">
							<Bundle bundleId="@bundle.Id" tipo="Bundle.Tipo.Noticia" />
						</div>
					}
				}
			}
			else if (noticia.Tipo == NoticiaTipo.Gratis)
			{
				string texto = Herramientas.Idiomas.ElegirTexto(idioma, noticia.ContenidoEn, noticia.ContenidoEs);

				if (string.IsNullOrEmpty(texto) == false)
				{
					if (texto.Contains("</div>") == true)
					{
						int int1 = texto.IndexOf("</div>");
						texto = texto.Remove(int1, texto.Length - int1);

						if (texto.Contains("<div") == true)
						{
							int int2 = texto.IndexOf(">");
							texto = texto.Remove(0, int2 + 1);
						}
					}
					else
					{
						if (texto.Contains("<") == true)
						{
							int int1 = texto.IndexOf("<");
							texto = texto.Remove(int1, texto.Length - int1);
						}
					}
				}

				<div class="caja-noticia-contenido">
					<div>
						@texto
					</div>

					@if (string.IsNullOrEmpty(noticia.GratisIds) == false)
					{
						<div style="display: grid; grid-template-columns: repeat(auto-fill, minmax(170px, 1fr)); gap: 30px; margin-top: 30px;">
							@{
								List<string> ids = Herramientas.Listados.Generar(noticia.GratisIds);

								if (ids.Count > 0)
								{
									foreach (var id in ids)
									{
										var gratis = BaseDatos.Gratis.Buscar.UnGratis(id);

										if (gratis != null)
										{
											string imagen = gratis.Imagen;

											if (gratis.JuegoId > 0)
											{
												var juego = BaseDatos.Juegos.Buscar.UnJuego(gratis.JuegoId);

												if (juego != null)
												{
													string enlaceJuego = Herramientas.EnlaceAcortador.Generar(gratis.Enlace, gratis.Tipo, usuarioPatreon);

													<CajaJuego drmNoticia="@gratis.DRM" enlaceNoticia="@enlaceJuego" idioma="@idioma" juego="@juego" juegosUsuario="@juegosUsuario" usuarioDeseadosSteam="@deseadosUsuario?.SteamWishlist" usuarioDeseadosWeb="@deseadosUsuario?.Wishlist" usuarioDeseadosGog="@deseadosUsuario?.GogWishlist" tipo="CajaJuego.Tipo.Noticia" />
												}
											}
										}
									}
								}
							}
						</div>
					}
				</div>
			}
			else if (noticia.Tipo == NoticiaTipo.Suscripciones)
			{
				string texto = Herramientas.Idiomas.ElegirTexto(idioma, noticia.ContenidoEn, noticia.ContenidoEs);

				if (string.IsNullOrEmpty(texto) == false)
				{
					if (texto.Contains("</div>") == true)
					{
						int int1 = texto.IndexOf("</div>");
						texto = texto.Remove(int1, texto.Length - int1);

						if (texto.Contains("<div") == true)
						{
							int int2 = texto.IndexOf(">");
							texto = texto.Remove(0, int2 + 1);
						}
					}
					else
					{
						if (texto.Contains("<") == true)
						{
							int int1 = texto.IndexOf("<");
							texto = texto.Remove(int1, texto.Length - int1);
						}
					}
				}

				<div class="caja-noticia-contenido">
					<div>
						@texto
					</div>

					@if (string.IsNullOrEmpty(noticia.SuscripcionesIds) == false)
					{
						<div style="display: grid; grid-template-columns: repeat(auto-fill, minmax(170px, 1fr)); gap: 30px; margin-top: 30px;">
							@{
								List<string> ids = Herramientas.Listados.Generar(noticia.SuscripcionesIds);

								if (ids.Count > 0)
								{
									foreach (var id in ids)
									{
										var suscripcion = BaseDatos.Suscripciones.Buscar.UnJuego(int.Parse(id), null);

										if (suscripcion != null)
										{
											var juego = BaseDatos.Juegos.Buscar.UnJuego(suscripcion.JuegoId);

											if (juego != null)
											{
												string enlaceJuego = Herramientas.EnlaceAcortador.Generar(suscripcion.Enlace, suscripcion.Tipo, usuarioPatreon);

												<CajaJuego drmNoticia="@suscripcion.DRM" enlaceNoticia="@enlaceJuego" idioma="@idioma" juego="@juego" juegosUsuario="@juegosUsuario" usuarioDeseadosSteam="@deseadosUsuario?.SteamWishlist" usuarioDeseadosWeb="@deseadosUsuario?.Wishlist" usuarioDeseadosGog="@deseadosUsuario?.GogWishlist" tipo="CajaJuego.Tipo.Noticia" />
											}
										}
									}
								}
							}
						</div>
					}
				</div>
			}
			else
			{
				<div class="caja-noticia-contenido">
					@((MarkupString)Herramientas.Idiomas.ElegirTexto(idioma, noticia.ContenidoEn, noticia.ContenidoEs))
				</div>
			}

			@if (noticiaAnterior != null || noticiaPosterior != null)
			{
				<div class="subcabecera" style="background-color: var(--fondoSubsubcabecera);">
					<div class="cuerpo-ancho" style="padding: 20px 0px; display: flex; align-items: center; gap: 40px;">
						@if (noticiaAnterior != null)
						{
							if (noticiaAnterior.Id > 0)
							{
								string enlaceAnterior = "/news/" + noticiaAnterior.Id + "/" + Herramientas.EnlaceAdaptador.Nombre(Herramientas.Idiomas.ElegirTexto(idioma, noticiaAnterior.TituloEn, noticiaAnterior.TituloEs)) + "/";

								<button @onclick="(e => AbrirNoticia(e, enlaceAnterior, false))" class="boton-pequeño" style="color: var(--colorTextoVisitado); background-color: var(--fondoBotonPequeño); border: 0px; padding: 12px 20px; text-decoration: none; width: 50%; display: flex; align-items: center; gap: 15px; justify-content: flex-end;">
									<div style="max-width: 16px;">
										<svg class="svg-boton" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512">
											<path d="M9.4 233.4c-12.5 12.5-12.5 32.8 0 45.3l160 160c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3L109.2 288 416 288c17.7 0 32-14.3 32-32s-14.3-32-32-32l-306.7 0L214.6 118.6c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0l-160 160z" />
										</svg>
									</div>

									@Herramientas.Idiomas.ElegirTexto(idioma, noticiaAnterior.TituloEn, noticiaAnterior.TituloEs)
								</button>
							}
						}

						@if (noticiaPosterior != null)
						{
							if (noticiaPosterior.Id > 0)
							{
								string enlacePosterior = "/news/" + noticiaPosterior.Id + "/" + Herramientas.EnlaceAdaptador.Nombre(Herramientas.Idiomas.ElegirTexto(idioma, noticiaPosterior.TituloEn, noticiaPosterior.TituloEs)) + "/";

								<button @onclick="(e => AbrirNoticia(e, enlacePosterior, false))" class="boton-pequeño" style="color: var(--colorTextoVisitado); background-color: var(--fondoBotonPequeño); border: 0px; padding: 12px 20px; text-decoration: none; width: 50%; display: flex; align-items: center; gap: 15px; justify-content: flex-end;">
									@Herramientas.Idiomas.ElegirTexto(idioma, noticiaPosterior.TituloEn, noticiaPosterior.TituloEs)

									<div style="max-width: 16px;">
										<svg class="svg-boton" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512">
											<path d="M438.6 278.6c12.5-12.5 12.5-32.8 0-45.3l-160-160c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3L338.8 224 32 224c-17.7 0-32 14.3-32 32s14.3 32 32 32l306.7 0L233.4 393.4c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0l160-160z" />
										</svg>
									</div>
								</button>
							}
						}
					</div>
				</div>
			}
		</div>
	</div>
}

@code {

	#nullable disable

	private string idioma = "en";
	private string usuarioId = null;

	[PersistentState] public Herramientas.UsuarioListadosJuegos juegosUsuario { get; set; }
	[PersistentState] public Usuario deseadosUsuario { get; set; }
	private bool usuarioPatreon = false;
	private bool usuarioAdmin = false;

	[SupplyParameterFromQuery]
	private string Language { get; set; }

	[SupplyParameterFromQuery]
	private string Source { get; set; }

	[Parameter]
	public int id { get; set; }

	[Parameter]
	public string nombreNoticia { get; set; }

	[Parameter]
	public bool cambiarEnlace { get; set; } = true;

	[Parameter]
	public Tipo tipo { get; set; } = Tipo.UltimasNoticias;

	[PersistentState] public Noticias.Noticia noticia { get; set; }
	[PersistentState] public Noticias.Noticia noticiaAnterior { get; set; }
	[PersistentState] public Noticias.Noticia noticiaPosterior { get; set; }

	private string titulo = string.Empty;
	private string enlaceIngles = string.Empty;
	private string enlaceEspañol = string.Empty;
	private string video = string.Empty;
	private string fondo = string.Empty;

	[PersistentState] public List<Juegos.Juego> juegos { get; set; }

	protected override void OnInitialized()
	{
		idioma = Contexto.HttpContext.Request.Headers["Accept-Language"].ToString().Split(";").FirstOrDefault()?.Split(",").FirstOrDefault();
		usuarioId = Contexto.HttpContext.User.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value;

		if (string.IsNullOrEmpty(usuarioId) == false)
		{
			idioma = BaseDatos.Usuarios.Buscar.IdiomaSobreescribir(usuarioId);
			juegosUsuario ??= Herramientas.UsuarioJuegos.Cargar(usuarioId);
			deseadosUsuario ??= BaseDatos.Usuarios.Buscar.DeseadosTiene(usuarioId);
			usuarioPatreon = Herramientas.Patreon.VerificarActivo(BaseDatos.Usuarios.Buscar.FechaPatreon(usuarioId));
			usuarioAdmin = BaseDatos.Usuarios.Buscar.RolDios(usuarioId);
		}

		if (id > 0)
		{
			noticia ??= BaseDatos.Noticias.Buscar.UnaNoticia(id);

			if (noticia != null)
			{
				if (string.IsNullOrEmpty(Language) == false)
				{
					idioma = Language;
				}

				titulo = Herramientas.Idiomas.ElegirTexto(idioma, noticia.TituloEn, noticia.TituloEs);
				enlaceIngles = "https://pepeizqdeals.com/news/" + id.ToString() + "/" + Herramientas.EnlaceAdaptador.Nombre(noticia.TituloEn) + "/";
				enlaceEspañol = "https://pepeizqdeals.com/news/" + id.ToString() + "/" + Herramientas.EnlaceAdaptador.Nombre(noticia.TituloEs) + "/";

				juegos ??= BaseDatos.Juegos.Buscar.MultiplesJuegos(Herramientas.Listados.Generar(noticia.Juegos));

				if (noticia.Tipo == NoticiaTipo.Suscripciones)
				{
					if (string.IsNullOrEmpty(Suscripciones2.SuscripcionesCargar.DevolverSuscripcion(noticia.SuscripcionTipo).ImagenFondo) == false)
					{
						fondo = Suscripciones2.SuscripcionesCargar.DevolverSuscripcion(noticia.SuscripcionTipo).ImagenFondo;
					}
				}

				if (juegos != null)
				{
					if (juegos.Count == 1)
					{
						if (juegos[0].Media?.Videos != null)
						{
							if (juegos[0].Media?.Videos.Count > 0)
							{
								video = juegos[0].Media?.Videos[0].Enlace;
							}
						}
					}

					if (string.IsNullOrEmpty(fondo) == true)
					{
						if (juegos.Count > 0)
						{
							int analisis = 0;

							foreach (var juego in juegos)
							{
								if (juego.Analisis != null)
								{
									if (string.IsNullOrEmpty(juego.Analisis.Cantidad) == false)
									{
										string temp = juego.Analisis.Cantidad;
										temp = temp.Replace(",", null);
										int analisisJuego = int.Parse(temp);

										if (analisisJuego > analisis)
										{
											analisis = analisisJuego;
											fondo = juego.Imagenes.Library_1920x620;
										}
									}
								}
							}
						}
					}
				}

				noticiaAnterior ??= BaseDatos.Noticias.Buscar.UnaNoticia(id - 1);
				noticiaPosterior ??= BaseDatos.Noticias.Buscar.UnaNoticia(id + 1);
			}
		}
	}

	protected override async Task OnAfterRenderAsync(bool primerRender)
	{
		if (primerRender == true)
		{
			if (noticia != null)
			{
				if (cambiarEnlace == true)
				{
					string cambiarEnlace = enlaceIngles;

					if (idioma == "es")
					{
                        cambiarEnlace = enlaceEspañol;
					}

                    cambiarEnlace = cambiarEnlace.Replace("https://pepeizqdeals.com", null);

					await JavaScript.InvokeVoidAsync("ChangeUrl", cambiarEnlace);
				}				
			}
		}
	}

	#region Abrir Noticia

	private async void AbrirNoticia(MouseEventArgs e, string enlace, bool nuevaVentana = true)
	{
		string comando = "_blank";

		if (nuevaVentana == false)
		{
			comando = "_self";
		}

		await JavaScript.InvokeVoidAsync("open", enlace, comando);
	}

	#endregion

	public enum Tipo
	{
		Portada,
		UltimasNoticias
	}
}
