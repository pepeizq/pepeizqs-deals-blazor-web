@page "/user/{usuarioNombre}/"

@using pepeizqs_deals_web.Data
@using static pepeizqs_deals_blazor_web.Componentes.Cuenta.Cuenta.Juegos

@inject IHttpContextAccessor Contexto

@if (perfil != null)
{
	string titulo = perfil.ProfileNickname2 + " • pepeizq's deals";

	<HeadContent>
		<PageTitle>@titulo</PageTitle>
	</HeadContent>

	<div class="subcabecera">
		<div class="cuerpo-ancho sub-subcabecera" style="flex-wrap: nowrap;">
			<img src="@Herramientas.Ficheros.Imagenes.ServidorExterno(perfil.ProfileAvatar)" style="width: 100px; height: 100px;" alt="@perfil.Nickname" />

			<div style="display: flex; flex-direction: column; gap: 15px;">
				<h1 style="font-size: 18px; margin: 0px; width: fit-content;">
					@perfil.ProfileNickname2
				</h1>

				<div style="display: flex; align-items: center; gap: 15px;">
					@if (string.IsNullOrEmpty(perfilSteamCuenta) == false)
					{
						<a class="boton-pequeño" href="@perfilSteamCuenta" target="_blank" style="font-size: 14px; width: fit-content; padding: 6px 10px; border: 0px; color: var(--colorTexto);">
							<div style="display: flex; align-items: center; gap: 10px;">
								<div>
									<img src="@Herramientas.Ficheros.Imagenes.ServidorExterno(Juegos.JuegoDRM2.SacarImagen(Juegos.JuegoDRM.Steam))" style="max-width: 20px; max-height: 20px;" />
								</div>

								<div>
									@Herramientas.Idiomas.BuscarTexto(idioma, "String8", "AccountUser")
								</div>
							</div>
						</a>
					}

					@if (string.IsNullOrEmpty(perfilGogCuenta) == false)
					{
						<a class="boton-pequeño" href="@perfilGogCuenta" target="_blank" style="font-size: 14px; width: fit-content; padding: 6px 10px; border: 0px; color: var(--colorTexto);">
							<div style="display: flex; align-items: center; gap: 10px;">
								<div>
									<img src="@Herramientas.Ficheros.Imagenes.ServidorExterno(Juegos.JuegoDRM2.SacarImagen(Juegos.JuegoDRM.GOG))" style="max-width: 20px; max-height: 20px;" />
								</div>

								<div>
									@Herramientas.Idiomas.BuscarTexto(idioma, "String9", "AccountUser")
								</div>
							</div>
						</a>
					}
				</div>
			</div>
		</div>
	</div>

	if (perfil.ProfileLastPlayed == true || perfil.ProfileGames == true || perfil.ProfileWishlist == true)
	{
		<div class="subcabecera" style="background-color: var(--fondoSubsubcabecera);">
			<div class="cuerpo-ancho sub-subcabecera" style="padding: 20px 0px;">
				@if (perfil.ProfileLastPlayed == true)
				{
					<button class="boton-pequeño" style="@CambiarEstilo(enseñarUltimoJugado) width: fit-content; font-size: 18px; padding: 8px 20px; border-radius: 5px;" @onclick="PestañaUltimoJugado">
						@Herramientas.Idiomas.BuscarTexto(idioma, "String11", "AccountUser")
					</button>
				}

				@if (Herramientas.Bots.UserAgentEsBot(userAgent) == false)
				{
					if (perfil.ProfileGames == true)
					{
						<button class="boton-pequeño" style="@CambiarEstilo(enseñarJuegos) width: fit-content; font-size: 18px; padding: 8px 20px; border-radius: 5px;" @onclick="PestañaJuegos">
							@Herramientas.Idiomas.BuscarTexto(idioma, "String10", "AccountUser")
						</button>
					}

					if (perfil.ProfileWishlist == true)
					{
						<button class="boton-pequeño" style="@CambiarEstilo(enseñarDeseados) width: fit-content; font-size: 18px; padding: 8px 20px; border-radius: 5px;" @onclick="PestañaDeseados">
							@Herramientas.Idiomas.BuscarTexto(idioma, "String7", "AccountUser")
						</button>
					}
				}
			</div>
		</div>
	}

	if (enseñarUltimoJugado == true)
	{
		if (listaMostrar.Count > 0)
		{
			<div style="max-width: 1000px; margin: 20px auto;">
				<Virtualize Context="juego" Items="listaMostrar">
					<ItemContent>
						<div style="margin: 20px 0px; display: flex; align-items: center; position: relative;">
							<a class="boton-pequeño" style="background: radial-gradient(ellipse at top left, var(--fondoBotonPequeño), var(--fondoOscuro)); padding: 2px;" href="/game/@juego.Id.ToString()/@Herramientas.EnlaceAdaptador.Nombre(juego.Nombre)/" target="_blank">
								<div style="display: flex; align-items: center; justify-content: center; flex-direction: row;">
									<div>
										<img src="@juego.Imagen" style="height: 100%; width: 100%; min-width: 231px; max-height: 87px; object-fit: cover;" />
									</div>

									<div style="width: 100%; padding: 5px 20px;">
										<div>@juego.Nombre</div>

										<div style="display: flex; align-items: center; gap: 10px; margin-top: 10px;">
											@foreach (var drm in juego.DRMs)
											{
												<div style="max-width: 20px; max-height: 20px; display: flex;">
													<img src="@Juegos.JuegoDRM2.SacarImagen(drm.DRM)" style="width: 100%; height: 100%;" />
												</div>

												@if (drm.JugadoTiempo > 0)
												{
													TimeSpan tiempoJugado = TimeSpan.FromMinutes((long)drm.JugadoTiempo);

													string horasJugadas = tiempoJugado.TotalHours.ToString("N1");

													<label>@string.Format(Herramientas.Idiomas.BuscarTexto(idioma, "String28", "AccountGames"), horasJugadas)</label>
												}

												@if (drm.JugadoUltimaVez > 0 && drm.JugadoUltimaVez != 86400)
												{
													DateTimeOffset fecha = DateTimeOffset.FromUnixTimeSeconds(drm.JugadoUltimaVez);

													string ultimaVezJugado = Herramientas.Calculadora.DiferenciaTiempo(fecha.UtcDateTime, idioma);

													<label>(@string.Format(Herramientas.Idiomas.BuscarTexto(idioma, "String33", "Game"), ultimaVezJugado))</label>
												}
											}
										</div>
									</div>
								</div>
							</a>
						</div>
					</ItemContent>
				</Virtualize>
			</div>
		}
	}

	if (enseñarJuegos == true)
	{
		<pepeizqs_deals_blazor_web.Componentes.Cuenta.Cuenta.Juegos usuarioId="@usuarioId" idioma="@idioma"/>
	}

	if (enseñarDeseados == true)
	{
		<Deseados perfilUsuarioId="@usuarioId"/>
	}
}
else
{
	<div style="background-color: var(--fondoPeligro); padding: 15px 20px; margin: 40px auto;">
		@Herramientas.Idiomas.BuscarTexto(idioma, "String21", "AccountUser")
	</div>
}

@code {

	#nullable disable

	private string idioma = "en";
	private string usuarioId = null;
	private string userAgent = null;

	private bool usuarioPatreon = false;
	private bool usuarioAdmin = false;

	[Parameter]
	public string usuarioNombre { get; set; }

	public Usuario perfil = null;

	private List<JuegoUsuario> listaMostrar = new List<JuegoUsuario>();

	protected override void OnInitialized()
	{
		idioma = Contexto.HttpContext.Request.Headers["Accept-Language"].ToString().Split(";").FirstOrDefault()?.Split(",").FirstOrDefault();
		usuarioId = Contexto.HttpContext.User.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value;
		userAgent = Contexto.HttpContext.Request.Headers.UserAgent.ToString();

		if (string.IsNullOrEmpty(usuarioId) == false)
		{
			idioma = BaseDatos.Usuarios.Buscar.IdiomaSobreescribir(usuarioId);
			usuarioPatreon = Herramientas.Patreon.VerificarActivo(BaseDatos.Usuarios.Buscar.FechaPatreon(usuarioId));
			usuarioAdmin = BaseDatos.Usuarios.Buscar.RolDios(usuarioId);
		}
	}

	private string perfilSteamCuenta = null;
	private string perfilGogCuenta = null;

	protected override async Task OnInitializedAsync()
	{
		await Task.Yield();

		perfil = BaseDatos.Usuarios.Buscar.PerfilCargar(usuarioNombre);

		if (perfil != null)
		{
			perfilSteamCuenta = BaseDatos.Usuarios.Buscar.PerfilSteamCuenta(perfil.Id);
			perfilGogCuenta = BaseDatos.Usuarios.Buscar.PerfilGogCuenta(perfil.Id);

			if (string.IsNullOrEmpty(perfilGogCuenta) == false)
			{
				if (perfilGogCuenta.LastIndexOf("/") == perfilGogCuenta.Length - 1)
				{
					perfilGogCuenta = perfilGogCuenta.Substring(0, perfilGogCuenta.Length - 1);
				}
			}

			if (perfil.ProfileLastPlayed == true)
			{
				enseñarUltimoJugado = true;

				Herramientas.UsuarioListadosJuegos ultimoJugado = Herramientas.UsuarioJuegos.Cargar(perfil.Id);

				if (ultimoJugado != null)
				{
					List<JuegoUsuario> listaGestor = new List<JuegoUsuario>();

					if (ultimoJugado.Steam != null && ultimoJugado.Steam.Count > 0)
					{
						List<string> idsSteam = ultimoJugado.Steam.OrderByDescending(j => j.TiempoJugadoUltimaVez).Take(5).Select(juego => juego.Id.ToString()).ToList();

						listaGestor = global::BaseDatos.Juegos.Buscar.MultiplesJuegosUsuario(listaGestor, Juegos.JuegoDRM.Steam, idsSteam);

						foreach (var juegoSteam in ultimoJugado.Steam)
						{
							foreach (var juegoMostrar in listaGestor)
							{
								if (juegoMostrar.DRMs.Count > 0)
								{
									foreach (var drm in juegoMostrar.DRMs)
									{
										if (drm.DRM == Juegos.JuegoDRM.Steam && juegoSteam.Id.ToString() == drm.Id)
										{
											drm.JugadoTiempo = juegoSteam.TiempoJugadoEnMinutos;
											drm.JugadoUltimaVez = juegoSteam.TiempoJugadoUltimaVez;
										}
									}
								}
							}
						}
					}

					if (ultimoJugado.Gog != null && ultimoJugado.Gog.Count > 0)
					{
						List<string> idsGog = ultimoJugado.Gog.OrderByDescending(j => j.TiempoJugadoUltimaVez).Take(5).Select(juego => juego.Id.ToString()).ToList();

						listaGestor = global::BaseDatos.Juegos.Buscar.MultiplesJuegosUsuario(listaGestor, Juegos.JuegoDRM.GOG, idsGog);

						foreach (var juegoGog in ultimoJugado.Gog)
						{
							foreach (var juegoMostrar in listaGestor)
							{
								if (juegoMostrar.DRMs.Count > 0)
								{
									foreach (var drm in juegoMostrar.DRMs)
									{
										if (drm.DRM == Juegos.JuegoDRM.GOG && juegoGog.Id.ToString() == drm.Id)
										{
											drm.JugadoTiempo = juegoGog.TiempoJugadoEnMinutos;
											drm.JugadoUltimaVez = juegoGog.TiempoJugadoUltimaVez;
										}
									}
								}
							}
						}
					}

					if (listaGestor.Count > 0)
					{
						int mesAnterior = (int)((DateTimeOffset)DateTime.Now.AddMonths(-3)).ToUnixTimeSeconds();

						foreach (var juego in listaGestor)
						{
							foreach (var drm in juego.DRMs)
							{
								if (drm.JugadoUltimaVez > mesAnterior && drm.JugadoTiempo > 5)
								{
                                    listaMostrar.Add(juego);
								}
							}
						}

						if (listaMostrar.Count > 0)
						{
							listaMostrar = listaMostrar.OrderByDescending(j => j.DRMs.Max(d => d.JugadoUltimaVez)).ToList();
                        }
                    }
				}
			}
			else
			{
				if (perfil.ProfileGames == true)
				{
					enseñarJuegos = true;
				}
				else
				{
					if (perfil.ProfileWishlist == true)
					{
						enseñarDeseados = true;
					}
                }
			}
		}
	}

	private string CambiarEstilo(bool enseñar)
	{
		if (enseñar == false)
		{
			return "background-color: transparent;";
		}
		else
		{
			return "background-color: var(--botonSubcabecera); box-shadow: 0px 2px 4px 0px rgba(0, 0, 0, 0.25),0px 0px 1px 0px rgba(0, 0, 0, 0.25);";
		}
	}

	private void PestañasOcultar()
	{
		enseñarUltimoJugado = false;
		enseñarJuegos = false;
        enseñarDeseados = false;
	}

	private bool enseñarUltimoJugado = false;

	private void PestañaUltimoJugado()
	{
		if (enseñarUltimoJugado == false)
		{
			PestañasOcultar();

			enseñarUltimoJugado = true;
		}
		else
		{
			enseñarUltimoJugado = false;
		}
	}

	private bool enseñarJuegos = false;

	private void PestañaJuegos()
	{
		if (enseñarJuegos == false)
		{
			PestañasOcultar();

			enseñarJuegos = true;
		}
		else
		{
			enseñarJuegos = false;
		}
	}

	private bool enseñarDeseados = false;

	private void PestañaDeseados()
	{
		if (enseñarDeseados == false)
		{
			PestañasOcultar();

			enseñarDeseados = true;
		}
		else
		{
			enseñarDeseados = false;
		}
	}
}
