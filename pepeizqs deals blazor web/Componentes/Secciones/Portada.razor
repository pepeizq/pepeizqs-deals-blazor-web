@page "/"

@using BlazorNotification
@using Juegos
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components.Web.Virtualization
@using Microsoft.AspNetCore.Identity
@using Microsoft.Data.SqlClient
@using Microsoft.JSInterop
@using Microsoft.VisualBasic
@using Noticias
@using pepeizqs_deals_blazor_web.Componentes.Interfaz
@using pepeizqs_deals_web.Data
@using System.Text.Json

@inject IHttpContextAccessor Contexto
@inject IBlazorNotificationService ServicioNotificaciones

@{
	#nullable disable

	string titulo = "pepeizq's deals • " + Herramientas.Idiomas.BuscarTexto(idioma, "Subtitle", "Index");
	string descripcion = Herramientas.Idiomas.BuscarTexto(idioma, "Subtitle", "Index");
	string enlace = "https://pepeizqdeals.com/";
	string enlace2 = "https://pepeizqdeals.com/contact";
	string imagen = "https://pepeizqdeals.com/logo/logoentrada.webp";
	string imagen2 = "https://pepeizqdeals.com/logo/logo6.png";

	string[] keywordsEnBruto = Herramientas.Buscador.LimpiarNombre(descripcion, false).Split(' ');
    List<string> keywordsLista = new List<string>();
    keywordsLista.AddRange(keywordsEnBruto);

    string keywords = "deals";

    foreach (string keyword in keywordsLista)
    {
        if (keyword.Length > 3)
        {
            keywords = keywords + ", " + keyword;
        }
    }

	<HeadContent>
		<PageTitle>@titulo</PageTitle>

		<meta name="og:title" content="@titulo" />
		<meta name="description" content="@descripcion" />
		<meta name="og:description" content="@descripcion" />
		<meta name="og:url" content="@enlace" />
		<meta name="og:image" content="@imagen" />
		<meta name="og:site_name" content="pepeizq's deals" />
		<meta name="og:type" content="website" />
		<meta name="robots" content="index, follow" />
		<meta name="keywords" content="@keywords" />

		<script type="application/ld+json">
			{
			  "@@context": "https://schema.org",
			  "@@type": "BreadcrumbList",
			  "itemListElement": [{
				"@@type": "ListItem",
				"position": 1,
				"name": "Bundles",
				"item": "https://pepeizqdeals.com/bundles"
			  },{
				"@@type": "ListItem",
				"position": 2,
				"name": "Historial Lows",
				"item": "https://pepeizqdeals.com/historical-lows"
			  },{
				"@@type": "ListItem",
				"position": 3,
				"name": "Free",
				"item": "https://pepeizqdeals.com/free"
			  },{
				"@@type": "ListItem",
				"position": 4,
				"name": "Subscriptions",
				"item": "https://pepeizqdeals.com/subscriptions"
			  },{
				"@@type": "ListItem",
				"position": 5,
				"name": "Patreon",
				"item": "https://pepeizqdeals.com/patreon"
			  },{
				"@@type": "ListItem",
				"position": 6,
				"name": "Compare",
				"item": "https://pepeizqdeals.com/compare"
			  },{
				"@@type": "ListItem",
				"position": 7,
				"name": "API",
				"item": "https://pepeizqdeals.com/api"
			  },{
				"@@type": "ListItem",
				"position": 8,
				"name": "Last Added",
				"item": "https://pepeizqdeals.com/last-added"
			  }]
			}
		</script>

		<script type="application/ld+json">
			@{
				WebApplicationBuilder builder = WebApplication.CreateBuilder();
				string? patreon = builder.Configuration.GetValue<string>("RedesSociales:Patreon");
				string? discord = builder.Configuration.GetValue<string>("RedesSociales:Discord");
				string? telegram = builder.Configuration.GetValue<string>("RedesSociales:Telegram");
				string? twitter = builder.Configuration.GetValue<string>("RedesSociales:Twitter");
				string? steam = builder.Configuration.GetValue<string>("RedesSociales:Steam");
				string? bluesky = builder.Configuration.GetValue<string>("RedesSociales:Bluesky");

				string seoJson = "{" + Environment.NewLine +
					Strings.ChrW(34) + "@context" + Strings.ChrW(34) + ":" + Strings.ChrW(34) + "https://schema.org" + Strings.ChrW(34) + "," + Environment.NewLine +
					Strings.ChrW(34) + "@type" + Strings.ChrW(34) + ":" + Strings.ChrW(34) + "Organization" + Strings.ChrW(34) + "," + Environment.NewLine +
					Strings.ChrW(34) + "name" + Strings.ChrW(34) + ":" + Strings.ChrW(34) + "pepeizq's deals" + Strings.ChrW(34) + "," + Environment.NewLine +
					Strings.ChrW(34) + "description" + Strings.ChrW(34) + ":" + Strings.ChrW(34) + descripcion + Strings.ChrW(34) + "," + Environment.NewLine +
					Strings.ChrW(34) + "url" + Strings.ChrW(34) + ":" + Strings.ChrW(34) + enlace + Strings.ChrW(34) + "," + Environment.NewLine +
					Strings.ChrW(34) + "brand" + Strings.ChrW(34) + ":" + Strings.ChrW(34) + "pepeizq's apps" + Strings.ChrW(34) + "," + Environment.NewLine +
					Strings.ChrW(34) + "logo" + Strings.ChrW(34) + ": {" + Environment.NewLine +
					Strings.ChrW(34) + "@type" + Strings.ChrW(34) + ":" + Strings.ChrW(34) + "ImageObject" + Strings.ChrW(34) + "," +
					Strings.ChrW(34) + "logo" + Strings.ChrW(34) + ":" + Strings.ChrW(34) + imagen2 + Strings.ChrW(34) + "," +
					Strings.ChrW(34) + "caption" + Strings.ChrW(34) + ":" + Strings.ChrW(34) + "pepeizq's deals logo" + Strings.ChrW(34) + "} ," +
					Strings.ChrW(34) + "contactPoint" + Strings.ChrW(34) + ": [{" + Environment.NewLine +
					Strings.ChrW(34) + "@type" + Strings.ChrW(34) + ":" + Strings.ChrW(34) + "ContactPoint" + Strings.ChrW(34) + "," +
					Strings.ChrW(34) + "contactType" + Strings.ChrW(34) + ":" + Strings.ChrW(34) + "customer service" + Strings.ChrW(34) + "," +
					Strings.ChrW(34) + "url" + Strings.ChrW(34) + ":" + Strings.ChrW(34) + enlace2 + Strings.ChrW(34) + "," +
					Strings.ChrW(34) + "availableLanguage" + Strings.ChrW(34) + ": [" + Strings.ChrW(34) + "English" + Strings.ChrW(34) + "," + Strings.ChrW(34) + "Spanish" + Strings.ChrW(34) + "]}]," + Environment.NewLine +
					Strings.ChrW(34) + "sameAs" + Strings.ChrW(34) + ": [" + Strings.ChrW(34) + patreon + Strings.ChrW(34) + "," + Strings.ChrW(34) + discord + Strings.ChrW(34) + "," + Strings.ChrW(34) + telegram + Strings.ChrW(34) + "," + Strings.ChrW(34) + twitter + Strings.ChrW(34) + "," + Strings.ChrW(34) + steam + Strings.ChrW(34) + "," + Strings.ChrW(34) + bluesky + Strings.ChrW(34) + "]";

				seoJson = seoJson + Environment.NewLine + "}";
            }

            @((MarkupString)seoJson)
        </script>

		<link rel="canonical" href="@enlace" />
		<link title="pepeizq's deals • @Herramientas.Idiomas.BuscarTexto(idioma, "Title", "LastNews")" rel="alternate" type="application/rss+xml" href="https://pepeizqdeals.com/rss-en.xml" />
	</HeadContent>
}

<style>
	.portada-espacio {
		margin: 40px auto;
	}

	.portada-sub-subcabecera {
		padding: 20px 0px;
	}

	.destacado-fondo {
		display: block;
	}

	.destacado-video {
		display: none;
	}

	.destacado-mostrar:hover .destacado-fondo {
		display: none;
	}

	.destacado-mostrar:hover .destacado-video {
		display: block;
	}

	.destacados-galeria-cursor {
		cursor: pointer;
	}

	.destacados-galeria-fila {
		display: flex;
		overflow: auto;
	}

	.destacados-galeria-fila:after {
		content: "";
		display: table;
		clear: both;
	}

	.destacados-galeria-columna {
		float: left;
		width: 16.66%;
		flex: 0 0 auto;
		padding: 3px 3px 0px 3px;
		aspect-ratio: 92/43;
	}

	.destacados-galeria-captura {
		opacity: 0.3;
		object-fit: cover;
		overflow: hidden;
		transition: transform .2s;
		min-width: 100px;
		min-height: 50px;
		max-width: 100%;
	}

	.destacados-galeria-captura:hover {
		opacity: 1;
		transform: scale(1.01);
	}

	.destacado-hueco {
		padding: 80px 60px 30px 60px;
	}

	.destacado-logo-medidas {
		width: 16vw;
		height: 8vw;
		object-fit: contain;
	}

	.destacado-logo-alto {
		height: 150px;
	}

	.destacado-precio-descuento {
		padding: 12px 15px;
		font-size: 22px;
	}

	.destacado-icono {
		width: 40px;
		height: 40px;
	}

	@@media (max-width: 1000px) {
		.portada-espacio {
			margin: 0px auto;
		}

		.portada-sub-subcabecera {
			padding: 20px 5px;
		}

		.destacado-hueco {
			padding: 40px 30px 15px 30px;
		}

		.destacado-logo-medidas {
			width: 16vw;
			height: 8vw;
		}

		.destacado-logo-alto {
			height: 100px;
		}

		.destacado-precio-descuento {
			padding: 6px 8px;
			font-size: 15px;
		}

		.destacado-icono {
			width: 24px;
			height: 24px;
		}
	}

	.destacado-progreso {
		background-color: var(--fondoCodigo);
		animation: barraProgreso 30s ease-in-out;
	}

	@@keyframes barraProgreso {
	0% { width: 0; }
	100% { width: 100%; }
	}
</style>
	
@if (juegosDestacadosMostrar.Count > 0)
{
	<div class="portada-espacio">
		@if (juegoSeleccionado != null)
		{
			string colorSeleccionado = "var(--fondoOscuro)";

			if (Herramientas.UsuarioJuegos.ComprobarSiTiene(juegosUsuario, juegoSeleccionado, juegoSeleccionado.PrecioMinimosHistoricos[0].DRM) == true)
			{
				colorSeleccionado = "var(--fondoBien)";
			}
			else
			{
				if (Herramientas.Deseados.ComprobarSiEsta(deseadosUsuario, juegoSeleccionado, juegoSeleccionado.PrecioMinimosHistoricos[0].DRM, true) == true)
				{
					colorSeleccionado = "var(--fondoAlerta)";
				}
			}

			<a href="/game/@juegoSeleccionado.IdMaestra.ToString()/@Herramientas.EnlaceAdaptador.Nombre(juegoSeleccionado.Nombre)/" style="cursor: pointer; border: 0px; padding: 0px; display: block; width: 100%;">
				<div style="position: relative; padding: 3px; background-color: @colorSeleccionado;">
					<div class="destacado-mostrar" @onmouseover="@(e => EnseñarDestacadoVideo(e, juegoSeleccionado))">
						@if (string.IsNullOrEmpty(videoDestacado) == false)
						{
							<div class="destacado-fondo">
								<img src="@Herramientas.Ficheros.Imagenes.ServidorExterno(fondoDestacado, 1314, 424)" style="width: 100%;" alt="@juegoSeleccionado.Nombre">
							</div>

							<div class="destacado-video">
								<video onloadedmetadata="this.muted=true" playsinline autoplay loop muted style="height: 100%; width: 100%; overflow: hidden; aspect-ratio: 3.145/1; object-fit: cover;">
									<source src="@videoDestacado" type="video/mp4" />
									<source src="@videoDestacado.Replace(".mp4", ".webm")" type="video/webm" />
								</video>
							</div>
						}
						else
						{
							<img src="@Herramientas.Ficheros.Imagenes.ServidorExterno(fondoDestacado, 1314, 424)" style="width: 100%; aspect-ratio: 96/31;" alt="@juegoSeleccionado.Nombre">
						}

						<div style="position: absolute; left: 0; bottom: 0; background-image: linear-gradient(to bottom, rgba(255,0,0,0), @colorSeleccionado);
															display: flex; align-items: end; justify-content: space-between; width: 100%;" class="destacado-hueco">

							<img src="@Herramientas.Ficheros.Imagenes.ServidorExterno(logoDestacado)" class="destacado-logo-medidas" alt="@juegoSeleccionado.Nombre">

							<div style="display: flex; align-items: center; margin-bottom: 30px; color: var(--colorTexto);">
								<img class="destacado-icono" src="@Herramientas.Ficheros.Imagenes.ServidorExterno(JuegoDRM2.SacarImagen(juegoSeleccionado.PrecioMinimosHistoricos[0].DRM), 40, 40)" style="margin-right: 20px;" alt="DRM" />

								@{
									string iconoTienda = string.Empty;
									List<Tiendas2.Tienda> tiendas = Tiendas2.TiendasCargar.GenerarListado();

									foreach (var tienda in tiendas)
									{
										if (tienda.Id == juegoSeleccionado.PrecioMinimosHistoricos[0].Tienda)
										{
											iconoTienda = tienda.ImagenIcono;
											break;
										}
									}
								}

								<img class="destacado-icono" src="@Herramientas.Ficheros.Imagenes.ServidorExterno(iconoTienda, 40, 40)" style="margin-right: 40px;" alt="Store" />

								<div class="destacado-precio-descuento" style="background-color: darkgreen;">
									@juegoSeleccionado.PrecioMinimosHistoricos[0].Descuento.ToString()%
								</div>
								<div class="destacado-precio-descuento" style="background-color: var(--fondoOscuro);">
									@{
										string precioMostrar = string.Empty;

										if (juegoSeleccionado.PrecioMinimosHistoricos?[0].PrecioCambiado > 0)
										{
											precioMostrar = Herramientas.Precios.Euro(juegoSeleccionado.PrecioMinimosHistoricos?[0].PrecioCambiado);
										}
										else
										{
											precioMostrar = Herramientas.Precios.Euro(juegoSeleccionado.PrecioMinimosHistoricos?[0].Precio);
										}
									}

									@precioMostrar
								</div>
							</div>
						</div>
					</div>
				</div>
			</a>
		}

		<div class="destacados-galeria-fila">
			@foreach (var destacado in juegosDestacadosMostrar)
			{
				bool mostrarBarra = false;
				string opacidad = string.Empty;

				if (juegoSeleccionado != null)
				{
					if (destacado.IdMaestra == juegoSeleccionado.IdMaestra)
					{
						opacidad = "opacity: 1;";
						mostrarBarra = true;
					}
				}

				string colorFondoDestacado = "background-color: var(--fondoOscuro);";

				if (Herramientas.UsuarioJuegos.ComprobarSiTiene(juegosUsuario, destacado, destacado.PrecioMinimosHistoricos[0].DRM) == true)
				{
					colorFondoDestacado = "background-color: var(--fondoBien);";
				}
				else
				{
					if (Herramientas.Deseados.ComprobarSiEsta(deseadosUsuario, destacado, destacado.PrecioMinimosHistoricos[0].DRM, true) == true)
					{
						colorFondoDestacado = "background-color: var(--fondoAlerta);";
					}
				}

				<div class="destacados-galeria-columna" @onclick="@(e => CambiarJuegoDestacado(e, destacado))" style="@colorFondoDestacado">
					<img @key="destacado.Id.ToString()" class="destacados-galeria-captura destacados-galeria-cursor" src="@Herramientas.Ficheros.Imagenes.ServidorExterno(destacado.Imagenes.Header_460x215, 214, 100)" style="@opacidad" alt="@destacado.Nombre">

					@if (mostrarBarra == true)
					{
						<div style="height: 3px; width: 100%; background-color: transparent;">
							<div class="destacado-progreso" style="height: 3px;" />
						</div>
					}
				</div>
			}
		</div>
	</div>
}

<div class="subcabecera" style="background-color: var(--fondoSubsubcabecera);">
	<div class="cuerpo-ancho portada-sub-subcabecera" style="font-size: 18px; display: flex; align-items: center; gap: 20px; flex-wrap: wrap;">
		@if (Herramientas.Bots.UserAgentEsBot(userAgent) == false)
		{
			<button class="boton-pequeño" style="@CambiarEstilo(Noticias.NoticiaTipo.Desconocido) width: fit-content; padding: 8px 20px; border-radius: 5px;" @onclick="@(e => CambiarTipo(e, Noticias.NoticiaTipo.Desconocido))">
				<h1 style="font-size: 18px; margin: 0px;">
					@Herramientas.Idiomas.BuscarTexto(idioma, "String2", "Index")
				</h1>
			</button>

			@if (tiposActualesNoticias.Count > 1)
			{
				tiposActualesNoticias = tiposActualesNoticias.OrderBy(x => Noticias.NoticiasCargar.Traduccion(x, idioma)).ToList();

				foreach (var tipo in tiposActualesNoticias)
				{
					if (tipo != NoticiaTipo.Desconocido)
					{
						<button class="boton-pequeño" style="@CambiarEstilo(tipo) width: fit-content; font-size: 18px; padding: 8px 20px; border-radius: 5px;" @onclick="@(e => CambiarTipo(e, tipo))" title="@Noticias.NoticiasCargar.Traduccion(tipo, idioma)">
							@Noticias.NoticiasCargar.Traduccion(tipo, idioma)
						</button>
					}
				}
			}
		}
		else
		{
			<h1 style="font-size: 18px; margin: 0px;">
				@Herramientas.Idiomas.BuscarTexto(idioma, "String2", "Index")
			</h1>
		}

		<div style="margin-left: auto; display: flex; justify-content: right; align-items: center; gap: 20px;">
			<RedesSociales idioma="@idioma" />
		</div>
	</div>
</div>

<div class="subcabecera" style="background-color: var(--fondoPortadaNoticias);">
    <div class="cuerpo-ancho" style="padding: 20px 0px; display: flex; flex-direction: column; gap: 40px;">
		@{
			string marginAbajo = string.Empty;

			if (noticias.Count > 0)
			{
				marginAbajo = "margin-bottom: 20px;";

				<div title="@Herramientas.Idiomas.BuscarTexto(idioma, "String1", "Index")">
					<Virtualize Context="noticia" Items="noticias">
						<ItemContent>
							<CajaNoticia idioma="@idioma" noticia="@noticia" tipo="@CajaNoticia.Tipo.Portada" />
						</ItemContent>
					</Virtualize>
				</div>
			}
		}

		<div style="display: flex; align-items: center; gap: 40px; justify-content: center; @marginAbajo">
			<a class="boton-pequeño" style="padding: 15px 30px; width: fit-content;" href="/last-news">
				@Herramientas.Idiomas.BuscarTexto(idioma, "String4", "Index")
			</a>
		</div>
	</div>
</div>

@if (juegosMinimosMostrar.Count > 0)
{
	<div class="subcabecera" style="background-color: var(--fondoSubsubcabecera);">
		<div class="cuerpo-ancho portada-sub-subcabecera" style="font-size: 18px; display: flex; align-items: center; gap: 20px; flex-wrap: wrap;">
			@if (Herramientas.Bots.UserAgentEsBot(userAgent) == false)
			{
				<button class="boton-pequeño" style="@CambiarEstilo(MinimosTipo.Nuevos) width: fit-content; padding: 8px 20px; border-radius: 5px;" @onclick="@(e => CambiarTipo(e, MinimosTipo.Nuevos))">
					<div style="font-size: 18px; margin: 0px;">
						@CambiarTexto(MinimosTipo.Nuevos, Herramientas.Idiomas.BuscarTexto(idioma, "String3", "Index"))
					</div>
				</button>

				<button class="boton-pequeño" style="@CambiarEstilo(MinimosTipo.Populares) width: fit-content; padding: 8px 20px; border-radius: 5px;" @onclick="@(e => CambiarTipo(e, MinimosTipo.Populares))">
					<div style="font-size: 18px; margin: 0px;">
						@CambiarTexto(MinimosTipo.Populares, Herramientas.Idiomas.BuscarTexto(idioma, "String5", "Index"))
					</div>
				</button>

				<button class="boton-pequeño" style="@CambiarEstilo(MinimosTipo.Lanzamientos) width: fit-content; padding: 8px 20px; border-radius: 5px;" @onclick="@(e => CambiarTipo(e, MinimosTipo.Lanzamientos))">
					<div style="font-size: 18px; margin: 0px;">
						@CambiarTexto(MinimosTipo.Lanzamientos, Herramientas.Idiomas.BuscarTexto(idioma, "String7", "Index"))
					</div>
				</button>

				<button class="boton-pequeño" style="@CambiarEstilo(MinimosTipo.Proximamente) width: fit-content; padding: 8px 20px; border-radius: 5px;" @onclick="@(e => CambiarTipo(e, MinimosTipo.Proximamente))">
					<div style="font-size: 18px; margin: 0px;">
						@CambiarTexto(MinimosTipo.Proximamente, Herramientas.Idiomas.BuscarTexto(idioma, "String11", "Index"))
					</div>
				</button>

				<div style="margin-left: auto; display: flex; justify-content: right; align-items: center; gap: 20px;">
					<button class="boton-pequeño" @onclick="EnseñarFiltrado" style="width: fit-content; padding: 10px 15px; border: 0px; background-color: transparent;">
						<div style="width: 22px;">
							<svg class="svg-icono" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">
								<path d="M495.9 166.6c3.2 8.7 .5 18.4-6.4 24.6l-43.3 39.4c1.1 8.3 1.7 16.8 1.7 25.4s-.6 17.1-1.7 25.4l43.3 39.4c6.9 6.2 9.6 15.9 6.4 24.6c-4.4 11.9-9.7 23.3-15.8 34.3l-4.7 8.1c-6.6 11-14 21.4-22.1 31.2c-5.9 7.2-15.7 9.6-24.5 6.8l-55.7-17.7c-13.4 10.3-28.2 18.9-44 25.4l-12.5 57.1c-2 9.1-9 16.3-18.2 17.8c-13.8 2.3-28 3.5-42.5 3.5s-28.7-1.2-42.5-3.5c-9.2-1.5-16.2-8.7-18.2-17.8l-12.5-57.1c-15.8-6.5-30.6-15.1-44-25.4L83.1 425.9c-8.8 2.8-18.6 .3-24.5-6.8c-8.1-9.8-15.5-20.2-22.1-31.2l-4.7-8.1c-6.1-11-11.4-22.4-15.8-34.3c-3.2-8.7-.5-18.4 6.4-24.6l43.3-39.4C64.6 273.1 64 264.6 64 256s.6-17.1 1.7-25.4L22.4 191.2c-6.9-6.2-9.6-15.9-6.4-24.6c4.4-11.9 9.7-23.3 15.8-34.3l4.7-8.1c6.6-11 14-21.4 22.1-31.2c5.9-7.2 15.7-9.6 24.5-6.8l55.7 17.7c13.4-10.3 28.2-18.9 44-25.4l12.5-57.1c2-9.1 9-16.3 18.2-17.8C227.3 1.2 241.5 0 256 0s28.7 1.2 42.5 3.5c9.2 1.5 16.2 8.7 18.2 17.8l12.5 57.1c15.8 6.5 30.6 15.1 44 25.4l55.7-17.7c8.8-2.8 18.6-.3 24.5 6.8c8.1 9.8 15.5 20.2 22.1 31.2l4.7 8.1c6.1 11 11.4 22.4 15.8 34.3zM256 336a80 80 0 1 0 0-160 80 80 0 1 0 0 160z" />
							</svg>
						</div>
					</button>
				</div>
			}
			else
			{
				<div style="font-size: 18px; margin: 0px;">
					@Herramientas.Idiomas.BuscarTexto(idioma, "String6", "Index")
				</div>
			}
		</div>
	</div>

	<div class="portada-espacio" style="max-width: 1000px; width: 100vw; margin-top: 20px;">
		<div style="display: flex; flex-direction: column; gap: 30px; margin-bottom: 15px;">
			@{
				CajaJuego.Tipo tipoJuego = CajaJuego.Tipo.PortadaNuevos;

				if (tipoSeleccionadoMinimos == MinimosTipo.Populares)
				{
					tipoJuego = CajaJuego.Tipo.PortadaPopulares;
				}
				else if (tipoSeleccionadoMinimos == MinimosTipo.Lanzamientos)
				{
					tipoJuego = CajaJuego.Tipo.PortadaLanzamientos;
				}
				else if (tipoSeleccionadoMinimos == MinimosTipo.Proximamente)
				{
					tipoJuego = CajaJuego.Tipo.PortadaProximamente;
				}
			}

			<Virtualize Context="juego" Items="juegosMinimosMostrar" ItemSize="107" OverscanCount="12">
				<ItemContent>
					<CajaJuego idioma="@idioma" juego="@juego" juegosUsuario="@juegosUsuario" usuarioDeseadosSteam="@deseadosUsuario?.SteamWishlist" usuarioDeseadosWeb="@deseadosUsuario?.Wishlist" usuarioDeseadosGog="@deseadosUsuario?.GogWishlist" tipo="@tipoJuego" />
				</ItemContent>
			</Virtualize>
		</div>

		@{
			bool llegadoLimite = false;

			if (cantidadJuegosMinimos > juegosMinimosMostrar.Count)
			{
				llegadoLimite = true;
			}
			else
			{
				if (string.IsNullOrEmpty(usuarioId) == false)
				{
					if (usuarioPatreon == true || usuarioAdmin == true)
					{
						if (cantidadJuegosMinimos > 950 && cantidadJuegosMinimos <= 1000)
						{
							llegadoLimite = true;
						}
					}
					else
					{
						if (cantidadJuegosMinimos > 450 && cantidadJuegosMinimos <= 500)
						{
							llegadoLimite = true;
						}
					}
				}
				else
				{
					if (cantidadJuegosMinimos > 150 && cantidadJuegosMinimos <= 200)
					{
						llegadoLimite = true;
					}
				}
			}

			<div style="margin-bottom: 30px; display: flex; align-items: center; justify-content: center; gap: 40px;">
				@if (llegadoLimite == false)
				{
					<button class="boton-pequeño" @onclick="CargarMasMinimos" style="width: fit-content; padding: 15px 30px;">
						@Herramientas.Idiomas.BuscarTexto(idioma, "String8", "Index")
					</button>
				}

				<a class="boton-pequeño" href="/historical-lows" style="width: fit-content; padding: 15px 30px;">
					@Herramientas.Idiomas.BuscarTexto(idioma, "String9", "Index")
				</a>
			</div>
		}
	</div>	
}


@if (mostrarFiltrado == true)
{
	<div class="opciones-panel">
		<div style="max-width: 800px; background-color: var(--fondoSubcabecera); border: 2px solid var(--fondoSubcabecera); margin: 20px auto; overflow-y: scroll; scrollbar-color: var(--fondoCodigo) var(--fondoOscuro); box-shadow: 0px 4px 8px 0px rgba(0, 0, 0, 0.28),0px 0px 2px 0px rgba(0, 0, 0, 0.24);">
			<div style="display: flex; align-items: center; gap: 30px; padding: 20px; background-color: var(--fondoSubsubcabecera);">
				<button class="boton-pequeño" @onclick="OcultarFiltrado" style="width: fit-content; padding: 10px 15px;">
					<div style="max-width: 24px; max-height: 24px;">
						<svg class="svg-icono" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">
							<path d="M9.4 233.4c-12.5 12.5-12.5 32.8 0 45.3l160 160c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3L109.2 288 416 288c17.7 0 32-14.3 32-32s-14.3-32-32-32l-306.7 0L214.6 118.6c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0l-160 160z" />
						</svg>
					</div>
				</button>

				<div style="font-size: 20px;">
					@Herramientas.Idiomas.BuscarTexto(idioma, "Filter", "Index")
				</div>
			</div>

			<div style="display: flex; flex-direction: column; gap: 30px; padding: 20px;">
				<AuthorizeView>
					<Authorized>
						<div style="display: flex; flex-direction: column; gap: 30px; background-color: var(--fondoSubsubcabecera); border: 2px solid var(--fondoSubcabecera); box-shadow: 0px 4px 8px 0px rgba(0, 0, 0, 0.28),0px 0px 2px 0px rgba(0, 0, 0, 0.24); padding: 20px;">
							<div style="display: flex; align-items: center; gap: 20px;">
								<div class="checkbox-caja">
									<input type="checkbox" class="checkbox-interior" checked="@ocultarJuegosUsuarioSteam" @onchange="OcultarJuegosUsuarioSteam">
								</div>

								<div style="padding-bottom: 5px;">
									@Herramientas.Idiomas.BuscarTexto(idioma, "FilterOption1", "Index")
								</div>
							</div>

							<div style="display: flex; align-items: center; gap: 20px;">
								<div class="checkbox-caja">
									<input type="checkbox" class="checkbox-interior" checked="@ocultarJuegosUsuarioGog" @onchange="OcultarJuegosUsuarioGog">
								</div>

								<div style="padding-bottom: 5px;">
									@Herramientas.Idiomas.BuscarTexto(idioma, "FilterOption4", "Index")
								</div>
							</div>
						</div>
					</Authorized>
				</AuthorizeView>

				<div style="background-color: var(--fondoSubsubcabecera); border: 2px solid var(--fondoSubcabecera); box-shadow: 0px 4px 8px 0px rgba(0, 0, 0, 0.28),0px 0px 2px 0px rgba(0, 0, 0, 0.24); padding: 20px;">
					<div style="padding-bottom: 15px;">
						@Herramientas.Idiomas.BuscarTexto(idioma, "FilterOption2", "Index")
					</div>

					<div style="display: grid; grid-template-columns: repeat(5, 1fr); gap: 20px;">
						@foreach (var drm in drms)
						{
							string iconoDRM = string.Empty;
							string nombreDRM = string.Empty;

							foreach (var drm2 in JuegoDRM2.GenerarListado())
							{
								if (drm2.Id == drm.DRMId)
								{
									iconoDRM = drm2.Imagen;
									nombreDRM = drm2.Nombre;
								}
							}

							<div style="display: flex; align-items: center;" title="@nombreDRM">
								<div class="checkbox-caja">
									<input type="checkbox" class="checkbox-interior" checked="@drm.Checkbox" @onchange="@(e => EnseñarJuegosDRM(e, drm.DRMId))">
								</div>

								@if (drm.DRMId != JuegoDRM.DRMFree)
								{
									<div style="margin-left: 20px; padding-bottom: 10px;">
										<img src="@Herramientas.Ficheros.Imagenes.ServidorExterno(iconoDRM)" style="max-width: 24px; max-height: 24px;" title="@nombreDRM" loading="lazy" />
									</div>
								}
								else
								{
									<div style="margin-left: 20px; padding-bottom: 5px;">
										<label style="font-size: 10px; max-width: 24px; text-align: center;">@nombreDRM</label>
									</div>
								}
							</div>
						}
					</div>
				</div>

				<div style="background-color: var(--fondoSubsubcabecera); border: 2px solid var(--fondoSubcabecera); box-shadow: 0px 4px 8px 0px rgba(0, 0, 0, 0.28),0px 0px 2px 0px rgba(0, 0, 0, 0.24); padding: 20px;">
					<div style="padding-bottom: 15px;">
						@Herramientas.Idiomas.BuscarTexto(idioma, "FilterOption3", "Index")
					</div>

					<div style="display: grid; grid-template-columns: repeat(4, 1fr); gap: 20px;">
						@foreach (var categoria in categorias)
						{
							string nombreCategoria = string.Empty;

							if (categoria.Categoria == JuegoTipo.Game)
							{
								nombreCategoria = Herramientas.Idiomas.BuscarTexto(idioma, "FilterOption3.1", "Index");
							}
							else if (categoria.Categoria == JuegoTipo.DLC)
							{
								nombreCategoria = Herramientas.Idiomas.BuscarTexto(idioma, "FilterOption3.2", "Index");
							}
							else if (categoria.Categoria == JuegoTipo.Music)
							{
								nombreCategoria = Herramientas.Idiomas.BuscarTexto(idioma, "FilterOption3.3", "Index");
							}
							else if (categoria.Categoria == JuegoTipo.Software)
							{
								nombreCategoria = Herramientas.Idiomas.BuscarTexto(idioma, "FilterOption3.4", "Index");
							}

							<div style="display: flex; align-items: center;" title="@nombreCategoria">
								<div class="checkbox-caja">
									<input type="checkbox" class="checkbox-interior" checked="@categoria.Checkbox" @onchange="@(e => EnseñarJuegosCategoria(e, categoria.Categoria))">
								</div>

								<div style="margin-left: 15px; padding-bottom: 8px;">
									<label style="font-size: 14px;">@nombreCategoria</label>
								</div>
							</div>
						}
					</div>
				</div>
			</div>
		</div>
	</div>
}

@code {

	#nullable disable

	private string idioma = "en";
	private string usuarioId = null;
	private string userAgent = null;

	[PersistentState] public Herramientas.UsuarioListadosJuegos juegosUsuario { get; set; }
	[PersistentState] public Usuario deseadosUsuario { get; set; }
	private bool usuarioPatreon = false;
	private bool usuarioAdmin = false;

	private string fondoDestacado = string.Empty;
	private string logoDestacado = string.Empty;
	private string videoDestacado = string.Empty;

	private SqlConnection conexion = new SqlConnection();

	protected override void OnInitialized()
	{
		idioma = Contexto.HttpContext.Request.Headers["Accept-Language"].ToString().Split(";").FirstOrDefault()?.Split(",").FirstOrDefault();
		usuarioId = Contexto.HttpContext.User.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value;
		userAgent = Contexto.HttpContext.Request.Headers.UserAgent.ToString();

		if (string.IsNullOrEmpty(usuarioId) == false)
		{
			idioma = BaseDatos.Usuarios.Buscar.IdiomaSobreescribir(usuarioId);
			juegosUsuario ??= Herramientas.UsuarioJuegos.Cargar(usuarioId);
			deseadosUsuario ??= BaseDatos.Usuarios.Buscar.DeseadosTiene(usuarioId);
			usuarioPatreon = Herramientas.Patreon.VerificarActivo(BaseDatos.Usuarios.Buscar.FechaPatreon(usuarioId));
			usuarioAdmin = BaseDatos.Usuarios.Buscar.RolDios(usuarioId);

			Usuario opciones = BaseDatos.Usuarios.Buscar.OpcionesPortada(usuarioId);

			if (opciones != null)
			{
				#region Filtrado

				if (opciones.IndexOption1 == true)
				{
					ocultarJuegosUsuarioSteam = "checked";
				}
				else
				{
					ocultarJuegosUsuarioSteam = null;
				}

				if (opciones.IndexOption2 == true)
				{
					ocultarJuegosUsuarioGog = "checked";
				}
				else
				{
					ocultarJuegosUsuarioGog = null;
				}

				if (string.IsNullOrEmpty(opciones.IndexDRMs) == false)
				{
					drms = JsonSerializer.Deserialize<List<MostrarJuegoDRM>>(opciones.IndexDRMs);
				}

				if (string.IsNullOrEmpty(opciones.IndexCategories) == false)
				{
					categorias = JsonSerializer.Deserialize<List<MostrarJuegoCategoria>>(opciones.IndexCategories);
				}

				#endregion
			}
		}

		//------------------------------------------------

		conexion = Herramientas.BaseDatos.Conectar();

		using (conexion)
		{
			#region Destacados

			juegosDestacadosMostrar ??= BaseDatos.Portada.Buscar.Destacados(conexion);

			if (juegosDestacadosMostrar.Count > 0)
			{
				juegoSeleccionado = juegosDestacadosMostrar[0];
				CambiarDestacadoImagenes();
			}

			CronometroDestacados();

			#endregion

			#region Noticias

			try
			{
				noticias ??= BaseDatos.Noticias.Buscar.Actuales(tipoSeleccionadoNoticias, 3, conexion);

				if (noticias != null)
				{
					if (noticias.Count > 0)
					{
						foreach (var noticia in noticias)
						{
							bool añadirTipo = true;

							if (tiposActualesNoticias.Count > 0)
							{
								foreach (var tipoActual in tiposActualesNoticias)
								{
									if (tipoActual == noticia.Tipo)
									{
										añadirTipo = false;
									}
								}
							}

							if (añadirTipo == true)
							{
								tiposActualesNoticias.Add(noticia.Tipo);
							}
						}
					}
				}

				if (string.IsNullOrEmpty(usuarioId) == false)
				{
					int limiteTiempoNoticias = 90;

					if (usuarioPatreon == true || usuarioAdmin == true)
					{
						limiteTiempoNoticias = 30;
					}

					CronometroNoticias(limiteTiempoNoticias);
				}
			}
			catch (Exception ex)
			{
				BaseDatos.Errores.Insertar.Mensaje("Portada Noticias", ex);
			}

			#endregion

			#region Minimos

			Filtros(true);

			if (string.IsNullOrEmpty(usuarioId) == false)
			{
				int limiteTiempoMinimos = 150;

				if (usuarioPatreon == true || usuarioAdmin == true)
				{
					limiteTiempoMinimos = 30;
				}

				CronometroMinimos(limiteTiempoMinimos);
			}

			#endregion
		}
	}

	protected override async Task OnAfterRenderAsync(bool primerRender)
	{
		if (primerRender == true)
		{
			await ServicioNotificaciones.RequestPermissionAsync();
		}
	}

	private void EnseñarDestacadoVideo(EventArgs args, Juegos.Juego juegoDestacado)
	{
		videoDestacado = null;

		if (juegoSeleccionado.Media != null)
		{
			if (juegoSeleccionado.Media.Videos != null)
			{
				if (juegoSeleccionado.Media.Videos.Count > 0)
				{
					videoDestacado = juegoSeleccionado.Media.Videos[0].Micro;
				}
			}
		}
	}

	#region Destacados

	[PersistentState] public List<Juegos.Juego> juegosDestacadosMostrar { get; set; }
	private Juegos.Juego juegoSeleccionado = new Juegos.Juego();
	private PeriodicTimer cronometro = null;
	private int cronometroContador = 0;
	private int cronometroLimite = 30;

	private void CambiarJuegoDestacado(MouseEventArgs args, Juegos.Juego nuevoJuego)
	{
		juegoSeleccionado = nuevoJuego;
		CambiarDestacadoImagenes();

		cronometroContador = 0;
		cronometro.Dispose();
		CronometroDestacados();
	}

	private void CambiarDestacadoImagenes()
	{
		fondoDestacado = juegoSeleccionado.Imagenes.Library_1920x620;
		logoDestacado = juegoSeleccionado.Imagenes.Logo;
		videoDestacado = null;
	}

	private async void CronometroDestacados()
	{
		cronometro = new PeriodicTimer(TimeSpan.FromSeconds(1));

		while (await cronometro.WaitForNextTickAsync())
		{
			cronometroContador += 1;

			if (cronometroContador == cronometroLimite || juegosDestacadosMostrar.Count == 0)
			{
				bool tomarSiguiente = false;

				int i = 0;
				foreach (var destacado in juegosDestacadosMostrar)
				{
					if (tomarSiguiente == true)
					{
						juegoSeleccionado = destacado;
						CambiarDestacadoImagenes();
						break;
					}

					if (destacado.IdMaestra == juegoSeleccionado.IdMaestra)
					{
						tomarSiguiente = true;
					}

					i += 1;
				}

				if (i == juegosDestacadosMostrar.Count)
				{
					juegosDestacadosMostrar = BaseDatos.Portada.Buscar.Destacados(conexion);

					if (juegosDestacadosMostrar.Count > 0)
					{
						juegoSeleccionado = juegosDestacadosMostrar[0];
						CambiarDestacadoImagenes();
					}
				}

				cronometroContador = 0;
			}

			await InvokeAsync(StateHasChanged);
		}
	}

	#endregion

	#region Minimos Lista

	private int cantidadJuegosMinimos = 100;

	private void GenerarListaMinimos(bool cargaInicial = false)
	{
		try
		{
			List<string> categoriasNumeros = new List<string>();

			if (categorias != null)
			{
				if (categorias.Count > 0)
				{
					foreach (var categoria in categorias)
					{
						if (categoria.Estado == true)
						{
							categoriasNumeros.Add(Convert.ChangeType(categoria.Categoria, categoria.Categoria.GetTypeCode()).ToString());
						}
					}
				}
			}

			List<string> drmsNumeros = new List<string>();

			if (drms != null)
			{
				if (drms.Count > 0)
				{
					foreach (var drm in drms)
					{
						if (drm.Estado == true)
						{
							drmsNumeros.Add(Convert.ChangeType(drm.DRMId, drm.DRMId.GetTypeCode()).ToString());
						}
					}
				}
			}

			if (tipoSeleccionadoMinimos == MinimosTipo.Nuevos)
			{
				if (cargaInicial == false)
				{
					juegosMinimosGestor = BaseDatos.Portada.Buscar.Minimos(0, cantidadJuegosMinimos, categoriasNumeros, drmsNumeros, conexion, 199);
				}
				else
				{
					juegosMinimosGestor ??= BaseDatos.Portada.Buscar.Minimos(0, cantidadJuegosMinimos, categoriasNumeros, drmsNumeros, conexion, 199);
				}				
			}
			else if (tipoSeleccionadoMinimos == MinimosTipo.Populares)
			{
				juegosMinimosGestor = BaseDatos.Portada.Buscar.Minimos(1, cantidadJuegosMinimos, categoriasNumeros, drmsNumeros, conexion, 199);
			}
			else if (tipoSeleccionadoMinimos == MinimosTipo.Lanzamientos)
			{
				juegosMinimosGestor = BaseDatos.Portada.Buscar.Minimos(2, cantidadJuegosMinimos, categoriasNumeros, drmsNumeros, conexion, 49);
			}
			else if (tipoSeleccionadoMinimos == MinimosTipo.Proximamente)
			{
                juegosMinimosGestor = BaseDatos.Portada.Buscar.Proximamente(cantidadJuegosMinimos, categoriasNumeros, drmsNumeros, conexion);
			}
		}
		catch (Exception ex)
		{
			BaseDatos.Errores.Insertar.Mensaje("Portada Minimos", ex);
		}
	}

	private void CargarMasMinimos()
	{
		cantidadJuegosMinimos += 50;

		Filtros();
	}

	private PeriodicTimer cronometroMinimos = null;
	private int cronometroMinimosContador = 0;

	private async void CronometroMinimos(int limite)
	{
		cronometroMinimos = new PeriodicTimer(TimeSpan.FromSeconds(1));

		while (await cronometroMinimos.WaitForNextTickAsync())
		{
			cronometroMinimosContador += 1;

			if (cronometroMinimosContador >= limite)
			{
				Filtros();

				cronometroMinimosContador = 0;
			}

			await InvokeAsync(StateHasChanged);
		}
	}

	private void CambiarTipo(MouseEventArgs e, MinimosTipo nuevoTipo)
	{
		tipoSeleccionadoMinimos = nuevoTipo;

		Filtros();
	}

	private string CambiarEstilo(MinimosTipo nuevoTipo)
	{
		if (nuevoTipo != tipoSeleccionadoMinimos)
		{
			return "background-color: transparent;";
		}
		else
		{
			return "background-color: var(--botonSubcabecera); box-shadow: 0px 2px 4px 0px rgba(0, 0, 0, 0.25),0px 0px 1px 0px rgba(0, 0, 0, 0.25);";
		}
	}

	private string CambiarTexto(MinimosTipo nuevoTipo, string texto)
	{
		if (nuevoTipo == tipoSeleccionadoMinimos)
		{
			return string.Format("{0} {1}", Herramientas.Idiomas.BuscarTexto(idioma, "String6", "Index"), texto);
		}
		else
		{
			return texto;
		}
	}

	#endregion

	#region Minimos Filtrado

	[PersistentState] public List<Juegos.Juego> juegosMinimosGestor { get; set; }
	private List<Juegos.Juego> juegosMinimosMostrar = new List<Juegos.Juego>();
    private MinimosTipo tipoSeleccionadoMinimos = MinimosTipo.Nuevos;

	private enum MinimosTipo
	{
		Nuevos,
		Populares,
		Lanzamientos,
		Proximamente
	}

	private async void Filtros(bool cargaInicial = false)
	{
		GenerarListaMinimos(cargaInicial);

		if (juegosMinimosGestor != null)
		{
			if (juegosMinimosGestor.Count > 0)
			{
				juegosMinimosMostrar.Clear();

				foreach (var juego in juegosMinimosGestor)
				{
					bool ocultar = false;

					if (string.IsNullOrEmpty(ocultarJuegosUsuarioSteam) == false)
					{
						if (ocultarJuegosUsuarioSteam == "checked" && juego.PrecioMinimosHistoricos[0].DRM == JuegoDRM.Steam)
						{
							foreach (var juegoUsuario in juegosUsuario.Steam)
							{
								if (juego.IdSteam == juegoUsuario.Id)
								{
									ocultar = true;
									break;
								}
							}
						}
					}

					if (string.IsNullOrEmpty(ocultarJuegosUsuarioGog) == false)
					{
						if (ocultarJuegosUsuarioGog == "checked" && juego.PrecioMinimosHistoricos[0].DRM == JuegoDRM.GOG)
						{
							foreach (var juegoUsuario in juegosUsuario.Gog)
							{
								if (juego.IdGog == juegoUsuario.Id)
								{
									ocultar = true;
									break;
								}
							}
						}
					}

					if (ocultar == false)
					{
						juegosMinimosMostrar.Add(juego);
					}
				}
			}
		}

		if (juegosMinimosMostrar != null)
		{
			if (juegosMinimosMostrar.Count > 0)
			{
				await InvokeAsync(StateHasChanged);
			}
		}
	}

	private bool mostrarFiltrado = false;

	private void EnseñarFiltrado()
	{
		mostrarFiltrado = true;
	}

	private void OcultarFiltrado()
	{
		mostrarFiltrado = false;
	}

	private string ocultarJuegosUsuarioSteam = null;
	private string ocultarJuegosUsuarioGog = null;

	private void OcultarJuegosUsuarioSteam()
	{
		bool valor = false;

		if (ocultarJuegosUsuarioSteam == "checked")
		{
			ocultarJuegosUsuarioSteam = null;
		}
		else
		{
			ocultarJuegosUsuarioSteam = "checked";
		}

		if (ocultarJuegosUsuarioSteam == "checked")
		{
			valor = true;
		}
		else if (ocultarJuegosUsuarioSteam == null)
		{
			valor = false;
		}

		if (string.IsNullOrEmpty(usuarioId) == false)
		{
			BaseDatos.Usuarios.Actualizar.Opcion("IndexOption1", valor, usuarioId, conexion);
		}
		
		Filtros();
	}

	private void OcultarJuegosUsuarioGog()
	{
		bool valor = false;

		if (ocultarJuegosUsuarioGog == "checked")
		{
			ocultarJuegosUsuarioGog = null;
		}
		else
		{
			ocultarJuegosUsuarioGog = "checked";
		}

		if (ocultarJuegosUsuarioGog == "checked")
		{
			valor = true;
		}
		else if (ocultarJuegosUsuarioGog == null)
		{
			valor = false;
		}

		if (string.IsNullOrEmpty(usuarioId) == false)
		{
			BaseDatos.Usuarios.Actualizar.Opcion("IndexOption2", valor, usuarioId, conexion);
		}	

		Filtros();
	}

	private void EnseñarJuegosDRM(ChangeEventArgs e, JuegoDRM drmElegido)
	{
		foreach (var drm in drms)
		{
			if (drm.DRMId == drmElegido)
			{
				if (drm.Checkbox == null)
				{
					drm.Checkbox = "checked";
					drm.Estado = true;
				}
				else
				{
					drm.Checkbox = null;
					drm.Estado = false;
				}
			}
		}

		if (string.IsNullOrEmpty(usuarioId) == false)
		{
			BaseDatos.Usuarios.Actualizar.Opcion("IndexDRMs", JsonSerializer.Serialize(drms), usuarioId, conexion);
		}

		Filtros();
	}

	private List<MostrarJuegoDRM> drms = CrearListaDRMs();

	public class MostrarJuegoDRM
	{
		public bool Estado { get; set; }
		public string Checkbox { get; set; }
		public JuegoDRM DRMId { get; set; }
	}

	private static List<MostrarJuegoDRM> CrearListaDRMs()
	{
		List<MostrarJuegoDRM> nuevaLista = new List<MostrarJuegoDRM>();

		foreach (var drm in JuegoDRM2.GenerarListado())
		{
			MostrarJuegoDRM nuevoDRM = new MostrarJuegoDRM();
			nuevoDRM.Estado = false;
			nuevoDRM.Checkbox = null;
			nuevoDRM.DRMId = drm.Id;

			if (nuevoDRM.DRMId == JuegoDRM.Steam || nuevoDRM.DRMId == JuegoDRM.GOG || nuevoDRM.DRMId == JuegoDRM.Ubisoft || nuevoDRM.DRMId == JuegoDRM.EA)
			{
				nuevoDRM.Estado = true;
				nuevoDRM.Checkbox = "checked";
			}

			nuevaLista.Add(nuevoDRM);
		}

		return nuevaLista;
	}

	private void EnseñarJuegosCategoria(ChangeEventArgs e, JuegoTipo categoriaElegida)
	{
		foreach (var categoria in categorias)
		{
			if (categoria.Categoria == categoriaElegida)
			{
				if (categoria.Checkbox == null)
				{
					categoria.Checkbox = "checked";
					categoria.Estado = true;
				}
				else
				{
					categoria.Checkbox = null;
					categoria.Estado = false;
				}
			}
		}

		if (string.IsNullOrEmpty(usuarioId) == false)
		{
			BaseDatos.Usuarios.Actualizar.Opcion("IndexCategories", JsonSerializer.Serialize(categorias), usuarioId, conexion);
		}
		
		Filtros();
	}

	private List<MostrarJuegoCategoria> categorias = CrearListaCategorias();

	public class MostrarJuegoCategoria
	{
		public bool Estado { get; set; }
		public string Checkbox { get; set; }
		public JuegoTipo Categoria { get; set; }
	}

	private static List<MostrarJuegoCategoria> CrearListaCategorias()
	{
		List<MostrarJuegoCategoria> nuevaLista = new List<MostrarJuegoCategoria>();

		foreach (var categoria in JuegoTipos.CargarListado())
		{
			if (categoria != JuegoTipo.Bundle)
			{
				MostrarJuegoCategoria nuevaTienda = new MostrarJuegoCategoria();
				nuevaTienda.Estado = true;
				nuevaTienda.Checkbox = "checked";
				nuevaTienda.Categoria = categoria;

				nuevaLista.Add(nuevaTienda);
			}
		}

		return nuevaLista;
	}

	#endregion

	#region Noticias

	[PersistentState]
	public List<Noticias.Noticia> noticias { get; set; }

	private PeriodicTimer cronometroNoticias = null;
	private int cronometroNoticiasContador = 0;

	private async void CronometroNoticias(int limite)
	{
		cronometroNoticias = new PeriodicTimer(TimeSpan.FromSeconds(1));

		while (await cronometroNoticias.WaitForNextTickAsync())
		{
			cronometroNoticiasContador += 1;

			if (cronometroNoticiasContador >= limite)
			{
				noticias = BaseDatos.Noticias.Buscar.Actuales(tipoSeleccionadoNoticias, 3, conexion);

				cronometroNoticiasContador = 0;
			}

			await InvokeAsync(StateHasChanged);
		}
	}

	private NoticiaTipo tipoSeleccionadoNoticias = NoticiaTipo.Desconocido;
	private List<NoticiaTipo> tiposActualesNoticias = new List<NoticiaTipo>();

	private void CambiarTipo(MouseEventArgs e, NoticiaTipo nuevoTipo)
	{
		tipoSeleccionadoNoticias = nuevoTipo;
		noticias = BaseDatos.Noticias.Buscar.Actuales(tipoSeleccionadoNoticias, 3, conexion);
	}

	private string CambiarEstilo(NoticiaTipo nuevoTipo)
	{
		if (nuevoTipo != tipoSeleccionadoNoticias)
		{
			return "background-color: transparent;";
		}
		else
		{
			return "background-color: var(--botonSubcabecera); box-shadow: 0px 2px 4px 0px rgba(0, 0, 0, 0.25),0px 0px 1px 0px rgba(0, 0, 0, 0.25);";
		}
	}

	#endregion
}
