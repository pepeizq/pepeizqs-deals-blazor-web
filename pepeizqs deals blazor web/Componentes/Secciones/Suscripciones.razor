@page "/subscriptions"
@page "/subscriptions/{suscripcionSeleccionadaTexto}/"

@using APIs.Steam
@using Juegos
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components.Web.Virtualization
@using Microsoft.AspNetCore.Identity
@using Microsoft.VisualBasic
@using pepeizqs_deals_blazor_web.Componentes.Interfaz
@using pepeizqs_deals_web.Data
@using System.Text.Json

@inject IHttpContextAccessor Contexto
@inject IJSRuntime JavaScript

@{
    string tituloSuscripcion = string.Empty;
    string contenidoJson = string.Empty;

    if (suscripcionesActuales?.Count > 0)
    {
        foreach (var componente in suscripcionesActuales)
        {
            if (Herramientas.EnlaceAdaptador.Nombre(componente.Tipo.Nombre.ToLower()) == suscripcionSeleccionadaTexto)
            {
                tituloSuscripcion = componente.Tipo.Nombre;

                contenidoJson = @"{
                    ""@context"": ""https://schema.org"",
				    ""@type"": ""ItemList"",
				    ""name"": ""@titulo"",
				    ""numberOfItems"": ""@cantidad"",
                    ""itemListOrder"": ""Descending"",
                    ""itemListElement"": [";

                contenidoJson = contenidoJson.Replace("@titulo", tituloSuscripcion);
                contenidoJson = contenidoJson.Replace("@cantidad", componente.Juegos.Count.ToString());

                int i = 0;
                while (i < componente.Juegos.Count)
                {
                    if (i != 0)
                    {
                        contenidoJson = contenidoJson + ",";
                    }

                    contenidoJson = contenidoJson + "{" + Environment.NewLine +
                        Strings.ChrW(34) + "@type" + Strings.ChrW(34) + ":" + Strings.ChrW(34) + "ListItem" + Strings.ChrW(34) + "," + Environment.NewLine +
                        Strings.ChrW(34) + "position" + Strings.ChrW(34) + ":" + Strings.ChrW(34) + (i + 1).ToString() + Strings.ChrW(34) + "," + Environment.NewLine +
                        Strings.ChrW(34) + "name" + Strings.ChrW(34) + ":" + Strings.ChrW(34) + componente.Juegos[i].Nombre + Strings.ChrW(34) + "," + Environment.NewLine +
                        Strings.ChrW(34) + "url" + Strings.ChrW(34) + ":" + Strings.ChrW(34) + "https://pepeizqdeals.com/game/" + componente.Juegos[i].JuegoId.ToString() + "/" + Herramientas.EnlaceAdaptador.Nombre(componente.Juegos[i].Nombre) + "/" + Strings.ChrW(34) + "," + Environment.NewLine +
                        Strings.ChrW(34) + "image" + Strings.ChrW(34) + ":" + Strings.ChrW(34) + componente.Juegos[i].Imagen + Strings.ChrW(34) + "}";

                    i += 1;
                }

                contenidoJson = contenidoJson + "]" + Environment.NewLine + "}";
            }
        }
    }

    string keywords = "subscriptions";

    foreach (var suscripcion in Suscripciones2.SuscripcionesCargar.GenerarListado())
    {
        string[] keywordsEnBruto = Herramientas.Buscador.LimpiarNombre(suscripcion.Nombre, false).Split(' ');
        List<string> keywordsLista = new List<string>();
        keywordsLista.AddRange(keywordsEnBruto);

        foreach (var keyword in keywordsLista)
        {
            if (keywords.Contains(keyword) == false && keyword.Length > 3)
            {
                keywords = keywords + ", " + keyword;
            }
        }
    }

    <Titulo tipo="@Titulo.Tipo.Suscripciones" idioma="@idioma" tituloAlternativoSuscripciones="@tituloSuscripcion" enlaceAlternativoSuscripciones="@suscripcionSeleccionadaTexto" 
            keywords="@keywords" contenidoJsonSuscripciones="@contenidoJson"/>
}

<script>
    function moverScroll(id) {
        const yOffset = -90;
        const element = document.getElementById(id);
        const y = element.getBoundingClientRect().top + window.pageYOffset + yOffset;

        window.scrollTo({ top: y, behavior: 'smooth' });
    }
</script>

<script>
    window.ChangeUrl = function (url) {
        history.pushState(null, '', url);
    }
</script>

<style>
    .suscripciones-grid {
        gap: 30px;
    }

    .suscripcion-grid {
        padding: 30px;
        gap: 30px;
    }

    @@media (max-width: 800px) {
        .suscripciones-grid {
            gap: 15px;
        }

        .suscripcion-grid {
            padding: 15px;
            gap: 15px;
        }
    }
</style>

<style>
    .caja-archivo-contenido {
        background-color: var(--fondoSubsubcabecera);
        border: 2px solid var(--fondoSubcabecera);
        padding: 40px;
        box-shadow: 0px 4px 8px 0px rgba(0, 0, 0, 0.28),0px 0px 2px 0px rgba(0, 0, 0, 0.24);
    }
</style>

<div class="subcabecera">
    <div class="cuerpo-ancho sub-subcabecera">
        @if (Herramientas.Bots.UserAgentEsBot(userAgent) == false)
        {
            <button class="boton-pequeño" style="@CambiarEstilo(Suscripciones2.SuscripcionTipo.Desconocido, false, false) width: fit-content; padding: 8px 20px; border-radius: 5px;" @onclick="@(e => CambiarTipo(e, Suscripciones2.SuscripcionTipo.Desconocido, false, false))">
                <h1 style="font-size: 18px; margin: 0px;">
                    @Herramientas.Idiomas.BuscarTexto(idioma, "Title", "Subscriptions")
                </h1>
            </button>

            @if (suscripcionesActuales?.Count > 0 && mostrarArchivo == false && mostrarUltimas == false)
            {
                if (tipoSeleccionado == Suscripciones2.SuscripcionTipo.Desconocido)
                {
                    foreach (var suscripcionActual in suscripcionesActuales)
                    {
                        if (suscripcionActual.Tipo.Id != Suscripciones2.SuscripcionTipo.Desconocido)
                        {
                            <button class="boton-pequeño" style="@CambiarEstilo(suscripcionActual.Tipo.Id, false, false) width: fit-content; padding: 8px 16px; border-radius: 5px; display: flex; align-items: center;" @onclick="@(e => SuscripcionAbrir(e, suscripcionActual))" title="@Suscripciones2.SuscripcionesCargar.DevolverSuscripcion(suscripcionActual.Tipo.Id).Nombre">
                                <img src="@Herramientas.Ficheros.Imagenes.ServidorExterno(Suscripciones2.SuscripcionesCargar.DevolverSuscripcion(suscripcionActual.Tipo.Id).ImagenIcono)" style="width: 20px; height: 20px;" alt="Store" />
                            </button>
                        }
                    }
                }
                else
                {
                    foreach (var suscripcionActual in suscripcionesActuales)
                    {
                        if (suscripcionActual.Tipo.Id == tipoSeleccionado)
                        {
                            <button class="boton-pequeño" style="@CambiarEstilo(suscripcionActual.Tipo.Id, false, false) width: fit-content; padding: 8px 20px; border-radius: 5px;" @onclick="@(e => SuscripcionAbrir(e, suscripcionActual))" title="@Suscripciones2.SuscripcionesCargar.DevolverSuscripcion(suscripcionActual.Tipo.Id).Nombre">
                                <div style="display: flex; align-items: center; gap: 15px;">
                                    @{
                                        var elegido = Suscripciones2.SuscripcionesCargar.DevolverSuscripcion(suscripcionActual.Tipo.Id);
                                    }

                                    <img src="@Herramientas.Ficheros.Imagenes.ServidorExterno(elegido.ImagenIcono)" style="width: 20px; height: 20px;" alt="@elegido.Nombre" />

                                    <div style="font-size: 16px;">
                                        @elegido.Nombre
                                    </div>
                                </div>
                            </button>
                        }
                    }
                }
            }

            @if (tipoSeleccionado == Suscripciones2.SuscripcionTipo.Desconocido)
            {
                <div style="margin-left: auto; display: flex; justify-content: right; align-items: center; gap: 20px;">
                    <button class="boton-pequeño" style="@CambiarEstilo(Suscripciones2.SuscripcionTipo.Desconocido, false, true) width: fit-content; padding: 8px 20px; border-radius: 5px;" @onclick="@(e => CambiarTipo(e, Suscripciones2.SuscripcionTipo.Desconocido, false, true))">
                        <div style="font-size: 16px;">
                            @Herramientas.Idiomas.BuscarTexto(idioma, "String11", "Subscriptions")
                        </div>
                    </button>

                    <button class="boton-pequeño" style="@CambiarEstilo(Suscripciones2.SuscripcionTipo.Desconocido, true, false) width: fit-content; padding: 8px 20px; border-radius: 5px;" @onclick="@(e => CambiarTipo(e, Suscripciones2.SuscripcionTipo.Desconocido, true, false))">
                        <div style="font-size: 16px;">
                            @Herramientas.Idiomas.BuscarTexto(idioma, "String1", "Subscriptions")
                        </div>
                    </button>
                </div>
            }
            else
            {
                if (suscripcionSeleccionadaTipo.Precio > 0)
                {
                    <div style="font-size: 15px; padding: 8px 20px;">
                        @string.Format(Herramientas.Idiomas.BuscarTexto(idioma, "String8", "Subscriptions"), Herramientas.Precios.Euro((decimal)suscripcionSeleccionadaTipo.Precio))
                    </div>
                }

                <div style="margin-left: auto; display: flex; justify-content: right; align-items: center; gap: 20px;">
                    @if (suscripcionSeleccionadaDRMs.Count > 1)
                    {
                        <div class="menu-dropdown" style="width: auto; flex: 0 0 auto; margin: 0px 20px;">
                            <button class="boton-pequeño" style="background-color: var(--buscadorSubcabecera); display: flex; align-items: center; width: 100%; padding: 8px 15px; margin: 0; border: 0px; color: var(--colorTextoVisitado);">
                                <div style="font-size: 14px; padding-right: 15px;">
                                    @Herramientas.Idiomas.BuscarTexto(idioma, "String10", "Subscriptions")
                                </div>

                                <div style="max-width: 10px;">
                                    <svg class="svg-icono" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512">
                                        <path d="M137.4 374.6c12.5 12.5 32.8 12.5 45.3 0l128-128c9.2-9.2 11.9-22.9 6.9-34.9s-16.6-19.8-29.6-19.8L32 192c-12.9 0-24.6 7.8-29.6 19.8s-2.2 25.7 6.9 34.9l128 128z" />
                                    </svg>
                                </div>
                            </button>

                            <div class="menu-dropdown-contenido" style="right: 0; width: 100%; background-color: var(--buscadorSubcabecera); z-index: 1001;">
                                <button @onclick="@(e => FiltrarDRM(e))" class="texto-cabecera menu-dropdown-item" style="font-size: 14px; text-align: right; width: 100%; border: 0px;">
                                    @Herramientas.Idiomas.BuscarTexto(idioma, "String9", "Subscriptions")
                                </button>
                                <hr />
                                @foreach (var drm in suscripcionSeleccionadaDRMs)
                                {
                                    <button @onclick="@(e => FiltrarDRM(e, drm))" class="texto-cabecera menu-dropdown-item" style="text-align: right; width: 100%; border: 0px;">
                                        <div style="font-size: 14px; display: flex; align-items: center; gap: 10px; justify-content: right;">
                                            @Juegos.JuegoDRM2.DevolverDRM(drm)
                                            <img src="@Herramientas.Ficheros.Imagenes.ServidorExterno(Juegos.JuegoDRM2.SacarImagen(drm), 22, 22)" style="max-width: 22px; max-height: 22px" />
                                        </div>
                                    </button>
                                }
                            </div>
                        </div>
                    }

                    <div style="background-color: var(--buscadorSubcabecera); padding-right: 10px; display: flex; align-items: center; gap: 10px;">
                        <input type="text" @bind-value="textoBuscador" @bind-value:event="oninput" @bind-value:after="TextoCambiaBuscador" class="entrada-texto" style="background-color: transparent; min-width: 50%; font-size: 14px; padding: 8px 10px;" placeholder="@Herramientas.Idiomas.BuscarTexto(idioma, "String13", "Subscriptions")" />

                        <div style="max-width: 16px;">
                            <svg class="svg-icono" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">
                                <path d="M416 208c0 45.9-14.9 88.3-40 122.7L502.6 457.4c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L330.7 376c-34.4 25.2-76.8 40-122.7 40C93.1 416 0 322.9 0 208S93.1 0 208 0S416 93.1 416 208zM208 352a144 144 0 1 0 0-288 144 144 0 1 0 0 288z" />
                            </svg>
                        </div>
                    </div>
                </div>
            }
        }
        else
        {
            <h1 style="font-size: 18px; margin: 0px;">
                @Herramientas.Idiomas.BuscarTexto(idioma, "Title", "Subscriptions")
            </h1>
        }
    </div>
</div>

@if (mostrarArchivo == false)
{
    if (mostrarUltimas == false)
    {
        if (tipoSeleccionado == Suscripciones2.SuscripcionTipo.Desconocido)
        {
            <div style="margin: 40px 0px; display: flex; flex-direction: column; gap: 30px;">
                <div class="caja-archivo-contenido" style="display: flex; align-items: center; padding: 20px; gap: 20px;">
                    <div style="max-width: 26px;">
                        <svg class="svg-boton" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">
                            <path d="M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM216 336l24 0 0-64-24 0c-13.3 0-24-10.7-24-24s10.7-24 24-24l48 0c13.3 0 24 10.7 24 24l0 88 8 0c13.3 0 24 10.7 24 24s-10.7 24-24 24l-80 0c-13.3 0-24-10.7-24-24s10.7-24 24-24zm40-208a32 32 0 1 1 0 64 32 32 0 1 1 0-64z" />
                        </svg>
                    </div>

                    <div>
                        @Herramientas.Idiomas.BuscarTexto(idioma, "String7", "Subscriptions")
                    </div>
                </div>

                <div class="suscripciones-grid caja-archivo-contenido" style="display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 30px; padding: 30px;">
                    @if (suscripcionesActuales?.Count > 0)
                    {
                        foreach (var suscripcionActual in suscripcionesActuales)
                        {
                            <button @onclick="@(e => SuscripcionAbrir(e, suscripcionActual))" class="boton-pequeño suscripcion-grid" style="display: flex; flex-direction: column; align-items: center;">
                                <div style="width: 200px; height: 70px; display: flex; justify-content: center;">
                                    <img src="@Herramientas.Ficheros.Imagenes.ServidorExterno(suscripcionActual.Tipo.ImagenLogo, 200, 70)" alt="@suscripcionActual.Tipo.Nombre" style="max-width: 100%; max-height: 100%; object-fit: contain;" />
                                </div>

                                @if (suscripcionActual.Juegos?.Count > 0)
                                {
                                    List<JuegoDRM> drms = new List<JuegoDRM>();

                                    foreach (var juego in suscripcionActual.Juegos)
                                    {
                                        bool añadirDRM = true;

                                        if (drms.Count > 0)
                                        {
                                            foreach (var drm in drms)
                                            {
                                                if (drm == juego.DRM)
                                                {
                                                    añadirDRM = false;
                                                }
                                            }
                                        }

                                        if (añadirDRM == true)
                                        {
                                            drms.Add(juego.DRM);
                                        }
                                    }

                                    <div style="display: flex; align-items: center; gap: 20px;">
                                        @if (suscripcionActual.Tipo.Precio > 0)
                                        {
                                            <div>
                                                @Herramientas.Precios.Euro((decimal)suscripcionActual.Tipo.Precio)
                                            </div>
                                        }

                                        <div>
                                            @string.Format(Herramientas.Idiomas.BuscarTexto(idioma, "String4", "Subscriptions"), suscripcionActual.Juegos.Count)
                                        </div>

                                        <div style="display: flex; align-items: center; gap: 10px;">
                                            @foreach (var drm in drms)
                                            {
                                                <img src="@Herramientas.Ficheros.Imagenes.ServidorExterno(JuegoDRM2.SacarImagen(drm), 20, 20)" style="max-width: 20px; max-height: 20px;" />
                                            }
                                        </div>
                                    </div>
                                }
                            </button>
                        }
                    }
                </div>
            </div>
        }
        else
        {
            <div style="display: flex; flex-direction: column;">
                @if (suscripcionSeleccionadaTipo.UsuarioEnlacesEspecificos == false)
                {
                    <div style="position: sticky; top: var(--alturaCabecera); z-index: 1000;">
                        <a href="@Herramientas.EnlaceAcortador.Generar(suscripcionSeleccionadaTipo.Enlace, suscripcionSeleccionadaTipo.Id, usuarioPatreon)" class="boton-pequeño" style="text-align: center; padding: 15px 20px; font-size: 18px;" target="_blank">
                            @Herramientas.Idiomas.BuscarTexto(idioma, "String5", "Subscriptions")
                        </a>
                    </div>
                }

                <div class="caja-archivo-contenido" style="margin: 40px 0px; padding: 30px; display: grid; grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); gap: 30px;">
                    @foreach (var juego in suscripcionSeleccionadaJuegosMostrar)
                    {
                        string enlaceSuscripcion = Herramientas.EnlaceAcortador.Generar(juego.Enlace, juego.Tipo, usuarioPatreon);

                        if (suscripcionSeleccionadaTipo.UsuarioEnlacesEspecificos == false)
                        {
                            enlaceSuscripcion = Herramientas.EnlaceAcortador.Generar(suscripcionSeleccionadaTipo.Enlace, suscripcionSeleccionadaTipo.Id, usuarioPatreon);
                        }

                        <CajaJuego idSuscripcion="@juego.Id" enlaceSuscripcion="@enlaceSuscripcion" drmSuscripcion="@juego.DRM" idioma="@idioma" juego="@juego.Juego" juegosUsuario="@juegosUsuario" usuarioDeseadosSteam="@deseadosUsuario?.SteamWishlist" usuarioDeseadosWeb="@deseadosUsuario?.Wishlist" usuarioDeseadosGog="@deseadosUsuario?.GogWishlist" tipo="CajaJuego.Tipo.Suscripciones" userAgent="@userAgent" />
                    }
                </div>
            </div>
        }
    }
    else
    {
        <div class="caja-archivo-contenido" style="padding: 30px; margin: 40px 0px; display: flex; flex-direction: column; gap: 20px;">
            @if (suscripcionesUltimas.Count > 0)
            {
                foreach (var juego in suscripcionesUltimas)
                {
                    string enlaceSuscripcion = Herramientas.EnlaceAcortador.Generar(juego.Enlace, juego.Tipo, usuarioPatreon);

                    if (Suscripciones2.SuscripcionesCargar.DevolverSuscripcion(juego.Tipo).UsuarioEnlacesEspecificos == false)
                    {
                        enlaceSuscripcion = Herramientas.EnlaceAcortador.Generar(Suscripciones2.SuscripcionesCargar.DevolverSuscripcion(juego.Tipo).Enlace, Suscripciones2.SuscripcionesCargar.DevolverSuscripcion(juego.Tipo).Id, usuarioPatreon);
                    }

                    <div>
                        <a href="@enlaceSuscripcion" target="_blank" class="boton-pequeño" style="text-decoration: none;">
                            <div style="display: flex; align-items: center; gap: 20px; justify-content: space-between; padding: 10px 20px;">
                                <div style="display: flex; align-items: center; gap: 20px;">
                                    <img src="@Herramientas.Ficheros.Imagenes.ServidorExterno(Suscripciones2.SuscripcionesCargar.DevolverSuscripcion(juego.Tipo).ImagenIcono, 20, 20)" alt="@Suscripciones2.SuscripcionesCargar.DevolverSuscripcion(juego.Tipo).Nombre" style="width: 20px; height: 20px;"/>

                                    <div>@juego.Nombre</div>
                                </div>
                            
                                <div>
                                    @Herramientas.Calculadora.DiferenciaTiempo(juego.FechaEmpieza, idioma)
                                </div>
                            </div>
                        </a>
                    </div>
                }
            }
            else
            {
                @Herramientas.Idiomas.BuscarTexto(idioma, "String12", "Subscriptions")
            }
        </div>
    }
}
else
{
    <div style="display: flex; align-items: start; gap: 15px; margin: 40px 0px 20px 0px; flex-wrap: wrap;">
        @foreach (var año in años)
        {
            <div>
                <button @onclick="@(e => CambiarAño(e, año))" class="boton-pequeño" style="padding: 6px 10px; width: auto;">
                    @año
                </button>

                @if (añoSeleccionado == año)
                {
                    <div style="margin-top: 10px; background: var(--colorTexto); padding: 1px;" />

                    <div style="position: absolute; margin-top: 15px; display: flex; align-items: center;">
                        @foreach (var suscripcionPasada in suscripcionesPasadas)
                        {
                            List<Juegos.JuegoSuscripcion> suscripcionAño = new List<Juegos.JuegoSuscripcion>();

                            foreach (var juego in suscripcionPasada.Juegos)
                            {
                                if (juego.FechaEmpieza.Year.ToString() == añoSeleccionado)
                                {
                                    suscripcionAño.Add(juego);
                                }
                            }

                            if (suscripcionAño.Count > 0)
                            {
                                <div style="margin-right: 15px; font-size: 14px;">
                                    <a onclick="moverScroll('pasado-@suscripcionPasada.Tipo.Id.ToString()')" style="color: var(--colorTexto); text-decoration: none; cursor: pointer;">
                                        <img src="@Herramientas.Ficheros.Imagenes.ServidorExterno(suscripcionPasada.Tipo.ImagenIcono, 22, 22)" style="width: 22px; height: 22px;" alt="Store" /> (@suscripcionAño.Count.ToString())
                                    </a>
                                </div>
                            }
                        }
                    </div>
                }
            </div>
        }
    </div>

    @if (string.IsNullOrEmpty(añoSeleccionado) == false)
    {
        <div style="display: flex; flex-direction: column; gap: 40px; margin: 55px auto 40px auto;">
            @foreach (var suscripcionPasada in suscripcionesPasadas)
            {
                List<Juegos.JuegoSuscripcion> suscripcionesAño = new List<Juegos.JuegoSuscripcion>();

                foreach (var juego in suscripcionPasada.Juegos)
                {
                    if (juego.FechaEmpieza.Year.ToString() == añoSeleccionado)
                    {
                        suscripcionesAño.Add(juego);
                    }
                }

                if (suscripcionesAño.Count > 0)
                {
                    <div class="caja-archivo-contenido">
                        <div id="pasado-@suscripcionPasada.Tipo.Id.ToString()" style="max-width: 200px;">
                            <img src="@suscripcionPasada.Tipo.ImagenLogo" alt="Store" style="width: 100%; max-height: 70px; object-fit: contain;" />
                        </div>

                        <hr>

                        <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 30px; justify-content: flex-start;">
                            @{
                                int i = 1;
                                while (i < 13)
                                {
                                    List<Juegos.JuegoSuscripcion> suscripcionesMensual = new List<Juegos.JuegoSuscripcion>();

                                    foreach (var juego in suscripcionesAño)
                                    {
                                        if (juego.FechaEmpieza.Month == i)
                                        {
                                            suscripcionesMensual.Add(juego);
                                        }
                                    }

                                    if (suscripcionesMensual.Count > 0)
                                    {
                                        suscripcionesMensual = suscripcionesMensual.OrderBy(s => s.Nombre).ToList();

                                        <div>
                                            <label>@Herramientas.Idiomas.BuscarTexto(idioma, "Month." + i.ToString(), "Months") (@suscripcionesMensual.Count.ToString())</label>

                                            <ul>
                                                @foreach (var juegoMensual in suscripcionesMensual)
                                                {
                                                    <li style="margin-bottom: 5px;">
                                                        <a href="/game/@juegoMensual.JuegoId/@Herramientas.EnlaceAdaptador.Nombre(juegoMensual.Nombre)/" style="text-decoration: none;">
                                                            @juegoMensual.Nombre (@Juegos.JuegoDRM2.DevolverDRM(juegoMensual.DRM))
                                                        </a>
                                                    </li>
                                                }
                                            </ul>
                                        </div>
                                    }

                                    i += 1;
                                }
                            }
                        </div>
                    </div>
                }
            }
        </div>
    }
}

@code {

    #nullable disable

    private string idioma = "en";
    private string usuarioId = null;
    private string userAgent = null;

    [PersistentState] public Herramientas.UsuarioListadosJuegos juegosUsuario { get; set; }
    [PersistentState] public Usuario deseadosUsuario { get; set; }
    private bool usuarioPatreon = false;

    [PersistentState] public List<Juegos.JuegoSuscripcion> juegosActuales { get; set; }
    private List<Suscripciones2.SuscripcionComponente> suscripcionesActuales = new List<Suscripciones2.SuscripcionComponente>();
    private List<Suscripciones2.SuscripcionComponente> suscripcionesPasadas = new List<Suscripciones2.SuscripcionComponente>();
    [PersistentState] public List<JuegoSuscripcion> suscripcionesUltimas { get; set; }

    [Parameter]
    public string suscripcionSeleccionadaTexto { get; set; }

    protected override void OnInitialized()
    {
        Herramientas.ContextoUsuarioDatos datos = Herramientas.ContextoUsuario.Leer(Contexto);
        idioma = datos.Idioma;
        usuarioId = datos.UsuarioId;
        userAgent = datos.UserAgent;

        if (string.IsNullOrEmpty(usuarioId) == false)
        {
            idioma = BaseDatos.Usuarios.Buscar.IdiomaSobreescribir(usuarioId);
            juegosUsuario ??= Herramientas.UsuarioJuegos.Cargar(usuarioId);
            deseadosUsuario ??= BaseDatos.Usuarios.Buscar.DeseadosTiene(usuarioId);
            usuarioPatreon = Herramientas.Patreon.VerificarActivo(BaseDatos.Usuarios.Buscar.FechaPatreon(usuarioId));
        }

        //--------------------------------------------------------------------

        DateTime arranque = new DateTime(2015, 1, 1);

        int i = 0;
        while (i < 100)
        {
            if (arranque.Year != DateTime.Now.Year)
            {
                años.Add(arranque.Year.ToString());
                arranque = arranque.AddYears(1);
            }
            i += 1;
        }

        años.Add(DateTime.Now.Year.ToString());
        años.Reverse();

        //--------------------------------------------------------------------

        juegosActuales ??= BaseDatos.Suscripciones.Buscar.Actuales();

        if (juegosActuales?.Count > 0)
        {
            foreach (var suscripcion in Suscripciones2.SuscripcionesCargar.GenerarListado())
            {
                List<Juegos.JuegoSuscripcion> juegos2 = new List<Juegos.JuegoSuscripcion>();

                foreach (var juego in juegosActuales)
                {
                    if (juego.Tipo == suscripcion.Id)
                    {
                        juegos2.Add(juego);
                    }
                }

                if (juegos2.Count > 0)
                {
                    Suscripciones2.SuscripcionComponente componente = new Suscripciones2.SuscripcionComponente();
                    componente.Juegos = juegos2;
                    componente.Tipo = suscripcion;

                    suscripcionesActuales.Add(componente);
                }
            }
        }

        //--------------------------------------------------------------------

        suscripcionesUltimas ??= BaseDatos.Suscripciones.Buscar.UltimasAñadidas();
    }

    protected override async Task OnAfterRenderAsync(bool primerRender)
    {
        if (primerRender == true)
        {
            if (string.IsNullOrEmpty(suscripcionSeleccionadaTexto) == false)
            {
                if (suscripcionesActuales?.Count > 0)
                {
                    foreach (var componente in suscripcionesActuales)
                    {
                        if (Herramientas.EnlaceAdaptador.Nombre(componente.Tipo.Nombre.ToLower()) == suscripcionSeleccionadaTexto)
                        {
                            await SuscripcionAbrir(componente);
                        }
                    }
                }
            }
        }
    }

    private Suscripciones2.Suscripcion suscripcionSeleccionadaTipo = new Suscripciones2.Suscripcion();
    private List<Juegos.JuegoSuscripcion> suscripcionSeleccionadaJuegosGestor = new List<Juegos.JuegoSuscripcion>();
    private List<Juegos.JuegoSuscripcion> suscripcionSeleccionadaJuegosMostrar = new List<Juegos.JuegoSuscripcion>();
    private List<JuegoDRM> suscripcionSeleccionadaDRMs = new List<JuegoDRM>();

    private async void SuscripcionAbrir(MouseEventArgs e, Suscripciones2.SuscripcionComponente componente)
    {
        await SuscripcionAbrir(componente);
    }

    private async Task SuscripcionAbrir(Suscripciones2.SuscripcionComponente componente)
    {
        if (componente != null)
        {
            tipoSeleccionado = componente.Tipo.Id;

            suscripcionSeleccionadaTexto = Herramientas.EnlaceAdaptador.Nombre(componente.Tipo.Nombre.ToLower());
            suscripcionSeleccionadaTipo = componente.Tipo;
            suscripcionSeleccionadaJuegosGestor.Clear();
            suscripcionSeleccionadaDRMs.Clear();

            foreach (var juegoActual in componente.Juegos)
            {
                Juegos.Juego juego2 = BaseDatos.Juegos.Buscar.UnJuego(juegoActual.JuegoId.ToString());

                if (juego2 != null)
                {
                    bool añadirVacioAnalisis = false;

                    if (juego2.Analisis == null)
                    {
                        añadirVacioAnalisis = true;
                    }
                    else
                    {
                        if (JsonSerializer.Serialize(juego2.Analisis) == "null" || JsonSerializer.Serialize(juego2.Analisis) == "[]")
                        {
                            añadirVacioAnalisis = true;
                        }
                        else
                        {
                            if (string.IsNullOrEmpty(juego2.Analisis.Cantidad) == true)
                            {
                                añadirVacioAnalisis = true;
                            }
                        }
                    }

                    if (añadirVacioAnalisis == true)
                    {
                        JuegoAnalisis analisis = new JuegoAnalisis();
                        analisis.Cantidad = "0";
                        analisis.Porcentaje = "0%";
                        juego2.Analisis = analisis;
                    }

                    juegoActual.Juego = juego2;
                    suscripcionSeleccionadaJuegosGestor.Add(juegoActual);
                }

                //------------------------------------

                bool añadirDRM = true;

                if (suscripcionSeleccionadaDRMs.Count > 0)
                {
                    foreach (var drm in suscripcionSeleccionadaDRMs)
                    {
                        if (drm == juegoActual.DRM)
                        {
                            añadirDRM = false;
                        }
                    }
                }

                if (añadirDRM == true)
                {
                    suscripcionSeleccionadaDRMs.Add(juegoActual.DRM);
                }
            }

            suscripcionSeleccionadaJuegosMostrar = suscripcionSeleccionadaJuegosGestor;
            suscripcionSeleccionadaJuegosMostrar = suscripcionSeleccionadaJuegosMostrar.AsParallel().OrderByDescending(x => int.Parse(x.Juego.Analisis.Cantidad.Replace(",", null))).ThenBy(x => x.Juego.Nombre).ToList();

            await JavaScript.InvokeVoidAsync("ChangeUrl", "/subscriptions/" + suscripcionSeleccionadaTexto + "/");
            await InvokeAsync(StateHasChanged);
        }
    }

    private void SuscripcionCerrar(MouseEventArgs e)
    {
        suscripcionSeleccionadaTexto = string.Empty;
    }

    private string textoBuscador = string.Empty;

    private void TextoCambiaBuscador()
    {
        suscripcionSeleccionadaJuegosMostrar.Clear();

        if (string.IsNullOrEmpty(textoBuscador) == false)
        {
            if (string.IsNullOrEmpty(textoBuscador) == false)
            {
                foreach (var resultadoBuscador in suscripcionSeleccionadaJuegosGestor)
                {
                    if (Herramientas.Buscador.LimpiarNombre(resultadoBuscador.Nombre).Contains(Herramientas.Buscador.LimpiarNombre(textoBuscador)) == true)
                    {
                        suscripcionSeleccionadaJuegosMostrar.Add(resultadoBuscador);
                    }
                }
            }
        }
        else
        {
            suscripcionSeleccionadaJuegosMostrar = suscripcionSeleccionadaJuegosGestor;
        }

        suscripcionSeleccionadaJuegosMostrar = suscripcionSeleccionadaJuegosMostrar.AsParallel().OrderByDescending(x => int.Parse(x.Juego.Analisis.Cantidad.Replace(",", null))).ThenBy(x => x.Juego.Nombre).ToList();
    }

    private void FiltrarDRM(MouseEventArgs e)
    {
        suscripcionSeleccionadaJuegosMostrar.Clear();

        foreach (var resultadoBuscador in suscripcionSeleccionadaJuegosGestor)
        {
            suscripcionSeleccionadaJuegosMostrar.Add(resultadoBuscador);
        }

        suscripcionSeleccionadaJuegosMostrar = suscripcionSeleccionadaJuegosMostrar.AsParallel().OrderByDescending(x => int.Parse(x.Juego.Analisis.Cantidad.Replace(",", null))).ThenBy(x => x.Juego.Nombre).ToList();
    }

    private void FiltrarDRM(MouseEventArgs e, Juegos.JuegoDRM drm)
    {
        suscripcionSeleccionadaJuegosMostrar.Clear();

        foreach (var resultadoBuscador in suscripcionSeleccionadaJuegosGestor)
        {
            if (resultadoBuscador.DRM == drm)
            {
                suscripcionSeleccionadaJuegosMostrar.Add(resultadoBuscador);
            }
        }

        suscripcionSeleccionadaJuegosMostrar = suscripcionSeleccionadaJuegosMostrar.AsParallel().OrderByDescending(x => int.Parse(x.Juego.Analisis.Cantidad.Replace(",", null))).ThenBy(x => x.Juego.Nombre).ToList();
    }

    private Suscripciones2.SuscripcionTipo tipoSeleccionado = Suscripciones2.SuscripcionTipo.Desconocido;
    private bool mostrarArchivo = false;
    private bool mostrarUltimas = false;

    private async Task CambiarTipo(MouseEventArgs e, Suscripciones2.SuscripcionTipo nuevoTipo, bool esArchivo, bool esUltimas)
    {
        mostrarArchivo = esArchivo;
        mostrarUltimas = esUltimas;

        if (esArchivo == false && esUltimas == false)
        {
            tipoSeleccionado = nuevoTipo;

            if (nuevoTipo == Suscripciones2.SuscripcionTipo.Desconocido)
            {
                suscripcionSeleccionadaTexto = null;
                await JavaScript.InvokeVoidAsync("ChangeUrl", "/subscriptions/");
            }
        }
        else
        {
            añoSeleccionado = DateTime.Now.Year.ToString();
            GenerarArchivo();
        }
    }

    private string CambiarEstilo(Suscripciones2.SuscripcionTipo nuevoTipo, bool esArchivo, bool esUltimas)
    {
        if (mostrarArchivo == true && esArchivo == true)
        {
            if (nuevoTipo != Suscripciones2.SuscripcionTipo.Desconocido)
            {
                return "background-color: transparent;";
            }
            else
            {
                return "background-color: var(--botonSubcabecera); box-shadow: 0px 2px 4px 0px rgba(0, 0, 0, 0.25),0px 0px 1px 0px rgba(0, 0, 0, 0.25);";
            }
        }
        else
        {
            if (tipoSeleccionado == nuevoTipo && mostrarArchivo == false && esArchivo == false)
            {
                if (esUltimas == true && mostrarUltimas == true)
                {
                    return "background-color: var(--botonSubcabecera); box-shadow: 0px 2px 4px 0px rgba(0, 0, 0, 0.25),0px 0px 1px 0px rgba(0, 0, 0, 0.25);";
                }
                else if (esUltimas == false && mostrarUltimas == false)
                {
                    return "background-color: var(--botonSubcabecera); box-shadow: 0px 2px 4px 0px rgba(0, 0, 0, 0.25),0px 0px 1px 0px rgba(0, 0, 0, 0.25);";
                }

                return "background-color: transparent;";
            }
            else
            {
                return "background-color: transparent;";
            }
        }
    }

    #region Archivo

    private List<string> años = new List<string>();
    private string añoSeleccionado = string.Empty;

    private void CambiarAño(MouseEventArgs e, string nuevoAño)
    {
        añoSeleccionado = nuevoAño;
        GenerarArchivo();
    }

    private void GenerarArchivo()
    {
        List<Juegos.JuegoSuscripcion> juegosPasados = BaseDatos.Suscripciones.Buscar.Año(añoSeleccionado);

        if (juegosPasados.Count > 0)
        {
            suscripcionesPasadas.Clear();

            foreach (var suscripcion in Suscripciones2.SuscripcionesCargar.GenerarListado())
            {
                List<Juegos.JuegoSuscripcion> juegos2 = new List<Juegos.JuegoSuscripcion>();

                foreach (var juego in juegosPasados)
                {
                    if (juego.Tipo == suscripcion.Id)
                    {
                        juegos2.Add(juego);
                    }
                }

                if (juegos2.Count > 0)
                {
                    Suscripciones2.SuscripcionComponente componente = new Suscripciones2.SuscripcionComponente();
                    componente.Juegos = juegos2;
                    componente.Tipo = suscripcion;

                    suscripcionesPasadas.Add(componente);
                }
            }
        }
    }

    #endregion
}
