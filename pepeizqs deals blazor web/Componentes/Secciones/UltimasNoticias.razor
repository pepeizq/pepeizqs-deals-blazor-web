@page "/last-news"

@using Microsoft.AspNetCore.Components.Web
@using Microsoft.VisualBasic
@using pepeizqs_deals_blazor_web.Componentes.Interfaz

@inject IHttpContextAccessor Contexto

@{
	string titulo = Herramientas.Idiomas.BuscarTexto(idioma, "Title", "LastNews") + " • pepeizq's deals";
	string descripcion = Herramientas.Idiomas.BuscarTexto(idioma, "String4", "LastNews");
	string enlace = "https://pepeizqdeals.com/last-news/";
	string imagen = "https://pepeizqdeals.com/logo/logoentrada.webp";
	string keywords = "news";

	if (noticiasMostrar != null)
	{
		if (noticiasMostrar.Count > 0)
		{
			int i = 0;
			foreach (var noticiaMostrar in noticiasMostrar)
			{
				if (i < 3)
				{
					string[] keywordsEnBruto = Herramientas.Buscador.LimpiarNombre(noticiaMostrar.TituloEn, false).Split(' ');
					List<string> keywordsLista = new List<string>();
					keywordsLista.AddRange(keywordsEnBruto);

					foreach (var keyword in keywordsLista)
					{
						if (keywords.Contains(keyword) == false && keyword.Length > 3)
						{
							keywords = keywords + ", " + keyword;
						}
					}
				}
				else
				{
					break;
				}

                i += 1;
			}
		}
	}

	<HeadContent>
		<PageTitle>@titulo</PageTitle>

		<meta name="og:title" Content="@titulo" />
		<meta name="description" content="@descripcion" />
		<meta name="og:description" content="@descripcion" />
		<meta name="og:url" content="@enlace" />
		<meta name="og:image" content="@imagen" />
		<meta name="og:site_name" content="pepeizq's deals" />
		<meta name="og:type" content="website" />
		<meta name="robots" content="index, follow" />
		<meta name="keywords" content="@keywords" />

		@if (noticiasMostrar != null)
		{
			if (noticiasMostrar.Count > 0)
			{
				<script type="application/ld+json">
					{
						"@@context": "https://schema.org",
						"@@type": "BreadcrumbList",
						"itemListElement": [					
					@{
						string jsonContenido = string.Empty;

						int i = 1;
						foreach (var noticia in noticiasMostrar)
						{
							string jsonAñadir = @"{
											""@type"": ""ListItem"",
											""position"": @posicion,
											""name"": ""@titulo"",
											""item"": ""@enlace""
											}";

							jsonAñadir = jsonAñadir.Replace("@posicion", i.ToString());
							jsonAñadir = jsonAñadir.Replace("@titulo", noticia.TituloEn);
							jsonAñadir = jsonAñadir.Replace("@enlace", "https://pepeizqdeals.com/news/" + noticia.Id.ToString() + "/" + Herramientas.EnlaceAdaptador.Nombre(noticia.TituloEn + "/"));

							if (i < noticiasMostrar.Count - 1)
							{
								jsonAñadir = jsonAñadir + ",";
							}

							jsonContenido = jsonContenido + jsonAñadir;

                            i += 1;
						}
					}
					@((MarkupString)jsonContenido)
						]
					}
				</script>
			}
		}

		<link rel="canonical" href="@enlace" />
	</HeadContent>
}

<style>
	.imagen-expandir {
		transition: transform .2s;
	}

		.imagen-expandir:hover {
			transform: scale(1.01);
		}
</style>

<style>
	.caja-noticia-contenido {
		background-color: var(--fondoSubsubcabecera);
		border: 2px solid var(--fondoSubcabecera);
		padding: 40px;
		box-shadow: 0px 4px 8px 0px rgba(0, 0, 0, 0.28),0px 0px 2px 0px rgba(0, 0, 0, 0.24);
	}
</style>

@if (noticiasMostrar != null)
{
	if (noticiasMostrar.Count > 0)
	{
		<div class="subcabecera">
			<div class="cuerpo-ancho sub-subcabecera">
				@if (Herramientas.RobotsUserAgents.EsBot(userAgent) == false)
				{
					<button class="boton-pequeño" style="@CambiarEstilo(Noticias.NoticiaTipo.Desconocido, false) width: fit-content; padding: 8px 20px; border-radius: 5px;" @onclick="@(e => CambiarTipo(e, Noticias.NoticiaTipo.Desconocido, false))">
						<h1 style="font-size: 18px; margin: 0px;">
							@Herramientas.Idiomas.BuscarTexto(idioma, "Title", "LastNews")
						</h1>
					</button>

					<div style="margin-left: auto; display: flex; justify-content: right; align-items: center; gap: 20px;">
						<div style="margin-left: auto; display: flex; justify-content: right;">
							<button class="boton-pequeño" style="@CambiarEstilo(Noticias.NoticiaTipo.Desconocido, true) width: fit-content; padding: 8px 20px; border-radius: 5px;" @onclick="@(e => CambiarTipo(e, Noticias.NoticiaTipo.Desconocido, true))">
								<div style="font-size: 16px;">
									@Herramientas.Idiomas.BuscarTexto(idioma, "String1", "LastNews")
								</div>
							</button>
						</div>
					</div>
				}
				else
				{
					<h1 style="font-size: 18px; margin: 0px;">
						@Herramientas.Idiomas.BuscarTexto(idioma, "Title", "LastNews")
					</h1>
				}
				
			</div>
		</div>

		<div class="subcabecera" style="background-color: var(--fondoSubsubcabecera);">
			<div class="cuerpo-ancho sub-subcabecera">
				@if (Herramientas.RobotsUserAgents.EsBot(userAgent) == false)
				{
					if (tiposActuales.Count > 0)
					{
						foreach (var tipo in tiposActuales)
						{
							if (tipo != Noticias.NoticiaTipo.Desconocido)
							{
								<button class="boton-pequeño" style="@CambiarEstilo(tipo, false) width: fit-content; padding: 8px 20px; border-radius: 5px;" @onclick="@(e => CambiarTipo(e, tipo, false))" title="@Noticias.NoticiasCargar.Traduccion(tipo, idioma)">
									@Noticias.NoticiasCargar.Traduccion(tipo, idioma)
								</button>
							}
						}
					}
				}

				<div style="margin-left: auto; display: flex; justify-content: right; align-items: center; gap: 20px;">
					<RedesSociales idioma="@idioma" />
				</div>
			</div>
		</div>

		@if (mostrarArchivo == false)
		{
			<div style="display: flex; flex-direction: column; gap: 40px; margin: 40px auto;">
				@foreach (var noticiaMostrar in noticiasMostrar)
				{
					<div class="caja-noticia-contenido" style="padding: 30px; display: flex; align-items: center; gap: 30px;">
						<div style="width: 50%;">
							<a href="/news/@noticiaMostrar.Id.ToString()/@Herramientas.EnlaceAdaptador.Nombre(Herramientas.Idiomas.ElegirTexto(idioma, noticiaMostrar.TituloEn, noticiaMostrar.TituloEs))/">
								<img src="@noticiaMostrar.Imagen" class="imagen-expandir" style="width: 100%; height: 100%; border: 1px solid var(--fondoBotonPequeño);" />
							</a>
						</div>

						<div style="width: 100%; display: flex; flex-direction: column; gap: 20px;">
							<div style="font-size: 20px;">
								@Herramientas.Idiomas.ElegirTexto(idioma, noticiaMostrar.TituloEn, noticiaMostrar.TituloEs)
							</div>

							<div style="font-size: 18px;">
								@noticiaMostrar.FechaEmpieza.Day.ToString()/@noticiaMostrar.FechaEmpieza.Month.ToString()/@noticiaMostrar.FechaEmpieza.Year.ToString()
							</div>

							<div>
								@{
									string texto = Herramientas.Idiomas.ElegirTexto(idioma, noticiaMostrar.ContenidoEn, noticiaMostrar.ContenidoEs);

									if (string.IsNullOrEmpty(texto) == false)
									{
										if (texto.Contains("</div>") == true)
										{
											int int1 = texto.IndexOf("</div>");
											texto = texto.Remove(int1, texto.Length - int1);

											if (texto.Contains("<div") == true)
											{
												int int2 = texto.IndexOf(">");
												texto = texto.Remove(0, int2 + 1);
											}
										}
										else
										{
											if (texto.Contains("<") == true)
											{
												int int1 = texto.IndexOf("<");
												texto = texto.Remove(int1, texto.Length - int1);
											}
										}
									}

									<div>
										@((MarkupString)texto)
									</div>

									if (noticiaMostrar.Tipo == Noticias.NoticiaTipo.Bundles)
									{
										<a href="/news/@noticiaMostrar.Id.ToString()/@Herramientas.EnlaceAdaptador.Nombre(Herramientas.Idiomas.ElegirTexto(idioma, noticiaMostrar.TituloEn, noticiaMostrar.TituloEs))/" class="boton-pequeño" style="width: auto; margin-top: 20px; padding: 10px 15px;">
											@Herramientas.Idiomas.BuscarTexto(idioma, "String2", "LastNews")
										</a>
									}
									else
									{
										<a href="/news/@noticiaMostrar.Id.ToString()/@Herramientas.EnlaceAdaptador.Nombre(Herramientas.Idiomas.ElegirTexto(idioma, noticiaMostrar.TituloEn, noticiaMostrar.TituloEs))/" class="boton-pequeño" style="width: auto; margin-top: 20px; padding: 10px 15px;">
											@Herramientas.Idiomas.BuscarTexto(idioma, "String3", "LastNews")
										</a>
									}
								}
							</div>
						</div>
					</div>
				}
			</div>
		}
		else
		{
			<div style="display: flex; align-items: start; gap: 15px; margin: 40px 0px 20px 0px;">
				@foreach (var año in años)
				{
					<div>
						<button @onclick="@(e => CambiarAño(e, año))" class="boton-pequeño" style="padding: 6px 10px; width: auto;">
							@año
						</button>

						@if (añoSeleccionado == año)
						{
							<div style="margin-top: 10px; background: var(--colorTexto); padding: 1px;" />
						}
					</div>
				}
			</div>

			@if (noticiasAntiguas.Count > 0)
			{
				List<Noticias.Noticia> noticiasAño = new List<Noticias.Noticia>();

				foreach (var noticiaAntigua in noticiasAntiguas)
				{
					if (noticiaAntigua.FechaEmpieza.Year.ToString() == añoSeleccionado)
					{
						noticiasAño.Add(noticiaAntigua);
					}
				}

				if (noticiasAño.Count > 0)
				{
					<div style="display: flex; flex-direction: column; gap: 30px; margin-bottom: 40px;">
						@{
							int i = 1;
							while (i < 13)
							{
								List<Noticias.Noticia> noticiasMensual = new List<Noticias.Noticia>();

								foreach (var noticia in noticiasAño)
								{
									if (noticia.FechaEmpieza.Month == i)
									{
										noticiasMensual.Add(noticia);
									}
								}

								if (noticiasMensual.Count > 0)
								{
									noticiasMensual.Reverse();

									<div class="caja-noticia-contenido">
										<label>@Herramientas.Idiomas.BuscarTexto(idioma, "Month." + i.ToString(), "Months")</label>
										<hr />

										<ul>
											@foreach (var noticiaMensual in noticiasMensual)
											{
												<li>
													<a href="/news/@noticiaMensual.Id.ToString()/@Herramientas.EnlaceAdaptador.Nombre(Herramientas.Idiomas.ElegirTexto(idioma, noticiaMensual.TituloEn, noticiaMensual.TituloEs))/" style="text-decoration: none;">@Herramientas.Idiomas.ElegirTexto(idioma, noticiaMensual.TituloEn, noticiaMensual.TituloEs)</a> (@noticiaMensual.FechaEmpieza.Day/@noticiaMensual.FechaEmpieza.Month/@noticiaMensual.FechaEmpieza.Year)
												</li>
											}
										</ul>
									</div>
								}

								i += 1;
							}
						}
					</div>
				}
			}
		}
	}
}

@code {

	#nullable disable

	private string idioma = "en";
	private string usuarioId = null;
	private string userAgent = null;

	private List<string> fechas = new List<string>();
	private List<Noticias.Noticia> noticiasMostrar = new List<Noticias.Noticia>();
	private List<Noticias.Noticia> noticiasAntiguas = new List<Noticias.Noticia>();

	private List<string> años = new List<string>();
	private string añoSeleccionado = null;

	protected override void OnInitialized()
	{
		idioma = Contexto.HttpContext.Request.Headers["Accept-Language"].ToString().Split(";").FirstOrDefault()?.Split(",").FirstOrDefault();
		usuarioId = Contexto.HttpContext.User.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value;
		userAgent = Contexto.HttpContext.Request.Headers.UserAgent.ToString();

		if (string.IsNullOrEmpty(usuarioId) == false)
		{
			idioma = BaseDatos.Usuarios.Buscar.IdiomaSobreescribir(usuarioId);
		}

		//--------------------------------------------------------------------

		noticiasMostrar = BaseDatos.Noticias.Buscar.Actuales(tipoSeleccionado);

		if (noticiasMostrar.Count > 0)
		{
			foreach (var noticia in noticiasMostrar)
			{
				bool añadirTipo = true;

				if (tiposActuales.Count > 0)
				{
					foreach (var tipoActual in tiposActuales)
					{
						if (tipoActual == noticia.Tipo)
						{
							añadirTipo = false;
						}
					}
				}

				if (añadirTipo == true)
				{
					tiposActuales.Add(noticia.Tipo);
				}
			}
		}

		//--------------------------------------------------------------------

		DateTime arranque = new DateTime(2023, 9, 1);

		int i = 0;
		while (i < 100)
		{
			if (arranque.Year != DateTime.Now.Year)
			{
				años.Add(arranque.Year.ToString());
				arranque = arranque.AddYears(1);
			}
			i += 1;
		}

		años.Add(DateTime.Now.Year.ToString());
		años.Reverse();
	}

	private Noticias.NoticiaTipo tipoSeleccionado = Noticias.NoticiaTipo.Desconocido;
	private List<Noticias.NoticiaTipo> tiposActuales = new List<Noticias.NoticiaTipo>();
	private bool mostrarArchivo = false;

	private void CambiarTipo(MouseEventArgs e, Noticias.NoticiaTipo nuevoTipo, bool esArchivo)
	{
		mostrarArchivo = esArchivo;

		if (esArchivo == false)
		{
			tipoSeleccionado = nuevoTipo;
			noticiasMostrar = BaseDatos.Noticias.Buscar.Actuales(tipoSeleccionado);
		}
		else
		{
			añoSeleccionado = DateTime.Now.Year.ToString();
			noticiasAntiguas = BaseDatos.Noticias.Buscar.Año(añoSeleccionado);
		}
	}

	private string CambiarEstilo(Noticias.NoticiaTipo nuevoTipo, bool esArchivo)
	{
		if (mostrarArchivo == true && esArchivo == true)
		{
			if (nuevoTipo != Noticias.NoticiaTipo.Desconocido)
			{
				return "background-color: transparent;";
			}
			else
			{
				return "background-color: var(--botonSubcabecera);";
			}
		}
		else
		{
			if (tipoSeleccionado == nuevoTipo && mostrarArchivo == false && esArchivo == false)
			{
				return "background-color: var(--botonSubcabecera);";
			}
			else
			{
				return "background-color: transparent;";
			}
		}
	}

	private void CambiarAño(MouseEventArgs e, string nuevoAño)
	{
		añoSeleccionado = nuevoAño;

		noticiasAntiguas = BaseDatos.Noticias.Buscar.Año(añoSeleccionado);
	}
}
